<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>React基础(一)</title>
    <url>/s2/uncategorized/React%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CSS3动画特效</title>
    <url>/s2/css/Css3%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h4 id="CSS3变形是一些效果的集合"><a href="#CSS3变形是一些效果的集合" class="headerlink" title="CSS3变形是一些效果的集合"></a>CSS3变形是一些效果的集合</h4><a id="more"></a>
<ul>
<li>如平移、旋转、缩放、倾斜效果</li>
<li>每个效果都可以称为变形（transform），它们可以分别操控元素发生平移、旋转、缩放、倾斜等变化</li>
<li>语法</li>
</ul>
<pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span>[transform-function] *<span class="token punctuation">;</span></code></pre>
<ul>
<li>变形函数</li>
</ul>
<ol>
<li>translate()：平移函数，基于X、Y坐标重新定位元素的位置</li>
<li>scale()：缩放函数，可以使任意元素对象尺寸发生变化</li>
<li>rotate()：旋转函数，取值是一个度数值</li>
<li>skew()：倾斜函数，取值是一个度数值</li>
</ol>
<h6 id="一、translate-tx-ty"><a href="#一、translate-tx-ty" class="headerlink" title="一、translate(tx,ty);"></a>一、translate(tx,ty);</h6><pre><code>    transform: translate(4px,8px);
    -webkit-transform: translate(4px,8px);
    -o-transform: translate(4px,8px);
    -moz-transform: translate(4px,8px);

transform: translateX(4px);
transform: translateY(8px);</code></pre><h6 id="二、scale-sx-sy"><a href="#二、scale-sx-sy" class="headerlink" title="二、scale(sx,sy);"></a>二、scale(sx,sy);</h6><ul>
<li>scale()函数可以只接收一个值，也可以接收两个值，只有一个值时，第二个值默认和第一个值相等</li>
</ul>
<blockquote>
<p>scaleX(sx)：表示只设置X轴的缩放</p>
</blockquote>
<pre><code>transform:scale(2,0)  等价于 transform:scaleX(2)
transform:scale(0,2)  等价于 transform:scaleY(2)</code></pre><p>示例：</p>
<blockquote>
<p>transform: scale(1.5);<br>-webkit-transform: scale(1.5);<br>-moz-transform: scale(1.5);<br>-o-transform: scale(1.5);</p>
</blockquote>
<h6 id="三、skew-ax-ay"><a href="#三、skew-ax-ay" class="headerlink" title="三、skew(ax, ay);"></a>三、skew(ax, ay);</h6><ul>
<li>可以仅设置沿着X轴或Y轴方向倾斜<blockquote>
<p>skewX（ax）：表示只设置X轴的倾斜<br>skewY（ay）：表示只设置Y轴的倾斜</p>
</blockquote>
</li>
</ul>
<h6 id="rotate-a"><a href="#rotate-a" class="headerlink" title="rotate(a);"></a>rotate(a);</h6><blockquote>
<p>参数a单位使用deg表示<br>参数a取正值时元素相对原来中心顺时针旋转</p>
</blockquote>
<ul>
<li>rotate( )函数只是旋转，而不会改变元素的形状</li>
<li>skew( )函数是倾斜，元素不会旋转，会改变元素的形状</li>
</ul>
<h3 id="CSS3过渡"><a href="#CSS3过渡" class="headerlink" title="CSS3过渡"></a>CSS3过渡</h3><ul>
<li>transition:[transition-property(过渡或动态模拟的CSS属性)  transition-duration(完成过渡所需要的时间)<br> transition-timing-function(指定过渡函数)   transition-delay(过渡开始出现的延迟时间) ] </li>
</ul>
<ol>
<li>过渡属性（ transition-property ）<blockquote>
<p>定义转换动画的CSS属性名称<br>IDENT：指定的CSS属性（width、height、background-color属性等）<br>all：指定所有元素支持transition-property属性的样式，一般为了方便都会使用all</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>过渡所需的时间（ transition-duration ）<br>定义转换动画的时间长度，即从设置旧属性到换新属性所花费的时间，单位为秒（s）</p>
</blockquote>
<blockquote>
<p>过渡动画函数（ transition-timing-function ）<br>指定浏览器的过渡速度，以及过渡期间的操作进展情况，通过给过渡添加一个函数来指定动画的快慢方式<br>ease：速度由快到慢（默认值）<br>linear：速度恒速（匀速运动）<br>ease-in：速度越来越快（渐显效果）<br>ease-out：速度越来越慢（渐隐效果）<br>ease-in-out：速度先加速再减速（渐显渐隐效果）</p>
</blockquote>
<blockquote>
<p>过渡延迟时间（ transition-delay ）<br>指定一个动画开始执行的时间，当改变元素属性值后多长时间去执行过渡效果<br>正值：元素过渡效果不会立即触发，当过了设置的时间值后才会被触发<br>负值：元素过渡效果会从该时间点开始显示，之前的动作被截断<br>0：默认值，元素过渡效果立即执行</p>
</blockquote>
<ul>
<li>使用transition实现过渡动画的使用步骤:<blockquote>
<p>在默认样式中声明元素的初始状态样式<br>声明过渡元素最终状态样式，如悬浮状态<br>在默认样式中通过添加过渡函数，添加一些不同的样式</p>
</blockquote>
</li>
</ul>
<h3 id="animation动画简介"><a href="#animation动画简介" class="headerlink" title="animation动画简介"></a>animation动画简介</h3><blockquote>
<p>animation实现动画主要由两个部分组成<br>通过类似Flash动画的关键帧来声明一个动画<br>在animation属性中调用关键帧声明的动画实现一个更为复杂的动画效果</p>
</blockquote>
<pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span>  IDENT</span>  <span class="token punctuation">{</span>
   <span class="token selector">from </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*CSS样式写在这里*/</span><span class="token punctuation">}</span>
   <span class="token selector">percentage </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*CSS样式写在这里*/</span><span class="token punctuation">}</span>
   <span class="token selector">to </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*CSS样式写在这里*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-css"><code class="language-css">
<span class="token atrule"><span class="token rule">@keyframes</span> spread</span> <span class="token punctuation">{</span>
   <span class="token selector">0% </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
   <span class="token selector">33% </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">23</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>
   <span class="token selector">66% </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">46</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>
   <span class="token selector">100% </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">69</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>
 <span class="token punctuation">}</span></code></pre>
<ul>
<li>调用关键帧<br>animation:animation-name  animation–duration  animation-timing-function<br> animation-delay  animation-iteration-count  animation-direction<br>animation-play-state  animation-fill-mode</li>
</ul>
<ol>
<li><p>动画的播放次数（animation-iteration-count）<br>值通常为整数，默认值为1</p>
</li>
<li><p>特殊值infinite，表示动画无限次播放</p>
</li>
<li><p>动画的播放方向（animation-direction）<br>normal，动画每次都是循环向前播放<br>alternate，动画播放为偶数次则向前播放</p>
</li>
<li><p>动画的播放状态（animation-play-state）<br>running将暂停的动画重新播放<br>paused将正在播放的元素动画停下来</p>
</li>
<li><p>动画发生的操作（animation-fill-mode）<br>forwards表示动画在结束后继续应用最后关键帧的位置<br>backwards表示会在向元素应用动画样式时迅速应用动画的初始帧<br>both表示元素动画同时具有forwards和backwards的效果</p>
</li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>表现</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础(一)</title>
    <url>/s2/uncategorized/Vue%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
    <content><![CDATA[<p>一、VUE基础<br>1、什么是VUE？</p>
<pre><code>VUE是渐进式的JavaScript框架；
如果你已经有一个现成的服务端应用，你可以将VUE作为该应用的一部分嵌入其中；
VUE允许你将一个网页分割成可复用的组件；
VUE是一个响应式的组件可影响其视图的更新；</code></pre><p>2、vue-cli<br>  2.x版本的使用及环境搭建<br>    1、新版本的使用<br>    2、Vue CLI &gt;= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：<br>      npm install -g @vue/cli-init<br>    3、创建项目<br>    4、创建的项目内容介绍<br>    5、分析工程目录<br>二、基本指令</p>
<pre><code>1、模板语法
      1、template  {{ }} 
      特征：只能存在单行语句

    2、v-once:只能渲染一次
    3、v-html:原始html，作用解析html结构
    4、v-bind:指令（绑定数据）,可以简写为 ： 冒号即可
    5、v-if:指令（逻辑判断）只能接收一个布尔值
    6、v-else：if  else 如果if为false则执行else
    7、v-show:只是简单地切换元素的 CSS 属性 display。
    面试题：v-if vs v-show的区别及使用场景

        v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。

        v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。

        相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。

        一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。

    8、列表渲染
     v-for:</code></pre>]]></content>
  </entry>
  <entry>
    <title>Vue入门及Vue-cli</title>
    <url>/s2/Vue/Vue%E5%85%A5%E9%97%A8%E5%8F%8AVue-cli/</url>
    <content><![CDATA[<h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>本文是基于模块化方式使用vue的。<br>首先安装好node环境，建议10以上最好，安装后，在dos命令下输入<br>node -v和npm -v 如果能正常显示，则表示安装成功！</p>
<p><img src="https://img-blog.csdnimg.cn/20201209171752215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>ps：不建议使用国内的淘宝镜像cnpm，虽然说下载安装组件时候速度能快很多，但是后续的问题较多</p>
</blockquote>
<h3 id="二、安装Vue-cli"><a href="#二、安装Vue-cli" class="headerlink" title="二、安装Vue-cli"></a>二、安装Vue-cli</h3><blockquote>
<p>Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了<br>batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint校验，以及生产环境可用的构建版本。</p>
</blockquote>
<p>打开官网 <a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/guide/</a>，</p>
<ul>
<li>关于旧版本</li>
</ul>
<blockquote>
<p>Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果你已经全局安装了旧版本的 vue-cli (1.x 或<br>2.x)，你需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它。</p>
</blockquote>
<ul>
<li>Node 版本要求</li>
</ul>
<blockquote>
<p>Vue CLI 4.x 需要 Node.js v8.9 或更高版本 (推荐 v10 以上)。你可以使用 n ，nvm 或nvm-windows 在同一台电脑中管理多个 Node 版本。</p>
</blockquote>
<ul>
<li>安装<br>如果使用dos，建议在管理员权限下操作：<blockquote>
<p>可以使用下列任一命令安装这个新的包：<br>npm install -g @vue/cli<br>或者<br>yarn global add @vue/cli</p>
</blockquote>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20201210100428828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>验证它是否安装成功</li>
</ul>
<pre class=" language-bash"><code class="language-bash">vue --version</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20201210100523913.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>升级<br>如需升级全局的 Vue CLI 包，请运行：</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> update -g @vue/cli</code></pre>
<p>或者</p>
<pre class=" language-bash"><code class="language-bash">yarn global upgrade --latest @vue/cli</code></pre>
<h3 id="三、创建一个项目"><a href="#三、创建一个项目" class="headerlink" title="三、创建一个项目"></a>三、创建一个项目</h3><p>运行以下命令来创建一个新项目：</p>
<ol>
<li>通过命令行创建项目<pre class=" language-bash"><code class="language-bash">vue create hello-world</code></pre>
</li>
<li>你会被提示选取一个 preset。你可以选默认的包含了基本的 Babel + ESLint 设置的 preset，也可以选“手动选择特性”来选取需要的特性。<br><img src="https://img-blog.csdnimg.cn/20201209181620101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
<li>这个默认的设置非常适合快速创建一个新项目的原型，而手动设置则提供了更多的选项，它们是面向生产的项目更加需要的。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20201209181744594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>ps:输入要相应的数字选择安装的模块</p>
</blockquote>
<ol start="4">
<li>vue create 命令可选项</li>
</ol>
<pre class=" language-bash"><code class="language-bash">vue create --help</code></pre>
<pre class=" language-bash"><code class="language-bash">用法：create <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>app-name<span class="token operator">></span>

创建一个由 <span class="token variable"><span class="token variable">`</span>vue-cli-service<span class="token variable">`</span></span> 提供支持的新项目


选项：

  -p, --preset <span class="token operator">&lt;</span>presetName<span class="token operator">></span>       忽略提示符并使用已保存的或远程的预设选项
  -d, --default                   忽略提示符并使用默认预设选项
  -i, --inlinePreset <span class="token operator">&lt;</span>json<span class="token operator">></span>       忽略提示符并使用内联的 JSON 字符串预设选项
  -m, --packageManager <span class="token operator">&lt;</span>command<span class="token operator">></span>  在安装依赖时使用指定的 <span class="token function">npm</span> 客户端
  -r, --registry <span class="token operator">&lt;</span>url<span class="token operator">></span>            在安装依赖时使用指定的 <span class="token function">npm</span> registry
  -g, --git <span class="token punctuation">[</span>message<span class="token punctuation">]</span>             强制 / 跳过 <span class="token function">git</span> 初始化，并可选的指定初始化提交信息
  -n, --no-git                    跳过 <span class="token function">git</span> 初始化
  -f, --force                     覆写目标目录可能存在的配置
  -c, --clone                     使用 <span class="token function">git</span> clone 获取远程预设选项
  -x, --proxy                     使用指定的代理创建项目
  -b, --bare                      创建项目时省略默认组件中的新手指导信息
  -h, --help                      输出使用帮助信息</code></pre>
<h3 id="四、使用图形化界面"><a href="#四、使用图形化界面" class="headerlink" title="四、使用图形化界面"></a>四、使用图形化界面</h3><pre class=" language-bash"><code class="language-bash">vue ui</code></pre>
<p>上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程<br><img src="https://img-blog.csdnimg.cn/20201209182144737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">### 五、创建项目后<br><img src="https://img-blog.csdnimg.cn/20201210105352774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>ps：安装成功后，按照底部指示命令操作运行即可</p>
</blockquote>
<ol>
<li>运行项目</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20201210105700680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ol start="2">
<li>打开浏览器运行页面</li>
</ol>
<blockquote>
<p>可通过本地、网络形式访问欢迎页面，地址就是窗口给的这两个</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201210105858390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="六、项目启动后自动打开网页"><a href="#六、项目启动后自动打开网页" class="headerlink" title="六、项目启动后自动打开网页"></a>六、项目启动后自动打开网页</h3><p>在项目根目录新建 vue.config.js 配置文件</p>
<pre class=" language-bash"><code class="language-bash">module.exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    devServer: <span class="token punctuation">{</span>
        host: <span class="token string">'localhost'</span>,   //本地
        port: 8081,    //端口号
        open: <span class="token boolean">true</span>   //默认false   true自动打开
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>重新运行项目就会自动打开默认浏览器</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitee配置SSH公钥</title>
    <url>/s2/uncategorized/Gitee%E9%85%8D%E7%BD%AESSH%E5%85%AC%E9%92%A5/</url>
    <content><![CDATA[<h2 id="Gitee配置SSH公钥"><a href="#Gitee配置SSH公钥" class="headerlink" title="Gitee配置SSH公钥"></a>Gitee配置SSH公钥</h2><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>创建公钥</li>
</ol>
<p>在本地打开git命令窗口，输入如下命令</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.ssh</code></pre>
<blockquote>
<p>如果没有.ssh目录则输入如下命令创建目录，然后输入上述命令进入.ssh目录</p>
</blockquote>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/.ssh</code></pre>
<ol start="2">
<li><p>输入如下命令生成密钥对</p>
<pre><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code></pre></li>
<li><p>一路Enter下去哈<del>别输入内容就行啦</del>别问为什么，因为你会被坑的~</p>
</li>
<li><p>输入如下命令查看公钥内容</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> id_rsa.pub</code></pre>
</li>
<li><p>将屏幕打印出来的内容复制到刚才的个人公钥里面去，就是下面图中红色部分</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Vue基础(三)</title>
    <url>/s2/uncategorized/Vue%E5%9F%BA%E7%A1%80(%E4%B8%89)/</url>
    <content><![CDATA[<p>第3次课vue——base<br> 一、组件<br>   1、组件声明<br>    Vue 的组件可以通过两种方式来声明：<br>        一种是通过 Vue.component，另外一种则是 Single File Components（SFC）； </p>
<pre><code>Vue.component方式（见官网  组件基础/基本示例）
SFC：在实际工作中，大部分都是用官方的脚手架 vue-cli 生成项目，用的也是 SFC 这种方式。 </code></pre><p>   2、通过 Prop 向子组件传递数据<br>      1、父传子：在调用的父组件中定义数据名称并同时声明要传的值，在子组件中通过props接收即可<br>               传递静态或动态的<br>         props可接收固定的字符串外还可接收其它类型，如对象，json数组等；<br>         父级 prop 的更新会向下流动到子组件中，但是反过来则不行。<br>         这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>
<pre><code>     1.1:Prop

  2、子传父：$emit来传递,规则$emit()中的参数第一个为key，父级使用的时候使用事件传递，则方法触发名必须为子类的key，
        然后通过方法的参数，得到子类的$emit()中的value值，实现传参。
        如果需要获取时事数据则需要使用v-model，作为子类的$emit()中的value值
        注意：子传父只能通过事件传
同样的父传子也可以使用v-model来</code></pre><p>二、组件加载与keep-alive</p>
]]></content>
  </entry>
  <entry>
    <title>Vue基础(七)</title>
    <url>/s2/uncategorized/Vue%E5%9F%BA%E7%A1%80(%E4%B8%83)/</url>
    <content><![CDATA[<p>一、路由<br>   1、安装  在SFC模式下<br>     npm i vue-router -S</p>
<p>   2、引入<br>   import VueRouter from ‘vue-router’</p>
<p>   3、路由安装<br>   Vue.use(VueRouter)</p>
<p>   4、自定义路由<br>         1、手动创建一个路由<br>            const router = new VueRouter({<br>              routes: [<br>                {<br>                  path: ‘/xx’,<br>                  name: ‘xx’,<br>                  component: xxx<br>                }<br>              ]<br>            })</p>
<pre><code>     2、以HelloWord为例：通过import方式引入组件
      import HelloWorld from &#39;./components/HelloWorld&#39;

     3、在App.vue中通过视图注入
      &lt;router-view /&gt;

     4、修改手动创建路由中的path、name、component
         const router = new VueRouter({
          routes: [
            {
              path: &#39;/hello&#39;,
              name: &#39;HelloWorld&#39;,
              component: HelloWorld
            }
          ]
        })

     5、将创建的路由添加到实例化的vue中
     6、访问

5、优化手动添加的路由,统一调配
  创建router文件夹  添加js文件，将上述代码移至js中

6、访问跳转
  可以通过标签形式访问,关键字：router-link
 其中的to后面跟的就是路由中的name属性值

 可以配合Animate.css美化点击的菜单

 router-link中的tag属性可以改变router-link标签的标签名称

7、多个路由配置

8、动态路径参数 参数传递
    以冒号开头 { path: &#39;/user/:id&#39;, component: User }
    /user/bar 设置值
    显示参数：{{ this.$route.params.id }}

9、路由嵌套
    在需要嵌套的组件下使用children:[{},{}]
    注意点：子组件中的path不需要添加/
    理论上：可以无限嵌套下去

10、编程式的导航
    router 的实例方法，通过编写代码来实现：
    router.push(location, onComplete?, onAbort?)  添加方式
    router.replace(location, onComplete?, onAbort?)  替换方式
    router.go(n) // 跳转到指定组件

11、命名路由
    通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候
    &lt;router-view class=&quot;view one&quot;&gt;&lt;/router-view&gt;
    &lt;router-view class=&quot;view two&quot; name=&quot;a&quot;&gt;&lt;/router-view&gt;
    &lt;router-view class=&quot;view three&quot; name=&quot;b&quot;&gt;&lt;/router-view&gt;

    const router = new VueRouter({
      routes: [
        {
          path: &#39;/&#39;,
          components: {
            default: Foo,
            a: Bar,
            b: Baz
          }
        }
      ]
    })

12、重定向和别名
  1、重定向
   const router = new VueRouter({
      routes: [
        { path: &#39;/a&#39;, redirect: &#39;/b&#39; }
      ]
    })

13、HTML5 History 模式
  如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。
不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，
当用户在浏览器直接访问 http://oursite.com/user/id 就会返回 404，这就不好看了。

14、路由选中样式设置
       方式1、设置 .router-link-active的样式
       方式2、全局配置 &lt;router-link&gt; 的默认“激活 class 类名” 修改方式1的样式命名  linkActiveClass:&#39;active&#39;,
15、 linkExactActiveClass
        精准匹配到样式
        默认值: &quot;router-link-exact-active&quot;
    全局配置 &lt;router-link&gt; 精确激活的默认的 class。

             如果不觉得麻烦，还可以使用active-class，每个路由中去一个个配置</code></pre>]]></content>
  </entry>
  <entry>
    <title>Vue基础(二)</title>
    <url>/s2/uncategorized/Vue%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</url>
    <content><![CDATA[<p>1、v-for 与 v-if 一同使用</p>
<p>2、template 嵌套</p>
<p>3、事件处理<br>   v-on:click<br>   简写方式   @click<br>  除了click外还有其它的方法也支持，事件写在methods:{}中</p>
<p>4、事件传参<br>   只需要添加一个括号，放入参数即可，如果需要使用event则需要使用$event</p>
<p>5、使用事件添加数据<br>   数组更新检测<br>    数组合并使用concat等变异方法 (mutation method)与非变异方法</p>
<p>二、计算属性<br>1、计算属性  关键字 computed：{}，解决代码冗余<br>2、计算属性缓存 vs 方法<br>      其实使用methods:{}，也可以解决冗余问题，但是计算属性是基于它们的响应式依赖进行缓存的。<br>      只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 message 还没有发生改变，<br>      多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<pre><code>总之：方法没有缓存，计算属性存在缓存</code></pre><p>三、Class 与 Style 绑定<br>   class<br>   1、可以通过v-bind:class=””或者简写方式 :class=”” 来动态的决定样式<br>       可以同时添加多个class<br>       可以与普通的class样式共存   class=”static”<br>   2、使用计算属性来渲染<br>   3、数组语法：可以把一个数组传给 v-bind:class，以应用一个 class 列表,根据条件切换列表中的 class，可以用三元表达式<br>   class=”[isActive ? activeClass : ‘’, errorClass]”</p>
<p>   绑定内联样式style<br>   1、v-bind:style<br>   2、通常是直接绑定一个对象使用v-bind:style=”styleObject”<br>     data: {<br>          styleObject: {<br>            color: ‘red’,<br>            fontSize: ‘13px’<br>          }</p>
<pre><code>}

3、同样适用数组语法v-bind:style=&quot;[baseStyles, overridingStyles]&quot;</code></pre><p>四、表单输入绑定<br>       1、-model：指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素<br>           v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</select></p>
<pre><code>    text 和 textarea 元素使用 value 属性和 input 事件；
    checkbox 和 radio 使用 checked 属性和 change 事件；
    select 字段将 value 作为 prop 并将 change 作为事件。

2、修饰符
   .lazy  .number   .trim

3、监听事件  实时监听数据变化
 watch响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</code></pre><p>五、组件基础</p>
<pre><code>1、组件创建及调用</code></pre>]]></content>
  </entry>
  <entry>
    <title>Vue基础(五)</title>
    <url>/s2/uncategorized/Vue%E5%9F%BA%E7%A1%80(%E4%BA%94)/</url>
    <content><![CDATA[<p>一、VUE生命周期<br>   主要为：beforeCreate、create、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed<br>   注意点：不要在选项属性或回调上使用箭头函数，<br>         比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。<br>         因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致<br>              Uncaught TypeError: Cannot read property of undefined<br>                   或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</p>
<p>二、过渡&amp;动画<br>    1、Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡<br>                条件渲染 (使用 v-if)<br>                条件展示 (使用 v-show)<br>                动态组件<br>                组件根节点<br>        <transition name="xx"></transition> name为自定义的名，有些还需要在当前组件style中定义样式；<br>        在进入/离开的过渡中，会有 6 个 class 切换。<br>            注意点：如果你使用一个没有名字的 <transition>，则 v- 是这些类名的默认前缀。<br>               如果你使用了 <transition name="my-transition">，那么 v-enter 会替换为 my-transition-enter。</transition></transition></p>
<pre><code>    v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。

    v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。

    v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。

    v-leave: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。

    v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。

    v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。

    自定义动画和过渡效果：定义好class切换即可

2、第三方库
    Animate.css的使用</code></pre><p>三、自定义指令<br>   1、注册全局自定义指令<br>     关键字：directive<br>            Vue.directive(‘指令名称’, {<br>              // 当被绑定的元素插入到 DOM 中时……生命周期<br>              inserted: function (el) {<br>                // 元素<br>                el.事件()<br>              }<br>            })</p>
<pre><code>2、注册局部指令，组件中也接受一个 directives 的选项

        directives: {
          指令名称: {
            // 指令的定义
            inserted: function (el) {
              el.事件()
            }
          }
        }
调用：v-指令名称   </code></pre><p>   钩子函数：<br>    bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p>
<pre><code>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。

update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。
    指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</code></pre><p>四、过滤器<br>    关键字：filters:{} 分为全局和本地<br>   使用地方：过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 </p>
]]></content>
  </entry>
  <entry>
    <title>Vue基础(六)</title>
    <url>/s2/uncategorized/Vue%E5%9F%BA%E7%A1%80(%E5%85%AD)/</url>
    <content><![CDATA[<p>一、axios<br>    react —-&gt;使用fetch</p>
<pre><code>vue ------&gt;使用axios

    二者都是基于promise优化来的
    最开始vue自身有一个基于vue的网络请求方式 vueResouce，后来就不再维护；

1、Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。

    优点：    
         从浏览器中创建 XMLHttpRequests
        从 node.js 创建 http 请求
        支持 Promise API
        拦截请求和响应
        转换请求数据和响应数据
        取消请求
        自动转换 JSON 数据
        客户端支持防御 XSRF

2、axios的安装及项目使用方式

   安装：npm i axios -S 不建议安装全局；

  使用：
  方式1：每个需要的组件中都通过import方式引入即可

 方式2：
      创建一个公用的引入：在根节点引入axios，再添加到vue的prototype中
      import Axios from &#39;axios&#39;;
      Vue.prototype.$axios = Axios;// 其中 $axios为自定义的名字，定义时应避免使用关键字和敏感字符

      之后即可在任意组件中使用，不需要再每一个组件都引入：组件中通过this.$axios.xxx使用（xxx为请求方式如get、post等）
3、标准模式：
axios({
      method: &#39;post&#39;,
      url: &#39;/user/12345&#39;,
      data: {
        firstName: &#39;Fred&#39;,
        lastName: &#39;Flintstone&#39;
      }
}).then()
  .catch()

3、get请求     
   所有请求默认都是get请求
   // get请求的参数可以放在url地址后面
  axios.get(&#39;/user?ID=12345&#39;)   
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });

 // 也可以使用params: {ID: 12345}的形式
 axios.get(&#39;/user&#39;, {
    params: {
          ID: 12345
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });

4、post请求
 post的参数不能使用parms
      如果参数类型不匹配或者需要转换则可以使用axios中的qs附带的stingify功能

5、执行多个并发请求
 axios.all([getUserAccount(), getUserPermissions()])
  .then(axios.spread(function (acct, perms) {
    // 两个请求现在都执行完成
  }));

6、全局配置默认值
axios.defaults.baseURL = &#39;https://api.example.com&#39;;
axios.defaults.headers.common[&#39;Authorization&#39;] = AUTH_TOKEN;
axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencoded&#39;;


7、vue 拦截器
   在请求或响应被 then 或 catch 处理前拦截它们。

    // 添加请求拦截器
    axios.interceptors.request.use(function (config) {
        // 在发送请求之前做些什么
        return config;
      }, function (error) {
        // 对请求错误做些什么
        return Promise.reject(error);
      });

    // 添加响应拦截器
    axios.interceptors.response.use(function (response) {
        // 对响应数据做点什么
        return response;
      }, function (error) {
        // 对响应错误做点什么
        return Promise.reject(error);
      });

8、跨域请求问题</code></pre>]]></content>
  </entry>
  <entry>
    <title>Vue进阶-Vuex</title>
    <url>/s2/uncategorized/Vue%E8%BF%9B%E9%98%B6-Vuex/</url>
    <content><![CDATA[<p>一、VUE基础<br>1、什么是VUE？</p>
<pre><code>VUE是渐进式的JavaScript框架；
如果你已经有一个现成的服务端应用，你可以将VUE作为该应用的一部分嵌入其中；
VUE允许你将一个网页分割成可复用的组件；
VUE是一个响应式的组件可影响其视图的更新；</code></pre><p>2、vue-cli<br>  2.x版本的使用及环境搭建<br>    1、新版本的使用<br>    2、Vue CLI &gt;= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：<br>      npm install -g @vue/cli-init<br>    3、创建项目<br>    4、创建的项目内容介绍<br>    5、分析工程目录<br>二、基本指令</p>
<pre><code>1、模板语法
      1、template  {{ }} 
      特征：只能存在单行语句

    2、v-once:只能渲染一次
    3、v-html:原始html，作用解析html结构
    4、v-bind:指令（绑定数据）,可以简写为 ： 冒号即可
    5、v-if:指令（逻辑判断）只能接收一个布尔值
    6、v-else：if  else 如果if为false则执行else
    7、v-show:只是简单地切换元素的 CSS 属性 display。
    面试题：v-if vs v-show的区别及使用场景

        v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。

        v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。

        相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。

        一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。

    8、列表渲染
     v-for:</code></pre>]]></content>
  </entry>
  <entry>
    <title>Vue进阶-router</title>
    <url>/s2/uncategorized/Vue%E8%BF%9B%E9%98%B6-router/</url>
    <content><![CDATA[<p>一、VUE基础<br>1、什么是VUE？</p>
<pre><code>VUE是渐进式的JavaScript框架；
如果你已经有一个现成的服务端应用，你可以将VUE作为该应用的一部分嵌入其中；
VUE允许你将一个网页分割成可复用的组件；
VUE是一个响应式的组件可影响其视图的更新；</code></pre><p>2、vue-cli<br>  2.x版本的使用及环境搭建<br>    1、新版本的使用<br>    2、Vue CLI &gt;= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：<br>      npm install -g @vue/cli-init<br>    3、创建项目<br>    4、创建的项目内容介绍<br>    5、分析工程目录<br>二、基本指令</p>
<pre><code>1、模板语法
      1、template  {{ }} 
      特征：只能存在单行语句

    2、v-once:只能渲染一次
    3、v-html:原始html，作用解析html结构
    4、v-bind:指令（绑定数据）,可以简写为 ： 冒号即可
    5、v-if:指令（逻辑判断）只能接收一个布尔值
    6、v-else：if  else 如果if为false则执行else
    7、v-show:只是简单地切换元素的 CSS 属性 display。
    面试题：v-if vs v-show的区别及使用场景

        v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。

        v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。

        相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。

        一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。

    8、列表渲染
     v-for:</code></pre>]]></content>
  </entry>
  <entry>
    <title>Flex box布局</title>
    <url>/s2/html/flex/</url>
    <content><![CDATA[<h4 id="一、容器属性"><a href="#一、容器属性" class="headerlink" title="一、容器属性"></a>一、容器属性</h4><h6 id="1-Flex是-Flexible-Box-的缩写，意为”弹性布局”，用来为盒状模型提供最大灵活性"><a href="#1-Flex是-Flexible-Box-的缩写，意为”弹性布局”，用来为盒状模型提供最大灵活性" class="headerlink" title="1.Flex是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大灵活性"></a>1.Flex是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大灵活性</h6><a id="more"></a>
<pre><code>作用:
1. 它能够更加高效方便的控制元素的对齐、排列
2. 可以自动计算布局内元素的尺寸，无论这个元素的尺寸是固定的还是动态的
3. 控制元素在页面的布局方向
4. 按照不同于DOM所指定排序方式对屏幕上的元素重新排序</code></pre><h6 id="2-Flex基本概念"><a href="#2-Flex基本概念" class="headerlink" title="2.Flex基本概念"></a>2.Flex基本概念</h6><pre><code> 2.1 采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”
 2.2 水平主轴（main axis）
 2.3 垂直交叉轴（cross axis）
 2.4 项目默认沿主轴排列</code></pre><h6 id="3-设为-Flex-布局以后，flex-item的float、clear和vertical-align属性将失效"><a href="#3-设为-Flex-布局以后，flex-item的float、clear和vertical-align属性将失效" class="headerlink" title="3.设为 Flex 布局以后，flex item的float、clear和vertical-align属性将失效"></a>3.设为 Flex 布局以后，flex item的float、clear和vertical-align属性将失效</h6><h6 id="4-flex-direction-决定主轴的方向（即项目的排列方向）"><a href="#4-flex-direction-决定主轴的方向（即项目的排列方向）" class="headerlink" title="4. flex-direction 决定主轴的方向（即项目的排列方向）"></a>4. flex-direction 决定主轴的方向（即项目的排列方向）</h6><pre><code> 4.1 row（默认）、row-reverse：主轴为水平方向，起点在左端、右端
 4.2 column 、column-reverse：主轴为垂直方向，起点在上沿、下沿</code></pre><h6 id="5-flex-wrap-默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义了如果一条轴线排不下，如何换行"><a href="#5-flex-wrap-默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义了如果一条轴线排不下，如何换行" class="headerlink" title="5.flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义了如果一条轴线排不下，如何换行"></a>5.flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义了如果一条轴线排不下，如何换行</h6><pre><code> 5.1 nowrap（默认）：不换行
 5.2 wrap：换行，第一行在上方
 5.3 wrap-reverse：换行，第一行在下方</code></pre><h6 id="6-flex-flow-是复合属性：是flex-direction和flex-wrap的简写形式，默认值为row-nowrap"><a href="#6-flex-flow-是复合属性：是flex-direction和flex-wrap的简写形式，默认值为row-nowrap" class="headerlink" title="6.flex-flow 是复合属性：是flex-direction和flex-wrap的简写形式，默认值为row nowrap"></a>6.flex-flow 是复合属性：是flex-direction和flex-wrap的简写形式，默认值为row nowrap</h6><pre><code>  符合团队习惯，不能因为简便，而去损失了代码的可读性</code></pre><h6 id="7-justify-content-定义了项目在主轴上的对齐方式"><a href="#7-justify-content-定义了项目在主轴上的对齐方式" class="headerlink" title="7. justify-content 定义了项目在主轴上的对齐方式"></a>7. justify-content 定义了项目在主轴上的对齐方式</h6><pre><code> 7.1 flex-start（默认值）：左对齐
 7.2 flex-end：右对齐
 7.3 center： 居中
 7.4 space-between：两端对齐，项目之间的间隔都相等
 7.5 space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</code></pre><h6 id="8-align-items定义项目在交叉轴上对齐方式-属性值：具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下"><a href="#8-align-items定义项目在交叉轴上对齐方式-属性值：具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下" class="headerlink" title="8. align-items定义项目在交叉轴上对齐方式 属性值：具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下"></a>8. align-items定义项目在交叉轴上对齐方式 属性值：具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下</h6><pre><code>8.1 flex-start：交叉轴的起点对齐
8.2 flex-end：交叉轴的终点对齐
8.3 center：交叉轴的中点对齐
8.4 baseline: 项目的第一行文字的基线对齐
8.5 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</code></pre><h4 id="二、项目属性"><a href="#二、项目属性" class="headerlink" title="二、项目属性"></a>二、项目属性</h4><h6 id="1-order-定义项目的排列顺序。数值越小，排列越靠前，默认为0"><a href="#1-order-定义项目的排列顺序。数值越小，排列越靠前，默认为0" class="headerlink" title="1. order 定义项目的排列顺序。数值越小，排列越靠前，默认为0"></a>1. order 定义项目的排列顺序。数值越小，排列越靠前，默认为0</h6><pre><code>1.1 必须为 0 或者 非负整数
1.2 负数的话不起作用，会排列在首位，设置了order属性，会按照order属性的值大小排列</code></pre><h6 id="2-flex-grow-定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。主要作用是：分配剩余空间的"><a href="#2-flex-grow-定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。主要作用是：分配剩余空间的" class="headerlink" title="2. flex-grow 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。主要作用是：分配剩余空间的"></a>2. flex-grow 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。主要作用是：分配剩余空间的</h6><pre><code>2.1 flex-grow: &lt;number&gt;;
2.2 不能为负数，虽然可以设置为正小数值，一般不这么用
2.3 平均分配的含义是，去掉内容之后的空间进行均分，如果本身内容就多，虽然均分，但还是占比较大的空间</code></pre><h6 id="3-flex-shrink-定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。主要作用是做缩小空间用的"><a href="#3-flex-shrink-定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。主要作用是做缩小空间用的" class="headerlink" title="3. flex-shrink 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。主要作用是做缩小空间用的"></a>3. flex-shrink 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。主要作用是做缩小空间用的</h6><pre><code>3.1 flex-shrink: &lt;number&gt;;
3.2 负值对该属性无效</code></pre><h6 id="4-flex-basis在flex-grow-和flex-shinrk属性起作用以前，定义每一个flex项目的默认大小，它的默认值为auto，即项目的本来大小"><a href="#4-flex-basis在flex-grow-和flex-shinrk属性起作用以前，定义每一个flex项目的默认大小，它的默认值为auto，即项目的本来大小" class="headerlink" title="4. flex-basis在flex-grow  和flex-shinrk属性起作用以前，定义每一个flex项目的默认大小，它的默认值为auto，即项目的本来大小"></a>4. flex-basis在flex-grow  和flex-shinrk属性起作用以前，定义每一个flex项目的默认大小，它的默认值为auto，即项目的本来大小</h6><pre><code>4.1 length: 我们平常用的一些属性值，如 px、%、 rem等 
4.2 具体的空间算法：伸缩项目分配的空间=伸缩容器的空间 - basis设置的空间 - 其他项目内容的空间</code></pre><h6 id="5-flex-是一个复合属性，代表flex-grow-flex-shrink-和-flex-basis的简写，后两个属性可选，默认值为0-1-auto"><a href="#5-flex-是一个复合属性，代表flex-grow-flex-shrink-和-flex-basis的简写，后两个属性可选，默认值为0-1-auto" class="headerlink" title="5. flex 是一个复合属性，代表flex-grow, flex-shrink 和 flex-basis的简写，后两个属性可选，默认值为0 1 auto"></a>5. flex 是一个复合属性，代表flex-grow, flex-shrink 和 flex-basis的简写，后两个属性可选，默认值为0 1 auto</h6><pre><code>5.1 两个快捷值
   flex：auto；代表 (1 1 auto)
   flex：none；代表 (0 0 auto)</code></pre><h6 id="6-align-self-交叉轴上的对齐方式，允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性"><a href="#6-align-self-交叉轴上的对齐方式，允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性" class="headerlink" title="6. align-self 交叉轴上的对齐方式，允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性"></a>6. align-self 交叉轴上的对齐方式，允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性</h6><pre><code>6.1 默认值为auto，表示继承父元素的align-items属性
6.2 可能取6个值，除了auto，其他都与align-items属性完全一致</code></pre>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础(四)</title>
    <url>/s2/uncategorized/Vue%E5%9F%BA%E7%A1%80(%E5%9B%9B)/</url>
    <content><![CDATA[<p>第4次课 网络请求</p>
<p>一、处理边界情况<br>    1、访问根实例<br>        关键字 $root  根实例可以通过 $root 属性进行访问;<br>        首先要明白什么是根节点？根节点在当前指的是#app，可以在其中定义数据、计算属性、方法等，其余组件获取都是通过this.$root.XX的方式<br>        注意点：都需要在要获取根节点的组件的计算属性中通过方法获取；</p>
<pre><code>2、访问父级组件实例
           关键字$parent  可以用来从一个子组件访问父组件的实例,提供了一种机会，可以在后期随时触达父级组件，
           以替代将数据以 prop 的方式传入子组件的方式。
           首先要明白哪一个组件是父组件，哪一个组件是子组件？父组件，可以在其中定义数据、计算属性、方法等，子组件获取都是通过this.$parent.XX的方式
    注意点：都需要在要获取父组件的子组件中的计算属性中通过方法获取； 具体实现方式同访问根实例

3、访问子组件实例或子元素
       关键字$refs 可以让你使用原生js方式访问组件;一般在生命周期函数mounted中访问
       使用方式this.$refs.xx，获取元素后进行原生方式操作



4、依赖注入
    关键字provide、inject
    作用：父组件可以在provide函数中指定我们想要提供给后代组件的数据/方法，只有允许的数据/方法后代子组件才能访问
    子组件可以通过inject接收允许的数据/方法；
    实际上，你可以把依赖注入看作一部分“大范围有效的 prop”，除了：
            祖先组件不需要知道哪些后代组件使用它提供的属性
            后代组件不需要知道被注入的属性来自哪里

注意：以上几种方式不推荐刻意使用，因为它破坏了设计初衷，组件之间会加强耦合性，属于‘黑魔法’，非必要场景尽量少用；</code></pre><p>二、插槽<br>     1、基本插槽<br>             什么是插槽？<br>             关键字：solt；<br>     2、编译作用域<br>         父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。<br>     3、具名插槽<br>                 注意点：父组件传给子组件的如果是template 则需要使用v-slot:xx声明；或者slot=”xx”；<br>     4、插槽默认内容<br>               如果父组件存在具名的内容，则默认的内容会被覆盖</p>
<pre><code> 5、作用域插槽
            实现一个子传父
           子组件的内容传递给父组件：可以通过v-bind在插槽上绑定一个动态的属性，
             父组件中&lt;template  v-slot:default=&quot;slotProps&quot;&gt;{{ slotProps.user.firstName }}&lt;/template&gt;</code></pre>]]></content>
  </entry>
  <entry>
    <title>emmet使用简介</title>
    <url>/s2/html/emmet/</url>
    <content><![CDATA[<h2 id="写HTML-CSS快到飞起"><a href="#写HTML-CSS快到飞起" class="headerlink" title="写HTML/CSS快到飞起"></a>写HTML/CSS快到飞起</h2><a id="more"></a>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code>div#box&gt;p.title+ul.list&gt;li.child$*3{我是第$个}^div#box2</code></pre><p>   写好上面这条语句，按下键盘Tab键即可看到一个完整的html基本文档结构。</p>
<h3 id="1-html初始结构"><a href="#1-html初始结构" class="headerlink" title="1.html初始结构"></a>1.html初始结构</h3><pre><code>! 可以快速生成基础的结构，同时防止手写时忘记某个代码块，输入错误的代码</code></pre><h3 id="2-id指令-class指令"><a href="#2-id指令-class指令" class="headerlink" title="2.id指令:# ; class指令:."></a>2.id指令:# ; class指令:.</h3><pre><code>div#test</code></pre><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<pre><code>div.test</code></pre><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<h3 id="3：子节点（-gt-），兄弟节点（-），上级节点（-）"><a href="#3：子节点（-gt-），兄弟节点（-），上级节点（-）" class="headerlink" title="3：子节点（&gt;），兄弟节点（+），上级节点（^）"></a>3：子节点（&gt;），兄弟节点（+），上级节点（^）</h3><pre><code>3.1 div&gt;ul&gt;li&gt;p</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>ul<span class="token operator">></span>
     <span class="token operator">&lt;</span>li<span class="token operator">></span>
       <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
     <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
</code></pre>
<pre><code>3.2 div+ul+p</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre>
<pre><code>3.3 div&gt;ul&gt;li^div (这里的^是接在li后面所以在li的上一级，与ul成了兄弟关系,当然两个^^就是上上级）</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>ul<span class="token operator">></span>
     <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
   <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<h3 id="4：重复（-）"><a href="#4：重复（-）" class="headerlink" title="4：重复（*）"></a>4：重复（*）</h3><pre><code>重复指令：*

div*5（*号后面添加数字表示重复的元素个数）</code></pre><pre class=" language-java"><code class="language-java">   <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<h3 id="5：分组（-）"><a href="#5：分组（-）" class="headerlink" title="5：分组（()）"></a>5：分组（()）</h3><pre><code>div&gt;(ul&gt;li&gt;a)+div&gt;p</code></pre><p>（括号里面的内容为一个代码块，表示与括号内部嵌套和外面的的层级无关）</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>ul<span class="token operator">></span>
     <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
   <span class="token operator">&lt;</span>div<span class="token operator">></span>
     <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<p>解释：这里如果不加括号的话，猜想下，a+div这样div就是和a是兄弟关系了，会包含在li里面</p>
<pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>ul<span class="token operator">></span>
     <span class="token operator">&lt;</span>li<span class="token operator">></span>
       <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
       <span class="token operator">&lt;</span>div<span class="token operator">></span>
         <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
     <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>ul</code></pre>
<h3 id="6：属性（-attr-）——id，class都有怎么能少了属性呢-属性指令："><a href="#6：属性（-attr-）——id，class都有怎么能少了属性呢-属性指令：" class="headerlink" title="6：属性（[attr]）——id，class都有怎么能少了属性呢 属性指令：[]"></a>6：属性（[attr]）——id，class都有怎么能少了属性呢 属性指令：[]</h3><pre><code>a[href=’###’ name=‘xiaoA’] 
（中括号内填写属性键值对的形式，并且空格隔开）</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"###"</span> name<span class="token operator">=</span><span class="token string">"xiaoA"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre>
<h3 id="7：编号（-编号指令："><a href="#7：编号（-编号指令：" class="headerlink" title="7：编号（$) 编号指令：$"></a>7：编号（$) 编号指令：$</h3><pre><code>ul&gt;li.test$*3  （$代表一位数，后面更上*数字就代表从1递增到填写的数字）</code></pre><pre class=" language-java"><code class="language-java">
 <span class="token operator">&lt;</span>ul<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test3"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
</code></pre>
<blockquote>
<p>注意：一个$ 代表一位数，$$就是两位数了,以此类推就可以形成$:(1),$$:(01),$$$:(001)<br>如果想自定义从几开始递增的话就利用：$@+数字*数字</p>
<p>例如：ul&gt;li*3.test$@3</p>
</blockquote>
<pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>ul<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test3"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test4"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test5"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre>
<h3 id="8：文本（-）"><a href="#8：文本（-）" class="headerlink" title="8：文本（{}）"></a>8：文本（{}）</h3><pre><code>ul&gt;li.test$*3{测试$} （{里面填写内容，可以和$一起组合使用哦}）</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>ul<span class="token operator">></span>
  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test1"</span><span class="token operator">></span>测试<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test2"</span><span class="token operator">></span>测试<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test3"</span><span class="token operator">></span>测试<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre>
<h3 id="9：隐式标签"><a href="#9：隐式标签" class="headerlink" title="9：隐式标签"></a>9：隐式标签</h3><pre><code>这个标签没有指令，而是部分标签可以不使用输入标签，直接输入指令，即可识别父类标签。

例如：.test</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<pre><code>例如：ul&gt;.test$*3</code></pre><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>ul<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
   <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test3"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre>
<pre><code>例如：select&gt;.test$*5</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>option <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
  <span class="token operator">&lt;</span>option <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
  <span class="token operator">&lt;</span>option <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test3"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
  <span class="token operator">&lt;</span>option <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test4"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
  <span class="token operator">&lt;</span>option <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test5"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre>
<p>等等…</p>
<p>隐私标签有如下几个：</p>
<pre><code>li：用于 ul 和 ol 中
tr：用于 table、tbody、thead 和 tfoot 中
td：用于 tr 中
option：用于 select 和 optgroup 中</code></pre><p><strong>关键部分</strong>：看没用，操作几遍，几分钟你就能掌握这些指令，然后飞快的撸码</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/s2/tool/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><a id="more"></a>
<p>1、初始化</p>
<pre class=" language-java"><code class="language-java">    git init</code></pre>
<p>2、添加</p>
<pre class=" language-java"><code class="language-java">    git add <span class="token punctuation">.</span></code></pre>
<p>3、备注</p>
<pre class=" language-java"><code class="language-java">    git commit <span class="token operator">-</span>m <span class="token string">'add'</span></code></pre>
<p>4、推送到仓库,</p>
<pre class=" language-java"><code class="language-java">    git push origin master</code></pre>
<blockquote>
<p>PS:此处是推送到master分支下</p>
</blockquote>
<h2 id="创建分支并切换"><a href="#创建分支并切换" class="headerlink" title="创建分支并切换"></a>创建分支并切换</h2><p>1）新建分支</p>
<pre class=" language-java"><code class="language-java">    git branch <span class="token function">xxx</span> <span class="token punctuation">(</span>xxx填写你的分支名称<span class="token punctuation">)</span></code></pre>
<p>2）查看所有分支</p>
<pre class=" language-java"><code class="language-java">    git branch <span class="token operator">-</span>a</code></pre>
<p>3）切换到某一分支</p>
<pre class=" language-java"><code class="language-java">    git checkout <span class="token function">xxx</span> <span class="token punctuation">(</span>xxx填写要切换的分支名称）</code></pre>
<p>4）添加修改代码到缓存（注意最后的”.”前面有个空格</p>
<pre class=" language-java"><code class="language-java">    git add <span class="token punctuation">.</span></code></pre>
<p>5）添加提交代码的备注</p>
<pre class=" language-java"><code class="language-java">    git commit <span class="token operator">-</span>m <span class="token string">"xxx"</span> （xxx为本次提交代码的备注）</code></pre>
<p>6）提交代码到指定分支</p>
<pre class=" language-java"><code class="language-java">    git push origin xxx （xxx为要提交代码的分支名称）</code></pre>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>html和css技能</title>
    <url>/s2/html/htmlCss%E6%8A%80%E8%83%BD%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<h3 id="1-设置边框带有立体感的沟槽"><a href="#1-设置边框带有立体感的沟槽" class="headerlink" title="1. 设置边框带有立体感的沟槽"></a>1. 设置边框带有立体感的沟槽</h3><a id="more"></a>
<ul>
<li>边框的宽度大小决定立体感的效果，值越大效果越明显<pre class=" language-css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">20</span>px groove red<span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="2-设置边框带有立体感的脊形"><a href="#2-设置边框带有立体感的脊形" class="headerlink" title="2. 设置边框带有立体感的脊形"></a>2. 设置边框带有立体感的脊形</h3><ul>
<li>边框的宽度大小决定立体感的效果，值越大效果越明显<pre class=" language-css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">20</span>px ridge red<span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="3-实现文字滚动特效"><a href="#3-实现文字滚动特效" class="headerlink" title="3. 实现文字滚动特效"></a>3. 实现文字滚动特效</h3><blockquote>
<ol>
<li>direction :滚动方向up、down、left、right</li>
<li>behavior: 设置滚动的方式：scroll（循环滚动）、slide（一次滚动）、altemate(交替滚动)</li>
<li>scrollAmount：滚动的速度，单位为像素，值越大滚动速度越大</li>
</ol>
</blockquote>
<ul>
<li>示例：<pre class=" language-css"><code class="language-css">&lt;marquee behavior=<span class="token string">"scroll"</span> direction=<span class="token string">"up"</span> onmouseover=<span class="token string">"this.scrollAmount='0'"</span> onmouseout=<span class="token string">"this.scrollAmount='2'"</span>
      onmousedown=<span class="token string">"this.scrollAmount='4'"</span> onmouseup=<span class="token string">"this.scrollAmount='1';this.direction='up'"</span> scrollamount=<span class="token string">"2"</span> height=<span class="token string">"200"</span>>
      &lt;table>
          &lt;tr>
              &lt;td style=<span class="token string">"height: 30;color: yellow;font-size: 10;font-weight: bold;"</span>>
                  &lt;a href=<span class="token string">"#"</span>>这个是个测试td<span class="token number">1</span>&lt;/a>
              &lt;/td>
              &lt;td>公布时间：<span class="token number">2020</span>-<span class="token number">11</span>-<span class="token number">19</span>&lt;/td>
          &lt;/tr>
          &lt;tr>
              &lt;td style=<span class="token string">"height: 30;color: yellow;font-size: 10;font-weight: bold;"</span>>
                  &lt;a href=<span class="token string">"#"</span>>这个是个测试td<span class="token number">2</span>&lt;/a>
              &lt;/td>
              &lt;td>公布时间：<span class="token number">2020</span>-<span class="token number">11</span>-<span class="token number">19</span>&lt;/td>
          &lt;/tr>
          &lt;tr>
              &lt;td style=<span class="token string">"height: 30;color: yellow;font-size: 10;font-weight: bold;"</span>>
                  &lt;a href=<span class="token string">"#"</span>>这个是个测试td<span class="token number">3</span>&lt;/a>
              &lt;/td>
              &lt;td>公布时间：<span class="token number">2020</span>-<span class="token number">11</span>-<span class="token number">19</span>&lt;/td>
          &lt;/tr>
          &lt;tr>
              &lt;td style=<span class="token string">"height: 30;color: yellow;font-size: 10;font-weight: bold;"</span>>
                  &lt;a href=<span class="token string">"#"</span>>这个是个测试td<span class="token number">4</span>&lt;/a>
              &lt;/td>
              &lt;td>公布时间：<span class="token number">2020</span>-<span class="token number">11</span>-<span class="token number">19</span>&lt;/td>
          &lt;/tr>
      &lt;/table>
  &lt;/marquee></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack4(一)</title>
    <url>/s2/uncategorized/webpack4(%E4%B8%80)/</url>
    <content><![CDATA[<p>热更新</p>
<p>默认情况下开启了服务器后，只要入口文件有更新那整个页面就会重新刷新。<br>如果页面里引入的模块非常多的情况下让整个页面刷新就会变得有些慢，这个问题可以交给热更新去解决。<br>热更新的意思就是只更新有改动的模块（像ajax一样局部刷新）<br>使用步骤</p>
<p>1、引入webpack模块</p>
<p>const webpack=require(‘webpack’);</p>
<p>2、写入插件</p>
<p>plugins:[<br>    new HtmlWebpackPlugin({<br>        title:’webpack4’,<br>        template:’./src/template.html’,<br>        filename:’index.html’,<br>    }),<br>    new webpack.HotModuleReplacementPlugin()    //引入热更新插件<br>]</p>
<p>3、devServer里增加hot参数</p>
<p>devServer:{<br>    host:’localhost’,   //服务器的ip地址<br>    port:1573,  //端口<br>    open:true,  //自动打开页面，<br>    hot:true,   //开启热更新<br>}</p>
<p>mode</p>
<p>mode是webpack4新增的一条属性，它的意思为当前开发的环境。<br>mode的到来减少了很多的配置，它内置了很多的功能。相较以前的版本提升了很多，减少了很多专门的配置</p>
<pre><code>    提升了构建速度
    默认为开发环境，不需要专门配置
    提供压缩功能，不需要借助插件
    提供SouceMap，不需要专门配置</code></pre><p>mode分为两种环境，一种是开发环境（development）,一种是生产环境（production）。<br>开发环境就是我们写代码的环境，生产环境就是代码放到线上的环境。<br>这两种环境的最直观区别就是，开发环境的代码不提供压缩，生产环境的代码提供压缩。<br>使用方式1：在命令后面添加</p>
<pre><code>webpack --mode development
webpack --mode production</code></pre><p>使用方式2：在package.json里添加</p>
<p>“scripts”: {<br>    “build”: “webpack –mode production”,<br>    “dev”: “webpack-dev-server –mode development”<br>  },</p>
<p>此时后成dist目录用的是生产环境，打开服务器用的是开发环境，然后通过命令执行npm run build或者npm run dev，</p>
]]></content>
  </entry>
  <entry>
    <title>webpack4(三)</title>
    <url>/s2/uncategorized/webpack4(%E4%B8%89)/</url>
    <content><![CDATA[<p>处理less</p>
<p>less的语法对于浏览器那是必需不认识的，<br>要处理成浏览器认识的需要借助两个模块，一个less和一个less-loader<br>安装<br>    npm i less less-loader -D</p>
<p>less.less内容如下<br>@w:200px;<br>@border:1px solid #f00;</p>
<p>#box{<br>    width: @w;<br>    border: @border;<br>    ul{<br>        margin: 0;<br>        padding: 0;<br>        list-style: none;</p>
<pre><code>    li{
        height: 30px;
        background: #ccc;

        a{
          color: #f00;
          &amp;:hover{  //&amp;为上一层选择器
              color: blue;
          }
        }
    }
} </code></pre><p>}</p>
<p>使用第三方库<br>1、在入口文件当中直接导入</p>
<p>安装jQuery<br>    npm i jquery -S</p>
<p> index.js内容如下：<br>import ‘../css/index.css’;<br>import $ from ‘jquery’; //引入jquery</p>
<p>$(‘ul li:last-child’).css(‘background’,’green’);<br>运行后<br>打开index.js文件后会发现jquery的代码也被压缩了进来。<br>这是引入第三方库的一种方式，但这种方式会有一个问题，如果我仅仅只是引入而并没有使用，<br>在打包的时候依然会把第三方库打包进来。如果你的代码由第二位同学接手，他为了避免出错并不会直接把import删掉，<br>而会把使用这个库的代码删掉，假如这个库的代码只剩下了import，那打包后的文件体积依然很大，便是一种浪费。<br>修改index.js如下：</p>
<p>import ‘../css/index.css’;<br>import $ from ‘jquery’; //引入jquery</p>
<p>//$(‘ul li:last-child’).css(‘background’,’green’);</p>
<p>npm run build后打开index.js，你会发现jquery的代码依然被打包了。</p>
<p>2、webpack.ProvidePlugin</p>
<pre><code>    自动加载模块，而不必用import或require
    如果加载的模块没有使用，则不会被打包
    加载的模块为全局模块，在全局都可以使用

    new webpack.ProvidePlugin({ //它是一个插件，所以需要按插件的用法new一个
        $:&#39;jquery&#39;, //接收名字:模块名
    }),</code></pre><p>修改index.js内容如下：</p>
<p>import ‘../css/index.css’;<br>$(‘ul li:last-child’).css(‘background’,’green’);</p>
<p>npm run build后打开index.js可以看到jquery的内容并没有被打包进来。<br>这种方式比上一种方式就智能的很，会根据你是否使用库而决定是否打包。</p>
<p>提取第三方库</p>
<p>对于提取第三方库有两种形式，第一种是在一个页面里引入了多个库，最终所有的代码都会打包到一个文件里，<br>如果引入的库非常之多，那文件会非常大，不利于加载。第二种就是在多个页面里都引入了同一个库，<br>那会把这个库打包多次，造成资源浪费。所以就需要把第三方库单独提取出来，优化资源。<br>1、一个页面引入多个库</p>
<p>接着上面的代码，再添加一个库，这个库的名字叫underscore，它里面封装了很多关于数组与对象的方法，<br>演示<br>    npm i underscore -S<br>修改webpack.config.js里的插件：</p>
<p>new webpack.ProvidePlugin({ //它是一个插件，所以需要按插件的用法new一个<br>    $:’jquery’, //接收名字:模块名<br>    _:’underscore’  //引入underscore库<br>}),</p>
<p>修改index.js如下</p>
<p>import ‘../css/index.css’;</p>
<p>$(‘ul li:last-child’).css(‘background’,’green’);<br>console.log(_([1,2,3]).map(v=&gt;v*3));    //使用underscore库里的map方法，此方法为循环数组里每一位数据，<br>并把每位数据都乘以3，返回新数组</p>
<p>npm run build后打开index.html能看到控制台有输出了[3, 6, 9]，说明underscore库已经被打包到index.js里。<br>可以分别注释jquery与underscore的使用代码，npm run build后对比index.js的大小就能看出区别</p>
<p>提取第三方库</p>
<p>optimization 优化</p>
<pre><code>    splitChunks 缓存组
    能被提取的条件
    1、模块被重复引用或者来自node_modules中的模块
    2、模块压缩前至少有30kb
    3、按需（异步）请求的数量小于5个
    4、初始化加载时，并行请求数量小于等于3</code></pre><p>修改webpack.config.js里的moudle.exports</p>
<p>optimization:{  //优化<br>        splitChunks:{<br>            cacheGroups:{//缓存组，一个对象。它的作用在于，可以对不同的文件做不同的处理<br>                commonjs:{<br>                    name:’vender’,      //输出的名字（提出来的第三方库）<br>                    test: /.js/,       //通过条件找到要提取的文件<br>                    chunks:’initial’    //只对入口文件进行处理<br>                }<br>            }<br>        }<br>    }</p>
<p>2、多个页面同时引入一个库</p>
<p>还有另一种形式，像jquery，它在多个页面里都被引入了，因为打包只能针对单页面进行打包，<br>那就会在每个页面里都打包一次jquery，造成资源浪费</p>
<p>新建a.js与b.js，内容如下：<br>a.js</p>
<p>import $ from ‘jquery’;</p>
<p>console.log(‘这是a.js’);<br>console.log($(‘ul’));</p>
<p>b.js</p>
<p>import $ from ‘jquery’;</p>
<p>console.log(‘这是b.js’);<br>console.log($(‘ul li’));</p>
<p>可以看到两个js文件都引入了jquery文件</p>
<p>修改webpack.config.js文件的module.exports</p>
<pre><code>    new HtmlWebpackPlugin({
        title:&#39;a页面&#39;,
        template:&#39;./src/template.html&#39;,
        filename:&#39;a.html&#39;,
        chunks:[&#39;a&#39;],   //引入对应的js，需要用到chunks
    }),
    new HtmlWebpackPlugin({
        title:&#39;b页面&#39;,
        template:&#39;./src/template.html&#39;,
        filename:&#39;b.html&#39;,
        chunks:[&#39;b&#39;],
    }),</code></pre><p>npm run build后结构如下图，在dist下的js目录里分别看一下a.js与b.js的大小，这两个文件里都包含了jquery。<br>再分别打开a.html与b.html页面正常运行，控制台里打印出了想要的内容。</p>
<p>这样就是一种浪费了，我们完全可以把jquery单独提取出来，在两个页面里分别引入。<br>如果是多个页面都引入同一个库，那提取公共库就会是刚需。</p>
<p>修改webpack.config.js的module.exports</p>
<pre><code>    new HtmlWebpackPlugin({
        title:&#39;a页面&#39;,
        template:&#39;./src/template.html&#39;,
        filename:&#39;a.html&#39;,
        chunks:[&#39;a&#39;,&#39;vender&#39;],  //vender为提取出的公共部分，需要在页面里引入
    }),
    new HtmlWebpackPlugin({
        title:&#39;b页面&#39;,
        template:&#39;./src/template.html&#39;,
        filename:&#39;b.html&#39;,
        chunks:[&#39;b&#39;,&#39;vender&#39;],
    }),


    ....
    optimization:{
        splitChunks:{
            cacheGroups:{
                common:{
                    name:&#39;vender&#39;,
                    test: /\.js/,
                    chunks:&#39;initial&#39;
                }
            }
        }
   }</code></pre><p> npm run build后结构目录如下图，再次看一下a.js与b.js的大小，相比前面是否小了很多？<br> 公共的jquery已经被提取出来了并放到了vender.js中。<br> 查看a.html与b.html页面源码发现vender.js已经被引入了。</p>
]]></content>
  </entry>
  <entry>
    <title>webpack4(二)</title>
    <url>/s2/uncategorized/webpack4(%E4%BA%8C)/</url>
    <content><![CDATA[<p>在webpack中任何一个东西都称为模块，js就不用说了。一个css文件，一张图片、一个less文件都是一个模块，<br>都能用导入模块的语法（commonjs的require，ES6的import）导入进来。webpack自身只能读懂js类型的文件，<br>其它的都不认识。但是webpack却能编译打包其它类型的文件，<br>像ES6、JSX、less、typeScript等，甚至css、images也是Ok的，而想要编译打包这些文件就需要借助loader</p>
<p>loader就像是一个翻译员，浏览器不是不认识这些东西么?那好交给loader来办，它能把这些东西都翻译成浏览器认识的语言。<br>loader描述了webpack如何处理非js模块，而这些模块想要打包loader必不可少，所以它在webpack里显得异常重要。<br>loader跟插件一样都是模块，想要用它需要先安装它，使用的时候把它放在module.rules参数里，rules翻译过来的意思就是规则，<br>所以也可以认为loader就是一个用来处理不同文件的规则.</p>
<p>处理CSS<br>所需loader</p>
<p>style-loader   //把处理完的css放到style标签里<br>css-loader     //处理css</p>
<p>安装</p>
<pre><code>npm i style-loader css-loader -D</code></pre><p>import ‘../css/index.css’;  //两个点是找上级目录</p>
<p>webpack的入口文件是index.js，如果要处理其它类型的文件，就需要在入口文件里把其它类型的文件导入进来，<br>而在webpack中所有文件都是模块，所以可以使用require或者import导入其它文件.<br>…..<br>module:{<br>        rules:[<br>            {<br>                test:/.css$/,  //以点开始css结尾的文件<br>                use:[‘style-loader’,’css-loader’]   //顺序不能搞错<br>            }<br>        ]<br>    },<br>…..</p>
<pre><code>说明

    rules里的数据类型为对象，每一个loader都是一个对象
    test表示loader要处理什么类型的文件，这里用了一个正则去匹配文件类型
    use表示要使用哪个loader，它的值是个数组，loader的使用顺序是从后往前
    这个loader的意思为，在入口文件里找到.css类型的文件，先拿css-loader去处理成浏览器认识的css，
    再拿style-loader把处理后的css放在页面的style标签里.</code></pre><p>单独提取CSS</p>
<p>执行命令npm run build后，在dist目录里只有两个文件，一个index.bundle.js一个index.html文件，并没有css文件，<br>同时打开index.html源码后也没有发现有css的内容。这是因为style-loader的作用，它把css一同打包到了js文件里，<br>js文件在能过DOM动态创建style标签并添加到页面里。所以css的内容已经放到了index.bundle.js里。</p>
<p>这种形式只有当文件内容不多的时候可以使用，如果CSS的内容以及JS的内容非常的多，把两块都打包到一个文件里就会增加<br>文件的体积，用户打开页面的时候下载速度会受影响，同减肥影响用户体验。<br>这就需要把CSS文件单独拎出来，那需要一个插件来配合loader才能完成.</p>
<p>mini-css-extract-plugin</p>
<p>webpack版本需要4.3以上，低版本请使用extract-text-webpack-plugin<br>使用步骤：<br>1、安装</p>
<pre><code>npm i mini-css-extract-plugin -D</code></pre><p>2、在webpack.config.js里引入模块</p>
<p>const MiniCssExtractPlugin=require(“mini-css-extract-plugin”);</p>
<p>3、写入plugins</p>
<p>plugins:[<br>    new HtmlWebpackPlugin({<br>        title:’陈学辉’,<br>        template:’./src/template.html’,<br>        filename:’index.html’,<br>    }),<br>    new MiniCssExtractPlugin({<br>        filename:’css/index.css’    //文件目录会放入output.path里<br>    }),<br>]</p>
<p>4、写入loader</p>
<p>module:{<br>    rules:[<br>        {<br>            test:/.css$/,<br>            use:[MiniCssExtractPlugin.loader,”css-loader”]  //代替style-loader<br>        }<br>    ]<br>}</p>
<p>执行命令npm run build后可以看到dist目录里已经多了一个css文件夹，这个文件夹里放了一个index.css文件。<br>打开index.html源码看到css文件已经通过link标签引入，这些功能都是mini-css-extract-plugin所做的。</p>
<p>处理图片<br>所需loader</p>
<p>file-loader   //解析地址<br>url-loader    //把图片地址解析成base64</p>
<p>安装<br>    npm i file-loader url-loader -D<br>    ……<br>             module:{<br>        rules:[<br>            {<br>                test:/.css$/,  //以点开始css结尾的文件<br>                use:[<br>                    //这是一个loader，如果loader需要给参数，就写成对象的形式<br>                    {<br>                        loader:MiniCssExtractPlugin.loader, //loader是哪个<br>                        options:{   //所有的配置参数都要放在这个对象里面<br>                            publicPath:’../‘    //这个表示在css文件里但凡用到地址的地方在其前面加个目录’../‘，这个是为了能找到图片<br>                        }<br>                    },<br>                    ‘css-loader’    //这个loader没有其它选项就直接写<br>                ]<br>            },<br>            {<br>                test:/.(jpg|png|gif)$/,    //找到三种格式中的任意一种<br>                use:[‘file-loader’]<br>            }<br>        ]<br>    },<br>    ……</p>
<p>index.js文件内容如下：</p>
<p>import ‘../css/index.css’;  //两个点是找上级目录</p>
<p>index.css文件内容如下：</p>
<p>#box{<br>    width: 800px;<br>    height: 500px;<br>    border: 5px solid #999;<br>    color: #00f;<br>    /<em>background: green;</em>/</p>
<pre><code>background: url(../images/img_01.jpg);  //背景改成了图片</code></pre><p>}</p>
<pre><code>说明

    loader既可以写成字符串的形式，也可以写成对象的形式。如果这个loader需要给一些配置，那就需要写成对象的形式，
    所有的配置放到options里
    这里一定要注意第一个loader的use属性，它里面放的是一个个loader，每个loader的值既可以是对象形式，
    又可以是字符串形式。</code></pre><p>在HTML文件中使用图片</p>
<p>index.js文件内容如下：</p>
<p>import ‘../css/index.css’;</p>
<p>import img1 from ‘../images/img_01.jpg’;<br>import img2 from ‘../images/img_02.jpg’;</p>
<p>const loadImg=img=&gt;{<br>    const newImg=new Image();<br>    newImg.onload=()=&gt;document.body.appendChild(newImg);<br>    newImg.src=img;<br>};</p>
<p>loadImg(img1);<br>loadImg(img2);</p>
<p>module:{<br>        rules:[<br>            {<br>                test:/.css$/,<br>                use:[<br>                    {<br>                        loader:MiniCssExtractPlugin.loader,<br>                        options:{<br>                            publicPath:’../‘<br>                        }<br>                    },<br>                    “css-loader”<br>                ]<br>            },<br>            {<br>                test:/.(jpg|png|gif)$/,<br>                //use:[‘file-loader’]<br>                use:[<br>                    {<br>                        loader:’url-loader’,    //把图片转成base64<br>                        options:{<br>                            limit:50*1024,  //小于50k就会转成base64<br>                            outputPath: ‘images’<br>                        }<br>                    }<br>                ]</p>
<pre><code>            //use:&#39;url-loader?limit=50000&amp;outputPath=images&#39; //loader的另一种写法，与get请求方式相同
        }
    ]
},




说明

    url-loader的作用是把图片转成base64，它同样可以给配置参数
    limit的作用是小于这个值就会转base64
    只用了url-loader，并没有用file-loader，说明url-loader里已经包含了file-loader的功能
    loader还可以写成地址的形式，与get的请求方式相同</code></pre>]]></content>
  </entry>
  <entry>
    <title>网页头部lang属性值设置</title>
    <url>/s2/html/%E5%85%B3%E4%BA%8E%E7%BD%91%E9%A1%B5%E5%A4%B4%E9%83%A8lang%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>此篇仅做参考，不是权威</p>
</blockquote>
<h3 id="太长不看版："><a href="#太长不看版：" class="headerlink" title="太长不看版："></a>太长不看版：</h3><blockquote>
<p>描述“中文 (简体, 中国大陆)”用“zh-CN”准没错，万无一失。</p>
</blockquote>
<blockquote>
<p>规范是天，规范是地，必须用“cmn-Hans-CN”，简写成“cmn”。</p>
</blockquote>
<p>lang属性的取值应该遵循 BCP 47 - Tags for Identifying Languages。单一的 zh 和 zh-CN 均属于废弃用法。</p>
<p>问题主要在于，zh 现在不是语言code了，而是macrolang，能作为语言code的是cmn（国语）、yue（粤语）、wuu（吴语）等。</p>
<p>通常建议写成 zh-cmn 而不是光写 cmn，主要是考虑兼容性（至少可匹配 zh），有不少软件和框架还没有据此更新。</p>
<p>zh-CN 的问题还在于，其实多数情况下标记的是简体中文，但是不恰当的使用了地区，这导致同样用简体中文的 zh-SG（新加坡）等无法匹配。</p>
<p>更典型的是 zh-TW 和 zh-HK。所以其实应该使用 zh-Hans / zh-Hant 来表示简体和繁体。那么完整的写法就是 zh-cmn-Hans，表示简体中文书写的普通话/国语。</p>
<p>一般而言没有必要加地区代码，除非要表示地区特异性，一般是词汇不一样（比如维基百科的大陆简体和新马简体）。</p>
<p>如何标记的例子：</p>
<ol>
<li>简体中文页面：html lang=zh-cmn-Hans</li>
<li>繁体中文页面：html lang=zh-cmn-Hant</li>
<li>英语页面：html lang=en4. </li>
<li>《回来》的音频，以国语演唱：audio lang=zh-cmn</li>
<li>《海阔天空》的音频，以粤语演唱：audio lang=yue</li>
<li>《进来白相相》的音频，以沪语演唱：audio lang=wuu</li>
</ol>
<blockquote>
<p>注意上述因为都是音频，所以不应加上 Hans/Hant 标记。</p>
</blockquote>
<ol start="7">
<li>最终信仰》的音频，双语演唱，因此audio不需要标记lang（如果一定需要标记可以用 lang=mul），但是每个段落的歌词可以分别用 p lang=en 和 p lang=zh-cmn 标记（根据简体或是繁体可用 zh-cmn-Hans 或 zh-cmn-Hant）。</li>
<li>《忐忑》的音频，没有歌词，因此不需要标记lang（如果一定需要标记可用 audio lang=zxx）。</li>
</ol>
<p>需要加地区代码的情况一般比较少，除非为了强调不同地区汉语使用差异。比如：</p>
<p lang="zh-cmn-Hans"><b lang="zh-cmn-Hans-CN">菠萝</b>和<b lang="zh-cmn-Hant-TW">鳳梨</b>其实是同一种水果。只是大陆和台湾称谓不同，且新马一带的称谓也是不同的，称之为<b lang="zh-cmn-Hans-SG">黄梨</b>。

</p>【参考菠萝和凤梨有区别吗？】

<p>当然，由于历史原因，有时候不得不继续使用zh-CN。</p>
<p>比如中文维基百科，沿用了传统的zh-CN/zh-HK/zh-SG/zh-TW（按照标准应该使用 zh-cmn-Hans-CN、zh-cmn-Hant-HK、zh-cmn-Hans-SG、zh-cmn-Hant-TW）。这时候，合理的软件行为，是将 zh-CN 等转化为 zh-cmn-Hans（即转化为最常见的误用所对应的实际标准写法）。实际上，各相关标准，也存在一定的滞后。例如CSS的:lang选择器，不支持选择仅仅简体/繁体中文（而不管是cmn或是yue或是min等汉语方言）。理想情况是CSS3对:lang选择器的语法进行升级，即BCP 47中的高级匹配算法，支持 :lang(*-Hans)这样的写法。</p>
<h3 id="太长慢慢看版："><a href="#太长慢慢看版：" class="headerlink" title="太长慢慢看版："></a>太长慢慢看版：</h3><p>“zh”是中文，代表的是宏语言（Macrolanguage），单独使用表示“中文”整体，可以是方言、文言文、简体、繁体等单独一种，也可以是任意组合的混合内容。</p>
<p>“zh-CN”理论上表示的是“中文 (中国大陆)”，因为中国大陆的官方语言是“普通话 (简体)”，所以这个“zh”的局限性就体现出来了：比如“尋尋覓覓，冷冷清清，悽悽慘慘戚戚”，用“zh-CN”描述没法表达出“繁體”和“文言文”，但描述成“zh-TW”则成了“中文 (繁體, 台灣)”，虽然指明了“繁体”，但还是没能体现出“文言文”，同时还丢失了“中国大陆”。</p>
<p>针对这种情况，按照 BCP 47 规范 (详见参考链接 2)，应该使用独立语种更精确地描述：<br>缩写    | 标识<br>—|——–<br>cmn |普通话（官话、国语）<br>wuu |吴语（江浙话、上海话）<br>czh |徽语（徽州话、严州话、吴语-徽严片）<br>hak |客家语<br>yue |粤语（广东话）<br>nan |闽南语（福建话、台语）<br>cpx |莆仙话（莆田话、兴化语）<br>cdo |闽东语<br>mnp| 闽北语<br>zco |闽中语<br>gan |赣语（江西话）<br>hsn |湘语（湖南话）<br>cjy |晋语（山西话、陕北话）</p>
<p>语言文字标签书写顺序：</p>
<pre class=" language-bash"><code class="language-bash">language-extlang-script-region-variant-extension-privateuse</code></pre>
<p>语言文字种类-扩展语言文字种类-书写格式-国家和地区-变体-扩展-私有语言文字标签示例：</p>
<pre class=" language-bash"><code class="language-bash">language:
fr 法语
es 西班牙语</code></pre>
<pre class=" language-bash"><code class="language-bash">language-extlang:
zh-lzh 中文 <span class="token punctuation">(</span>文言文<span class="token punctuation">)</span>
sgn-csl 手语 <span class="token punctuation">(</span>中国大陆<span class="token punctuation">)</span>

language-script:
cmn-Hans 普通话 <span class="token punctuation">(</span>简体<span class="token punctuation">)</span>
yue-Hant 粤语 <span class="token punctuation">(</span>繁体<span class="token punctuation">)</span>

language-region:
zh-CN 中文 <span class="token punctuation">(</span>简体, 中国大陆<span class="token punctuation">)</span>
en-US 英语 <span class="token punctuation">(</span>美国<span class="token punctuation">)</span>

language-script-region：
cmn-Hans-CN 普通话 <span class="token punctuation">(</span>简体, 中国大陆<span class="token punctuation">)</span>
cmn-Hant-TW 普通话 <span class="token punctuation">(</span>繁体, 台湾<span class="token punctuation">)</span>

language-script-variant:
zh-Latn-pinyin 汉语拼音（例：nǐ，拉丁字母形式）
zh-Bopo-pinyin 注音拼音（例：ㄋ丨ˇ，罗马字形式，中国大陆 1958 年以前使用，台湾目前使用）


常见的一般有 language、language-script 和 language-region 三种。</code></pre>
<p><strong>附注 1：</strong></p>
<p>“cmn”“wuu”“yue”等 2005 年确定的 extlang 标记已于 2009 年提升为 language 标记，维基百科中“吴语”“粤语”等页面均已使用最新的标准写法;</p>
<p>以下以“zh”开头的写法已被废弃并不再推荐使用 (详见参考链接 3)，请直接去掉“zh-”前缀并使用“cmn”“wuu”“yue”等代替即可：zh-Hans, zh-Hans-CN, zh-cmn, zh-cmn-Hans, zh-wuu, zh-yue, zh-gan….</p>
<p>类似还有 zh-Hans-HK、zh-Hans-MO、zh-Hans-TW、zh-Hant;</p>
<p>废弃可能原因：在语言学的分类上，中国语言学者多认为“吴语”“粤语”“闽语”等是“汉语”的方言，而西方学者多认为这些语言是一门和“普通话”同级关系的单独语种。</p>
<p>中国大陆常见划分：</p>
<pre class=" language-bash"><code class="language-bash">1. 汉藏语系
   1.1. 汉语族
        1.1.1. 汉语
   1.2. 藏缅语族
   1.3. 苗瑶语族
   1.4. 壮侗语族

“汉语族”仅包含“汉语”一门语言，“吴语”“客家语”“粤语”“闽语”等均归属于“汉语”的不同方言。</code></pre>
<p>西方常见划分：</p>
<pre class=" language-bash"><code class="language-bash">1. 汉藏语系
   1.1. 汉语族
        1.1.1. 普通话（官话、国语）
        1.1.2. 吴语（江浙话、上海话）
        1.1.3. 徽语（徽州话、严州话、吴语-徽严片）
        1.1.4. 客家语
        1.1.5. 粤语（广东话）
        1.1.6. 闽南语（福建话、台语）
        1.1.7. 莆仙话（莆田话、兴化语）
        1.1.8. 闽东语
        1.1.9. 闽北语
        1.1.10. 闽中语
        1.1.11. 赣语（江西话）
        1.1.12. 湘语（湖南话）
        1.1.13. 晋语（山西话、陕北话）
   1.2. 藏缅语族
   1.3. 苗瑶语族
   1.4. 壮侗语族</code></pre>
<p>“汉语族”包含“普通话”“吴语”“徽语”“客家话”“粤语”等多种语言。</p>
<p>重点来了！以下两种写法均正确，后者描述更精准，但大部分程序和操作系统都只能识别前者，使用新标准可能会造成无法匹配浏览器用户定义字体、网页翻译、程序语言自动切换等功能，为了兼容性的考量，推荐使用前者：</p>
<pre class=" language-bash"><code class="language-bash">zh-CN 中文 <span class="token punctuation">(</span>简体, 中国大陆<span class="token punctuation">)</span>  对应 cmn-Hans-CN 普通话 <span class="token punctuation">(</span>简体, 中国大陆<span class="token punctuation">)</span>
zh-SG 中文 <span class="token punctuation">(</span>简体, 新加坡<span class="token punctuation">)</span>   对应 cmn-Hans-SG 普通话 <span class="token punctuation">(</span>简体, 新加坡<span class="token punctuation">)</span>
zh-HK 中文 <span class="token punctuation">(</span>繁体, 香港<span class="token punctuation">)</span>     对应 yue-Hant-HK 粤语 <span class="token punctuation">(</span>繁体, 香港<span class="token punctuation">)</span>
zh-MO 中文 <span class="token punctuation">(</span>繁体, 澳门<span class="token punctuation">)</span>     对应 yue-Hant-MO 粤语 <span class="token punctuation">(</span>繁体, 澳门<span class="token punctuation">)</span>
zh-TW 中文 <span class="token punctuation">(</span>繁体, 台湾<span class="token punctuation">)</span>     对应 cmn-Hant-TW 普通话 <span class="token punctuation">(</span>繁体, 台湾<span class="token punctuation">)</span></code></pre>
<p><strong>附注 2：</strong></p>
<p>同是简体中文页面， 默认或书面语均标记为“cmn (普通话)”，全文使用地方方言表达时，使用相应语言文字标签标记，例：</p>
<pre class=" language-bash"><code class="language-bash">“你” “我们” 用 cmn-Hans 普通话 <span class="token punctuation">(</span>简体<span class="token punctuation">)</span>
“侬” “啊啦” 用 wuu-Hans 吴语 <span class="token punctuation">(</span>简体<span class="token punctuation">)</span>
“你” “我哋” 用 yue-Hans 粤语 <span class="token punctuation">(</span>简体<span class="token punctuation">)</span></code></pre>
<p>一般情况不用 region 选项，但如果要针对特定地区特定用语的友好性，则应设置区域，例 ：</p>
<pre class=" language-bash"><code class="language-bash">“消息” “黄梨” “自行车” 用 cmn-Hans-SG 普通话 <span class="token punctuation">(</span>简体, 新加坡<span class="token punctuation">)</span>
“消息” “菠萝” “自行车” 用 cmn-Hans-CN 普通话 <span class="token punctuation">(</span>简体, 中国大陆<span class="token punctuation">)</span>
“消息” “菠蘿” “自行車” 用 cmn-Hant-CN 普通话 <span class="token punctuation">(</span>繁体, 中国大陆<span class="token punctuation">)</span>
“訊息” “菠蘿” “单车”   用 cmn-Hant-HK 普通话 <span class="token punctuation">(</span>繁体, 香港<span class="token punctuation">)</span>
“訊息” “鳳梨” “腳踏車” 用 cmn-Hant-TW 普通话 <span class="token punctuation">(</span>繁体, 台湾<span class="token punctuation">)</span>

“analyse” “color” “elevator” 用 en-US 英语 <span class="token punctuation">(</span>美国<span class="token punctuation">)</span>
“analyze” “colour” “lift”    用 en-GB 英语 <span class="token punctuation">(</span>英国<span class="token punctuation">)</span></code></pre>
<p>参考链接：</p>
<ol>
<li>W3C Language tags in HTML and XML</li>
<li>IETF BCP 47 - Tags for Identifying Languages</li>
<li>IANA Language Subtag Registry</li>
</ol>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>lang属性</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常用工具链接</title>
    <url>/s2/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p><a href="http://htmlelement.info/" target="_blank" rel="noopener">HTMLelement.info</a></p>
<p><a href="https://caniuse.com/" target="_blank" rel="noopener">Can I use</a></p>
<p><a href="http://howtocenterincss.com/" target="_blank" rel="noopener">垂直居中</a></p>
<p>Mastering the :nth-child</p>
<p><a href="https://jex.im/regulex/#!flags=&re=%5E%28a%7Cb%29*?$" target="_blank" rel="noopener">Regulex</a></p>
<p><a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">YOU MIGHT NOT NEED JQUERY</a></p>
<p><a href="http://ww7.flexboxin5.com/" target="_blank" rel="noopener">Flexbox in 5 minutes</a></p>
<p><a href="http://undraw.co/illustrations" target="_blank" rel="noopener">插画库</a></p>
<p><a href="https://www.videvo.net" target="_blank" rel="noopener">视频库</a></p>
<p><a href="https://zh.pixfix.com" target="_blank" rel="noopener">图片修复</a></p>
<p><a href="https://zhitu.isux.us" target="_blank" rel="noopener">智图、图片压缩</a></p>
<p><a href="https://bigjpg.com" target="_blank" rel="noopener">图片放大</a></p>
<p><a href="https://tiomg.org" target="_blank" rel="noopener">图片在线处理</a></p>
<p><a href="https://www.canva.cn" target="_blank" rel="noopener">在线平面设计</a></p>
<p>待续…</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范(九)JavaScript行为之通用约定</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------JavaScript%E8%A1%8C%E4%B8%BA%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="一、避免不必要的-DOM-操作"><a href="#一、避免不必要的-DOM-操作" class="headerlink" title="一、避免不必要的 DOM 操作"></a>一、避免不必要的 DOM 操作</h3><p>浏览器遍历 DOM 元素的代价是昂贵的。最简单优化 DOM 树查询的方案是，当一个元素出现多次时，将它保存在一个变量中，就避免多次查询 DOM 树了。</p>
<pre class=" language-javascript"><code class="language-javascript">   <span class="token comment" spellcheck="true">// Recommended</span>
    <span class="token keyword">var</span> myList <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> myListHTML <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      myList <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;span>"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"&lt;/span>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    myListHTML <span class="token operator">=</span> myList<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Not recommended</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;span>"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"&lt;/span>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="二、缓存数组长度"><a href="#二、缓存数组长度" class="headerlink" title="二、缓存数组长度"></a>二、缓存数组长度</h3><p>循环无疑是和 JavaScript 性能非常相关的一部分。通过存储数组的长度，可以有效避免每次循环重新计算。</p>
<p>注: 虽然现代浏览器引擎会自动优化这个过程，但是不要忘记还有旧的浏览器。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    len<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Recommended - size is calculated only 1 time and then stored</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Not recommended - size needs to be recalculated 1000 times</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="三、异步加载第三方内容"><a href="#三、异步加载第三方内容" class="headerlink" title="三、异步加载第三方内容"></a>三、异步加载第三方内容</h3><p>当你无法保证嵌入第三方内容比如 Youtube 视频或者一个 like/tweet 按钮可以正常工作的时候，你需要考虑用异步加载这些代码，避免阻塞整个页面加载。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> script<span class="token punctuation">,</span>
        scripts <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      script<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
      scripts<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> scripts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'//apis.google.com/js/plusone.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'//platform.twitter.com/widgets.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'//s.widgetsite.com/widget.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="四、如非必要，则避免使用-jQuery-实现动画"><a href="#四、如非必要，则避免使用-jQuery-实现动画" class="headerlink" title="四、如非必要，则避免使用 jQuery 实现动画"></a>四、如非必要，则避免使用 jQuery 实现动画</h3><ol>
<li>能使用css实现的尽量使用css，否则再考虑js</li>
<li>如非必要，禁止使用 slideUp/Down() fadeIn/fadeOut() 等方法；</li>
<li>如非必要尽量不使用 animate() 方法；</li>
</ol>
<h3 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h3>]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范(九)JavaScript行为之通用约定</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------JavaScript%E8%A1%8C%E4%B8%BA%E4%B9%8B%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>此处仅介绍jQuery规范，其它框架规范，待后续补全</p>
</blockquote>
<h2 id="一、jQuery-规范"><a href="#一、jQuery-规范" class="headerlink" title="一、jQuery 规范"></a>一、jQuery 规范</h2><h4 id="使用最新版本的-jQuery"><a href="#使用最新版本的-jQuery" class="headerlink" title="使用最新版本的 jQuery"></a>使用最新版本的 jQuery</h4><p>最新版本的 jQuery 会改进性能和增加新功能，若不是为了兼容旧浏览器，建议使用最新版本的 jQuery。以下是三条常见的 jQuery 语句，版本越新，性能越好：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.elem'</span><span class="token punctuation">)</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.elem'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
context<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.elem'</span><span class="token punctuation">)</span></code></pre>
<p>jQuery 规范 - 图1分别使用 1.4.2、1.4.4、1.6.2 三个版本测试浏览器在一秒内能够执行多少次，结果 1.6.2 版执行次数远超两个老版本。</p>
<h4 id="jQuery-变量"><a href="#jQuery-变量" class="headerlink" title="jQuery 变量"></a>jQuery 变量</h4><ol>
<li>存放 jQuery 对象的变量以 $ 开头；</li>
<li>将 jQuery 选择器返回的对象缓存到本地变量中复用；</li>
<li>使用驼峰命名变量；</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $myDiv <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$myDiv<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><ol>
<li>尽可能的使用 ID 选择器，因为它会调用浏览器原生方法 document.getElementById 查找元素。当然直接使用原生 document.getElementById 方法性能会更好；</li>
<li>在父元素中选择子元素使用 .find() 方法性能会更好, 因为 ID 选择器没有使用到 Sizzle 选择器引擎来查找元素；</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Not recommended</span>
<span class="token keyword">var</span> $productIds <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#products .class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Recommended</span>
<span class="token keyword">var</span> $productIds <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#products"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h4><ol>
<li>当要操作 DOM 元素的时候，尽量将其分离节点，操作结束后，再插入节点；</li>
<li>使用字符串连接或 array.join 要比 .append()性能更好；</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $myList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list-container > ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//...a lot of complicated things on $myList</span>
$myList<span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"#list-container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Not recommended</span>
<span class="token keyword">var</span> $myList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    $myList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;li>"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Recommended</span>
<span class="token keyword">var</span> $myList <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    list <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;li>"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"&lt;/li>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$myList<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Much to recommended</span>
<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"&lt;li>"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"&lt;/li>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$myList<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ol>
<li>建议对事件使用自定义的 namespace，这样容易解绑特定的事件，而不会影响到此 DOM 元素的其他事件监听；</li>
<li>对 Ajax 加载的 DOM 元素绑定事件时尽量使用事件委托。事件委托允许在父元素绑定事件，子代元素可以响应事件，也包括 Ajax 加载后添加的子代元素；</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myLink"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click.mySpecialClick"</span><span class="token punctuation">,</span> myEventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myLink"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"click.mySpecialClick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Not recommended</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> myClickHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Recommended</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> myClickHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="链式写法"><a href="#链式写法" class="headerlink" title="链式写法"></a>链式写法</h4><ol>
<li>尽量使用链式写法而不是用变量缓存或者多次调用选择器方法；</li>
<li>当链式写法超过三次或者因为事件绑定变得复杂后，使用换行和缩进保持代码可读性；</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myLink"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"bold"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> myClickHandler<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> myMouseOverHandler<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol>
<li>多个参数使用对象字面量存储；</li>
<li>不要将 CSS 写在 jQuery 里面；</li>
<li>正则表达式仅准用 .test() 和 .exec() 。不准用 “string”.match() ；</li>
</ol>
<h4 id="jQuery-插件模板"><a href="#jQuery-插件模板" class="headerlink" title="jQuery 插件模板"></a>jQuery 插件模板</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// jQuery Plugin Boilerplate</span>
<span class="token comment" spellcheck="true">// A boilerplate for jumpstarting jQuery plugins development</span>
<span class="token comment" spellcheck="true">// version 1.1, May 14th, 2011</span>
<span class="token comment" spellcheck="true">// by Stefan Gabos</span>
<span class="token comment" spellcheck="true">// remember to change every instance of "pluginName" to the name of your plugin!</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// here we go!</span>
    $<span class="token punctuation">.</span>pluginName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// plugin's default options</span>
        <span class="token comment" spellcheck="true">// this is private property and is  accessible only from inside the plugin</span>
        <span class="token keyword">var</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>
            foo<span class="token punctuation">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// if your plugin is event-driven, you may provide callback capabilities</span>
            <span class="token comment" spellcheck="true">// for its events. execute these functions before or after events of your</span>
            <span class="token comment" spellcheck="true">// plugin, so that users may customize those particular events without</span>
            <span class="token comment" spellcheck="true">// changing the plugin's code</span>
            onFoo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// to avoid confusions, use "plugin" to reference the</span>
        <span class="token comment" spellcheck="true">// current instance of the object</span>
        <span class="token keyword">var</span> plugin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// this will hold the merged default, and user-provided options</span>
        <span class="token comment" spellcheck="true">// plugin's properties will be available through this object like:</span>
        <span class="token comment" spellcheck="true">// plugin.settings.propertyName from inside the plugin or</span>
        <span class="token comment" spellcheck="true">// element.data('pluginName').settings.propertyName from outside the plugin,</span>
        <span class="token comment" spellcheck="true">// where "element" is the element the plugin is attached to;</span>
        plugin<span class="token punctuation">.</span>settings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">var</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// reference to the jQuery version of DOM element</span>
             element <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// reference to the actual DOM element</span>
        <span class="token comment" spellcheck="true">// the "constructor" method that gets called when the object is created</span>
        plugin<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// the plugin's final properties are the merged default and</span>
            <span class="token comment" spellcheck="true">// user-provided options (if any)</span>
            plugin<span class="token punctuation">.</span>settings <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// code goes here</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// public methods</span>
        <span class="token comment" spellcheck="true">// these methods can be called like:</span>
        <span class="token comment" spellcheck="true">// plugin.methodName(arg1, arg2, ... argn) from inside the plugin or</span>
        <span class="token comment" spellcheck="true">// element.data('pluginName').publicMethod(arg1, arg2, ... argn) from outside</span>
        <span class="token comment" spellcheck="true">// the plugin, where "element" is the element the plugin is attached to;</span>
        <span class="token comment" spellcheck="true">// a public method. for demonstration purposes only - remove it!</span>
        plugin<span class="token punctuation">.</span>foo_public_method <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// code goes here</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// private methods</span>
        <span class="token comment" spellcheck="true">// these methods can be called only from inside the plugin like:</span>
        <span class="token comment" spellcheck="true">// methodName(arg1, arg2, ... argn)</span>
        <span class="token comment" spellcheck="true">// a private method. for demonstration purposes only - remove it!</span>
        <span class="token keyword">var</span> foo_private_method <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// code goes here</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// fire up the plugin!</span>
        <span class="token comment" spellcheck="true">// call the "constructor" method</span>
        plugin<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// add the plugin to the jQuery.fn object</span>
    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>pluginName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// iterate through the DOM elements we are attaching the plugin to</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// if plugin has not already been attached to the element</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>undefined <span class="token operator">==</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'pluginName'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// create a new instance of the plugin</span>
                <span class="token comment" spellcheck="true">// pass the DOM element and the user-provided options as arguments</span>
                <span class="token keyword">var</span> plugin <span class="token operator">=</span> <span class="token keyword">new</span> $<span class="token punctuation">.</span><span class="token function">pluginName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// in the jQuery version of the element</span>
                <span class="token comment" spellcheck="true">// store a reference to the plugin object</span>
                <span class="token comment" spellcheck="true">// you can later access the plugin and its methods and properties like</span>
                <span class="token comment" spellcheck="true">// element.data('pluginName').publicMethod(arg1, arg2, ... argn) or</span>
                <span class="token comment" spellcheck="true">// element.data('pluginName').settings.propertyName</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'pluginName'</span><span class="token punctuation">,</span> plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>此 jQuery 插件模板出自：<a href="http://stefangabos.ro/jquery/jquery-plugin-boilerplate-revisited/" target="_blank" rel="noopener">jQuery Plugin Boilerplate, revisited</a></p>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范(八)JavaScript行为之通用约定</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------JavaScript%E8%A1%8C%E4%B8%BA%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="一、注释"><a href="#一、注释" class="headerlink" title="一、注释"></a>一、注释</h2><h3 id="1-1原则"><a href="#1-1原则" class="headerlink" title="1.1原则"></a>1.1原则</h3><p>As short as possible（如无必要，勿增注释）：尽量提高代码本身的清晰性、可读性。</p>
<p>As long as necessary（如有必要，尽量详尽）：合理的注释、空行排版等，可以让代码更易阅读、更具美感。</p>
<h3 id="1-2单行注释"><a href="#1-2单行注释" class="headerlink" title="1.2单行注释"></a>1.2单行注释</h3><p>必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。</p>
<h3 id="1-3多行注释"><a href="#1-3多行注释" class="headerlink" title="1.3多行注释"></a>1.3多行注释</h3><p>避免使用 /<em>…</em>/ 这样的多行注释。有多行注释内容时，使用多个单行注释。</p>
<h3 id="1-4函数-方法注释"><a href="#1-4函数-方法注释" class="headerlink" title="1.4函数/方法注释"></a>1.4函数/方法注释</h3><ul>
<li>函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识；</li>
<li>参数和返回值注释必须包含类型信息和说明；</li>
<li>当函数是内部函数，外部不可访问时，可以使用 @inner 标识；<pre class=" language-javaScript"><code class="language-javaScript">  /**
   * 函数描述
   *
   * @param {string} p1 参数1的说明
   * @param {string} p2 参数2的说明，比较长
   *     那就换行了.
   * @param {number=} p3 参数3的说明（可选）
   * @return {Object} 返回值描述
   */
  function foo(p1, p2, p3) {
      var p3 = p3 || 10;
      return {
          p1: p1,
          p2: p2,
          p3: p3
      };
  }</code></pre>
<h3 id="1-5文件注释"><a href="#1-5文件注释" class="headerlink" title="1.5文件注释"></a>1.5文件注释</h3></li>
</ul>
<p>文件注释用于告诉不熟悉这段代码的读者这个文件中包含哪些东西。 应该提供文件的大体内容, 它的作者, 依赖关系和兼容性信息。如下:</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">/**
     * @fileoverview Description of file, its uses and information
     * about its dependencies.
     * @author user@meizu.com (Firstname Lastname)
     * Copyright 2009 Meizu Inc. All Rights Reserved.
     */</span></code></pre>
<h2 id="二、命名"><a href="#二、命名" class="headerlink" title="二、命名"></a>二、命名</h2><p><strong>变量, 使用 Camel 命名法。</strong></p>
<pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">var</span> loadingModules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p><strong>私有属性、变量和方法以下划线 _ 开头。</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> _privateMethod <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p><strong>常量, 使用全部字母大写，单词间下划线分隔的命名方式。</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> HTML_ENTITY <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>函数, 使用 Camel 命名法。</li>
<li>函数的参数, 使用 Camel 命名法。</li>
</ul>
<p>function stringFormat(source) {}<br>function hear(theBells) {}</p>
<p><strong>类, 使用 Pascal 命名法</strong><br>    类的 方法 / 属性, 使用 Camel 命名法</p>
<p>function TextNode(value, engine) {<br>    this.value = value;<br>    this.engine = engine;<br>}<br>TextNode.prototype.clone = function () {<br>    return this;<br>};</p>
<p><strong>枚举变量 使用 Pascal 命名法。</strong><br>    枚举的属性， 使用全部字母大写，单词间下划线分隔的命名方式。</p>
<p>var TargetState = {<br>    READING: 1,<br>    READED: 2,<br>    APPLIED: 3,<br>    READY: 4<br>};</p>
<p><strong>由多个单词组成的 缩写词</strong>，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</p>
<p>function XMLParser() {}<br>function insertHTML(element, html) {}<br>var httpRequest = new HTTPRequest();</p>
<h2 id="三、命名语法"><a href="#三、命名语法" class="headerlink" title="三、命名语法"></a>三、命名语法</h2><h4 id="类名，使用名词。"><a href="#类名，使用名词。" class="headerlink" title="类名，使用名词。"></a>类名，使用名词。</h4><p>function Engine(options) {}</p>
<h4 id="函数名，使用动宾短语。"><a href="#函数名，使用动宾短语。" class="headerlink" title="函数名，使用动宾短语。"></a>函数名，使用动宾短语。</h4><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<h4 id="boolean-类型的变量使用-is-或-has-开头。"><a href="#boolean-类型的变量使用-is-或-has-开头。" class="headerlink" title="boolean 类型的变量使用 is 或 has 开头。"></a>boolean 类型的变量使用 is 或 has 开头。</h4><p>var isReady = false;<br>var hasMoreCommands = false;</p>
<h4 id="Promise-对象用动宾短语的进行时表达。"><a href="#Promise-对象用动宾短语的进行时表达。" class="headerlink" title="Promise 对象用动宾短语的进行时表达。"></a>Promise 对象用动宾短语的进行时表达。</h4><p>var loadingData = ajax.get(‘url’);<br>loadingData.then(callback);</p>
<h2 id="四、接口命名规范"><a href="#四、接口命名规范" class="headerlink" title="四、接口命名规范"></a>四、接口命名规范</h2><ol>
<li>可读性强，见名晓义；</li>
<li>尽量不与 jQuery 社区已有的习惯冲突；</li>
<li>尽量写全。不用缩写，除非是下面列表中约定的；（变量以表达清楚为目标，uglify 会完成压缩体积工作）</li>
</ol>
<table>
<thead>
<tr>
<th>常用词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>options</td>
<td>表示选项，与 jQuery 社区保持一致，不要用 config, opts 等</td>
</tr>
<tr>
<td>active</td>
<td>表示当前，不要用 current 等</td>
</tr>
<tr>
<td>index</td>
<td>表示索引，不要用 idx 等</td>
</tr>
<tr>
<td>trigger</td>
<td>触点元素</td>
</tr>
<tr>
<td>triggerType</td>
<td>触发类型、方式</td>
</tr>
<tr>
<td>context</td>
<td>表示传入的 this 对象</td>
</tr>
<tr>
<td>object</td>
<td>推荐写全，不推荐简写为 o, obj 等</td>
</tr>
<tr>
<td>element</td>
<td>推荐写全，不推荐简写为 el, elem 等</td>
</tr>
<tr>
<td>length</td>
<td>不要写成 len, l</td>
</tr>
<tr>
<td>prev</td>
<td>previous 的缩写</td>
</tr>
<tr>
<td>next</td>
<td>next 下一个</td>
</tr>
<tr>
<td>constructor</td>
<td>不能写成 ctor</td>
</tr>
<tr>
<td>easing</td>
<td>示动画平滑函数</td>
</tr>
<tr>
<td>min</td>
<td>minimize 的缩写</td>
</tr>
<tr>
<td>max</td>
<td>maximize 的缩写</td>
</tr>
<tr>
<td>DOM</td>
<td>不要写成 dom, Dom</td>
</tr>
<tr>
<td>.hbs</td>
<td>使用 hbs 后缀表示模版</td>
</tr>
<tr>
<td>btn</td>
<td>button 的缩写</td>
</tr>
<tr>
<td>link</td>
<td>超链接</td>
</tr>
<tr>
<td>title</td>
<td>主要文本</td>
</tr>
<tr>
<td>img</td>
<td>图片路径（img标签src属性）</td>
</tr>
<tr>
<td>dataset</td>
<td>html5 data-xxx 数据接口</td>
</tr>
<tr>
<td>theme</td>
<td>主题</td>
</tr>
<tr>
<td>className</td>
<td>类名</td>
</tr>
<tr>
<td>classNameSpace</td>
<td>class 命名空间</td>
</tr>
<tr>
<td>## 六、True 和 False 布尔表达式</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null。</p>
</blockquote>
<p>下面的布尔表达式都返回 false:</p>
<ul>
<li>null</li>
<li>undefined</li>
<li>‘’ 空字符串</li>
<li>0 数字0</li>
</ul>
<p>但小心下面的, 可都返回 true:</p>
<ul>
<li>‘0’ 字符串0</li>
<li>[] 空数组</li>
<li>{} 空对象</li>
</ul>
<h2 id="七、不要在-Array-上使用-for-in-循环"><a href="#七、不要在-Array-上使用-for-in-循环" class="headerlink" title="七、不要在 Array 上使用 for-in 循环"></a>七、不要在 Array 上使用 for-in 循环</h2><p>for-in 循环只用于 object/map/hash 的遍历, 对 Array 用 for-in 循环有时会出错. 因为它并不是从 0 到 length - 1 进行遍历, 而是所有出现在对象及其原型链的键值。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Not recommended</span>
<span class="token keyword">function</span> <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">printArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This works.</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This is wrong.</span>
a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This is wrong.</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>buhu <span class="token operator">=</span> <span class="token string">'wine'</span><span class="token punctuation">;</span>
<span class="token function">printArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This is wrong again.</span>
a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token function">printArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This is wrong again.</span>
<span class="token comment" spellcheck="true">// Recommended</span>
<span class="token keyword">function</span> <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> l <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="八、二元和三元操作符"><a href="#八、二元和三元操作符" class="headerlink" title="八、二元和三元操作符"></a>八、二元和三元操作符</h2><blockquote>
<p>操作符始终写在前一行, 以免分号的隐式插入产生预想不到的问题。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> x <span class="token operator">=</span> a <span class="token operator">?</span> b <span class="token punctuation">:</span> c<span class="token punctuation">;</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> a <span class="token operator">?</span>
        longButSimpleOperandB <span class="token punctuation">:</span> longButSimpleOperandC<span class="token punctuation">;</span>
    <span class="token keyword">var</span> z <span class="token operator">=</span> a <span class="token operator">?</span>
            moreComplicatedB <span class="token punctuation">:</span>
            moreComplicatedC<span class="token punctuation">;</span>

<span class="token punctuation">.</span> 操作符也是如此：

    <span class="token keyword">var</span> x <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
        <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
        <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="8-1条件-三元-操作符"><a href="#8-1条件-三元-操作符" class="headerlink" title="8.1条件(三元)操作符 (?:)"></a>8.1条件(三元)操作符 (?:)</h3><blockquote>
<p>三元操作符用于替代 if 条件判断语句。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Not recommended</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Recommended</span>
<span class="token keyword">return</span> val <span class="token operator">?</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

### <span class="token number">8.3</span><span class="token operator">&amp;&amp;</span> 和 <span class="token operator">||</span></code></pre>
<p>二元布尔操作符是可短路的, 只有在必要时才会计算到最后一项。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Not recommended</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>opt_win<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> win<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opt_win<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    win <span class="token operator">=</span> opt_win<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    win <span class="token operator">=</span> window<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>kids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>kids<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">foo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>kids<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Recommended</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>opt_win<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> win <span class="token operator">=</span> opt_win <span class="token operator">||</span> window<span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> kid <span class="token operator">=</span> node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>kids <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>kids<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>kid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>kid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范(七)css表现之性能优化</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------css%E8%A1%A8%E7%8E%B0%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="慎重选择高消耗的样式"><a href="#慎重选择高消耗的样式" class="headerlink" title="慎重选择高消耗的样式"></a>慎重选择高消耗的样式</h3><p>高消耗属性在绘制前需要浏览器进行大量计算：</p>
<ul>
<li>box-shadows</li>
<li>border-radius</li>
<li>transparency</li>
<li>transforms</li>
<li>CSS filters（性能杀手）</li>
</ul>
<h3 id="避免过分重排"><a href="#避免过分重排" class="headerlink" title="避免过分重排"></a>避免过分重排</h3><p>当发生重排的时候，浏览器需要重新计算布局位置与大小。</p>
<p>常见的重排元素:</p>
<ul>
<li>width</li>
<li>height</li>
<li>padding</li>
<li>margin</li>
<li>display</li>
<li>border-width</li>
<li>position</li>
<li>top</li>
<li>left</li>
<li>right</li>
<li>bottom</li>
<li>font-size</li>
<li>float</li>
<li>text-align</li>
<li>overflow-y</li>
<li>font-weight</li>
<li>overflow</li>
<li>font-family</li>
<li>line-height</li>
<li>vertical-align</li>
<li>clear</li>
<li>white-space</li>
<li>min-height</li>
</ul>
<h3 id="正确使用-Display-的属性"><a href="#正确使用-Display-的属性" class="headerlink" title="正确使用 Display 的属性"></a>正确使用 Display 的属性</h3><p>Display 属性会影响页面的渲染，请合理使用。</p>
<ul>
<li><p>display: inline后不应该再使用 width、height、margin、padding 以及 float；</p>
</li>
<li><p>display: inline-block 后不应该再使用 float；</p>
</li>
<li><p>display: block 后不应该再使用 vertical-align；</p>
</li>
<li><p>display: table-* 后不应该再使用 margin 或者 float；</p>
</li>
</ul>
<h3 id="不滥用-Float"><a href="#不滥用-Float" class="headerlink" title="不滥用 Float"></a>不滥用 Float</h3><p>Float在渲染时计算量比较大，尽量减少使用。</p>
<h3 id="动画性能优化"><a href="#动画性能优化" class="headerlink" title="动画性能优化"></a>动画性能优化</h3><p>动画的实现原理，是利用了人眼的“视觉暂留”现象，在短时间内连续播放数幅静止的画面，使肉眼因视觉残象产生错觉，而误以为画面在“动”。</p>
<p>动画的基本概念：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>帧</td>
<td>在动画过程中，每一幅静止画面即为一“帧”;</td>
</tr>
<tr>
<td>帧率</td>
<td>即每秒钟播放的静止画面的数量，单位是fps(Frame per second);</td>
</tr>
<tr>
<td>帧时长</td>
<td>即每一幅静止画面的停留时间，单位一般是ms(毫秒);</td>
</tr>
<tr>
<td>跳帧(掉帧/丢帧)</td>
<td>在帧率固定的动画中，某一帧的时长远高于平均帧时长，导致其后续数帧被挤压而丢失的现象。</td>
</tr>
</tbody></table>
<blockquote>
<p>一般浏览器的渲染刷新频率是 60 fps，所以在网页当中，帧率如果达到 50-60 fps 的动画将会相当流畅，让人感到舒适。</p>
</blockquote>
<ul>
<li><p>如果使用基于 javaScript 的动画，尽量使用 requestAnimationFrame. 避免使用 setTimeout, setInterval.</p>
</li>
<li><p>避免通过类似 jQuery animate()-style 改变每帧的样式，使用 CSS 声明动画会得到更好的浏览器优化。</p>
</li>
<li><p>使用 translate 取代 absolute 定位就会得到更好的 fps，动画会更顺滑。<br><img src="https://img-blog.csdnimg.cn/c15691fa927542978fbdf945e5e00bc6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="High Performance Animations"></p>
</li>
</ul>
<h3 id="多利用硬件能力，如通过-3D-变形开启-GPU-加速"><a href="#多利用硬件能力，如通过-3D-变形开启-GPU-加速" class="headerlink" title="多利用硬件能力，如通过 3D 变形开启 GPU 加速"></a>多利用硬件能力，如通过 3D 变形开启 GPU 加速</h3><p>一般在 Chrome 中，3D或透视变换（perspective transform）CSS属性和对 opacity 进行 CSS 动画会创建新的图层，在硬件加速渲染通道的优化下，GPU 完成 3D 变形等操作后，将图层进行复合操作（Compesite Layers），从而避免触发浏览器大面积重绘和重排。</p>
<blockquote>
<p>注：3D 变形会消耗更多的内存和功耗。</p>
</blockquote>
<p>使用 translate3d 右移 500px 的动画流畅度要明显优于直接使用 left：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.ball-1</span> </span><span class="token punctuation">{</span>
      <span class="token property">transition</span><span class="token punctuation">:</span> -webkit-transform <span class="token number">.5</span>s ease<span class="token punctuation">;</span>
      <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.ball-1.slidein</span></span><span class="token punctuation">{</span>
      <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">500</span>px, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.ball-2</span> </span><span class="token punctuation">{</span>
      <span class="token property">transition</span><span class="token punctuation">:</span> left <span class="token number">.5</span>s ease<span class="token punctuation">;</span> left：<span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.ball-2.slidein</span> </span><span class="token punctuation">{</span>
      left：<span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="提升-CSS-选择器性能"><a href="#提升-CSS-选择器性能" class="headerlink" title="提升 CSS 选择器性能"></a>提升 CSS 选择器性能</h3><p>CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免使用消耗更多匹配时间的选择器。而在这之前我们需要了解 CSS 选择器匹配的机制， 如子选择器规则：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token id">#header</span> > a </span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span>blod<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>
<p>我们中的大多数人都是从左到右的阅读习惯，会习惯性的设定浏览器也是从左到右的方式进行匹配规则，推测这条规则的开销并不高。</p>
<p>我们会假设浏览器以这样的方式工作：寻找 id 为 header 的元素，然后将样式规则应用到直系子元素中的 a 元素上。我们知道文档中只有一个 id 为 header 的元素，并且它只有几个 a 元素的子节点，所以这个 CSS 选择器应该相当高效。</p>
<p>事实上，却恰恰相反，CSS 选择器是从右到左进行规则匹配。了解这个机制后，例子中看似高效的选择器在实际中的匹配开销是很高的，浏览器必须遍历页面中所有的 a 元素并且确定其父元素的 id 是否为 header 。</p>
<p>如果把例子的子选择器改为后代选择器则会开销更多，在遍历页面中所有 a 元素后还需向其上级遍历直到根节点。</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token id">#header</span>  a </span><span class="token punctuation">{</span><span class="token property">font-weight</span><span class="token punctuation">:</span>blod<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>
<p>理解了CSS选择器从右到左匹配的机制后，明白只要当前选择符的左边还有其他选择符，样式系统就会继续向左移动，直到找到和规则匹配的选择符，或者因为不匹配而退出。我们把最右边选择符称之为关键选择器。——更多详情</p>
<h4 id="如何减少-CSS-选择器性能损耗？"><a href="#如何减少-CSS-选择器性能损耗？" class="headerlink" title="如何减少 CSS 选择器性能损耗？"></a>如何减少 CSS 选择器性能损耗？</h4><p>Google 资深web开发工程师 Steve Souders 对 CSS 选择器的执行效率从高到低做了一个排序：</p>
<ol>
<li>id选择器（#myid）</li>
<li>类选择器（.myclassname）</li>
<li>标签选择器（div,h1,p）</li>
<li>相邻选择器（h1+p）</li>
<li>子选择器（ul &lt; li）</li>
<li>后代选择器（li a）</li>
<li>通配符选择器（*）</li>
<li>属性选择器（a[rel=”external”]）</li>
<li>伪类选择器（a:hover, li:nth-child）</li>
</ol>
<p>根据以上「选择器匹配」与「选择器执行效率」原则，我们可以通过避免不恰当的使用，提升 CSS 选择器性能。</p>
<h4 id="1、避免使用通用选择器"><a href="#1、避免使用通用选择器" class="headerlink" title="1、避免使用通用选择器"></a>1、避免使用通用选择器</h4><pre><code>/* Not recommended */
.content * {color: red;}</code></pre><p>浏览器匹配文档中所有的元素后分别向上逐级匹配 class 为 content 的元素，直到文档的根节点。因此其匹配开销是非常大的，所以应避免使用关键选择器是通配选择器的情况。</p>
<h4 id="2、避免使用标签或-class-选择器限制-id-选择器"><a href="#2、避免使用标签或-class-选择器限制-id-选择器" class="headerlink" title="2、避免使用标签或 class 选择器限制 id 选择器"></a>2、避免使用标签或 class 选择器限制 id 选择器</h4><pre><code>/* Not recommended */
button#backButton {…}
/* Recommended */
#newMenuIcon {…}</code></pre><h4 id="3、避免使用标签限制-class-选择器"><a href="#3、避免使用标签限制-class-选择器" class="headerlink" title="3、避免使用标签限制 class 选择器"></a>3、避免使用标签限制 class 选择器</h4><pre><code>/* Not recommended */
treecell.indented {…}
/* Recommended */
.treecell-indented {…}
/* Much to recommended */
.hierarchy-deep {…}</code></pre><h4 id="4、避免使用多层标签选择器。使用-class-选择器替换，减少css查找"><a href="#4、避免使用多层标签选择器。使用-class-选择器替换，减少css查找" class="headerlink" title="4、避免使用多层标签选择器。使用 class 选择器替换，减少css查找"></a>4、避免使用多层标签选择器。使用 class 选择器替换，减少css查找</h4><pre><code>/* Not recommended */
treeitem[mailfolder=&quot;true&quot;] &gt; treerow &gt; treecell {…}
/* Recommended */
.treecell-mailfolder {…}</code></pre><h4 id="5、避免使用子选择器"><a href="#5、避免使用子选择器" class="headerlink" title="5、避免使用子选择器"></a>5、避免使用子选择器</h4><pre><code>/* Not recommended */
treehead treerow treecell {…}
/* Recommended */
treehead &gt; treerow &gt; treecell {…}
/* Much to recommended */
.treecell-header {…}</code></pre><h4 id="6、使用继承"><a href="#6、使用继承" class="headerlink" title="6、使用继承"></a>6、使用继承</h4><pre><code>/* Not recommended */
#bookmarkMenuItem &gt; .menu-left { list-style-image: url(blah) }
/* Recommended */
#bookmarkMenuItem { list-style-image: url(blah) }</code></pre><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>作为一名前端工程师，应该具有「提升 CSS 选择器性能」的意识，但实际应用中，是否需要完全贯彻这些原则呢？这是一个探索「追求高性能」与「可维护性」两者平衡的问题。</p>
<p>对于「淘宝等电商类网站」，每个页面的 DOM 元素可能超过1000个以上的网站来说，通过优化 CSS 选择器，改善性能是具有实际意义的。但对于普通网站，应更倾向于在保证「语义化」和「可维护性」的前提下，提升 CSS 选择器性能。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>「1」Efficiently Rendering CSS<br>「2」Writing efficient CSS<br>「3」Performance Impact of CSS Selectors<br>「4」CSS Test Creator<br>「5」高性能CSS<br>「6」如何撰寫有效率的CSS選擇器</p>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范(六)css表现之预处理语言</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------css%E8%A1%A8%E7%8E%B0%E4%B9%8B%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<blockquote>
<p>LESS/SASS</p>
</blockquote>
<h3 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h3><p>代码按一下顺序组织：</p>
<ol>
<li>@import</li>
<li>变量声明</li>
<li>样式声明<pre class=" language-css"><code class="language-css"> <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"mixins/size.less"</span><span class="token punctuation">;</span></span>
 <span class="token atrule"><span class="token rule">@default-text-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span></span>
 <span class="token selector"><span class="token class">.page</span> </span><span class="token punctuation">{</span>
   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">960</span>px<span class="token punctuation">;</span>
   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>
 <span class="token punctuation">}</span></code></pre>
<h3 id="import-语句"><a href="#import-语句" class="headerlink" title="@import 语句"></a>@import 语句</h3></li>
</ol>
<p>@import 语句引用的文需要写在一对引号内，.less 后缀不得省略。引号使用 ‘ 和 “ 均可，但在同一项目内需统一。</p>
<pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/* Not recommended */</span>
    <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"mixins/size"</span><span class="token punctuation">;</span></span>
    <span class="token atrule"><span class="token rule">@import</span> <span class="token string">'mixins/grid.less'</span><span class="token punctuation">;</span></span>
    <span class="token comment" spellcheck="true">/* Recommended */</span>
    <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"mixins/size.less"</span><span class="token punctuation">;</span></span>
    <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"mixins/grid.less"</span><span class="token punctuation">;</span></span></code></pre>
<h3 id="混入（Mixin）"><a href="#混入（Mixin）" class="headerlink" title="混入（Mixin）"></a>混入（Mixin）</h3><p>在定义 mixin 时，如果 mixin 名称不是一个需要使用的 className，必须加上括号，否则即使不被调用也会输出到 CSS 中。</p>
<p>如果混入的是本身不输出内容的 mixin，需要在 mixin 后添加括号（即使不传参数），以区分这是否是一个 className。</p>
<pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/* Not recommended */</span>
    <span class="token selector"><span class="token class">.big-text</span> </span><span class="token punctuation">{</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">h3 </span><span class="token punctuation">{</span>
      <span class="token number">.</span>big-text<span class="token punctuation">;</span>
      <span class="token number">.</span>clearfix<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* Recommended */</span>
    <span class="token selector"><span class="token class">.big-text</span>() </span><span class="token punctuation">{</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">h3 </span><span class="token punctuation">{</span>
      <span class="token number">.</span><span class="token function">big-text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 1 */</span>
      <span class="token number">.</span><span class="token function">clearfix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 2 */</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="避免嵌套层级过多"><a href="#避免嵌套层级过多" class="headerlink" title="避免嵌套层级过多"></a>避免嵌套层级过多</h3><p>将嵌套深度限制在2级。对于超过3级的嵌套，给予重新评估。这可以避免出现过于详实的CSS选择器。</p>
<p>避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于20行的嵌套规则出现。</p>
<h3 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h3><p>变量可以用类似ruby和php的方式嵌入到字符串中，像@{name}这样的结构:</p>
<pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@base-url</span><span class="token punctuation">:</span> <span class="token string">"http://assets.fnord.com"</span><span class="token punctuation">;</span></span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("@{base-url}/images/bg.png")</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范(五)css表现模块组织</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------css%E8%A1%A8%E7%8E%B0%E6%A8%A1%E5%9D%97%E7%BB%84%E7%BB%87/</url>
    <content><![CDATA[<p>任何超过 1000 行的 CSS 代码，你都曾经历过这样的体验：</p>
<ol>
<li>这个 class 到底是什么意思呢？</li>
<li>这个 class 在哪里被使用呢？</li>
<li>如果我创建一个 xxoo class，会造成冲突吗？</li>
</ol>
<blockquote>
<p>Reasonable System for CSS Stylesheet Structure 的目标就是解决以上问题，它不是一个框架，而是通过规范，让你构建更健壮和可维护的 CSS 代码。<br>Components（组件）</p>
</blockquote>
<h3 id="Components（组件）"><a href="#Components（组件）" class="headerlink" title="Components（组件）"></a>Components（组件）</h3><p><img src="https://img-blog.csdnimg.cn/dd084988e066409891584a0cf7eecb5d.png#pic_center" alt="组件"></p>
<p>从 Components 的角度思考，将网站的模块都作为一个独立的 Components。</p>
<h3 id="Naming-components-（组件命名）"><a href="#Naming-components-（组件命名）" class="headerlink" title="Naming components （组件命名）"></a>Naming components （组件命名）</h3><p>Components 最少以两个单词命名，通过 - 分离，例如：</p>
<ul>
<li>点赞按钮 (.like-button)</li>
<li>搜索框 (.search-form)</li>
<li>文章卡片 (.article-card)</li>
</ul>
<h3 id="Elements-（元素）"><a href="#Elements-（元素）" class="headerlink" title="Elements （元素）"></a>Elements （元素）</h3><p><img src="https://img-blog.csdnimg.cn/b6c4d0522dfa4475890f64b491f3d77e.png#pic_center" alt="在这里插入图片描述"></p>
<p>Elements</p>
<p>Elements 是 Components 中的元素<br>Naming elements （元素命名）</p>
<p>Elements 的类名应尽可能仅有一个单词。</p>
<pre class=" language-css"><code class="language-css">     <span class="token selector"><span class="token class">.search-form</span> </span><span class="token punctuation">{</span>
        <span class="token selector">> <span class="token class">.field</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.action</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span></code></pre>
<h3 id="On-multiple-words-（多个单词）"><a href="#On-multiple-words-（多个单词）" class="headerlink" title="On multiple words （多个单词）"></a>On multiple words （多个单词）</h3><p>对于倘若需要两个或以上单词表达的 Elements 类名，不应使用中划线和下划线连接，应直接连接。</p>
<pre class=" language-css"><code class="language-css">      <span class="token selector"><span class="token class">.profile-box</span> </span><span class="token punctuation">{</span>
        <span class="token selector">> <span class="token class">.firstname</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.lastname</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.avatar</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span></code></pre>
<h3 id="Avoid-tag-selectors-（避免标签选择器）"><a href="#Avoid-tag-selectors-（避免标签选择器）" class="headerlink" title="Avoid tag selectors （避免标签选择器）"></a>Avoid tag selectors （避免标签选择器）</h3><p>任何时候尽可能使用 classnames。标签选择器在使用上没有问题，但是其性能上稍弱，并且表意不明确。</p>
<pre class=" language-css"><code class="language-css">      <span class="token selector"><span class="token class">.article-card</span> </span><span class="token punctuation">{</span>
        <span class="token selector">> h3    </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ✗ avoid */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.name</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ✓ better */</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span></code></pre>
<h3 id="Variants-（变体）"><a href="#Variants-（变体）" class="headerlink" title="Variants （变体）"></a>Variants （变体）</h3><p><img src="https://img-blog.csdnimg.cn/b8174ec1efc9414daa0809cbd025dd04.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="Variants"><br>Components 和 Elements 可能都会拥有 Variants。<br>Naming variants （变体命名）</p>
<p>Variants 的 classname 应带有前缀中划线 -</p>
<pre class=" language-css"><code class="language-css">      <span class="token selector"><span class="token class">.like-button</span> </span><span class="token punctuation">{</span>
        <span class="token selector">&amp;<span class="token class">.-wide</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">&amp;<span class="token class">.-short</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">&amp;<span class="token class">.-disabled</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span></code></pre>
<h3 id="Element-variants-（元素变体）"><a href="#Element-variants-（元素变体）" class="headerlink" title="Element variants （元素变体）"></a>Element variants （元素变体）</h3><pre class=" language-css"><code class="language-css">      <span class="token selector"><span class="token class">.shopping-card</span> </span><span class="token punctuation">{</span>
        <span class="token selector">> <span class="token class">.title</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.title.-small</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span></code></pre>
<h3 id="Dash-prefixes-（中划线前缀）"><a href="#Dash-prefixes-（中划线前缀）" class="headerlink" title="Dash prefixes （中划线前缀）"></a>Dash prefixes （中划线前缀）</h3><p>为什么使用中划线作为变体的前缀？</p>
<ul>
<li>它可以避免歧义与 Elements</li>
<li>CSS class 仅能以单词和 _ 或 - 开头</li>
<li>中划线比下划线更容易输出</li>
</ul>
<h3 id="Layout-（布局）"><a href="#Layout-（布局）" class="headerlink" title="Layout （布局）"></a>Layout （布局）</h3><p><img src="https://img-blog.csdnimg.cn/5a78597dc56441ba8f0e6fda52853f26.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="Layout"><br>Avoid positioning properties （避免定位属性）</p>
<p>Components 应该在不同的上下文中都可以复用，所以应避免设置以下属性：</p>
<ul>
<li>Positioning (position, top, left, right, bottom)</li>
<li>Floats (float, clear)</li>
<li>Margins (margin)</li>
<li>Dimensions (width, height) *</li>
</ul>
<h3 id="Fixed-dimensions-（固定尺寸）"><a href="#Fixed-dimensions-（固定尺寸）" class="headerlink" title="Fixed dimensions （固定尺寸）"></a>Fixed dimensions （固定尺寸）</h3><p>头像和 logos 这些元素应该设置固定尺寸（宽度，高度…）。</p>
<h3 id="Define-positioning-in-parents-（在父元素中设置定位）"><a href="#Define-positioning-in-parents-（在父元素中设置定位）" class="headerlink" title="Define positioning in parents （在父元素中设置定位）"></a>Define positioning in parents （在父元素中设置定位）</h3><p>倘若你需要为组件设置定位，应将在组件的上下文（父元素）中进行处理，比如以下例子中，将 widths 和 floats 应用在 list component(.article-list) 当中，而不是 component(.article-card) 自身。</p>
<pre class=" language-css"><code class="language-css">      <span class="token selector"><span class="token class">.article-list</span> </span><span class="token punctuation">{</span>
        <span class="token selector">&amp; </span><span class="token punctuation">{</span>
          <span class="token atrule"><span class="token rule">@include</span> clearfix<span class="token punctuation">;</span></span>
        <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.article-card</span> </span><span class="token punctuation">{</span>
          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">33.3%</span><span class="token punctuation">;</span>
          <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token selector"><span class="token class">.article-card</span> </span><span class="token punctuation">{</span>
        <span class="token selector">&amp; </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.image</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.title</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.category</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span></code></pre>
<h3 id="Avoid-over-nesting-（避免过分嵌套）"><a href="#Avoid-over-nesting-（避免过分嵌套）" class="headerlink" title="Avoid over-nesting （避免过分嵌套）"></a>Avoid over-nesting （避免过分嵌套）</h3><p>当出现多个嵌套的时候容易失去控制，应保持不超过一个嵌套。</p>
<pre class=" language-css"><code class="language-css">      <span class="token comment" spellcheck="true">/* ✗ Avoid: 3 levels of nesting */</span>
      <span class="token selector"><span class="token class">.image-frame</span> </span><span class="token punctuation">{</span>
        <span class="token selector">> <span class="token class">.description</span> </span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">/* ... */</span>
          <span class="token selector">> <span class="token class">.icon</span> </span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/* ... */</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment" spellcheck="true">/* ✓ Better: 2 levels */</span>
      <span class="token selector"><span class="token class">.image-frame</span> </span><span class="token punctuation">{</span>
        <span class="token selector">> <span class="token class">.description</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token selector">> <span class="token class">.description</span> > <span class="token class">.icon</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span></code></pre>
<h3 id="Apprehensions-（顾虑）"><a href="#Apprehensions-（顾虑）" class="headerlink" title="Apprehensions （顾虑）"></a>Apprehensions （顾虑）</h3><p><strong>中划线-是一坨糟糕的玩意</strong>：其实你可以选择性的使用，只要将 Components, Elements, Variants 记在心上即可。<br><strong>我有时候想不出两个单词唉</strong>：有些组件的确使用一个单词就能表意，比如 aleter 。但其实你可以使用后缀，使其意识更加明确。</p>
<p>比如块级元素：</p>
<ul>
<li>.alert-box</li>
<li>.alert-card</li>
<li>.alert-block</li>
</ul>
<p>或行内级元素</p>
<ul>
<li>.link-button</li>
<li>.link-span</li>
</ul>
<h3 id="Terminologies-（术语）"><a href="#Terminologies-（术语）" class="headerlink" title="Terminologies （术语）"></a>Terminologies （术语）</h3><blockquote>
<p>RSCSS 与其他 CSS 模块组织系统相似的概念</p>
</blockquote>
<p>RSCSS     |BEM     SMACSS<br>—|—-|–<br>Component     |Block     |Module<br>Element     |Element     |?<br>Layout     |?     |Layout<br>Variant     |Modifier     |Theme &amp; State</p>
<h3 id="Summary-（总结）"><a href="#Summary-（总结）" class="headerlink" title="Summary （总结）"></a>Summary （总结）</h3><ul>
<li>以 Components 的角度思考，以两个单词命名（.screenshot-image）</li>
<li>Components 中的 Elements，以一个单词命名（.blog-post .title）</li>
<li>Variants，以中划线-作为前缀（.shop-banner.-with-icon）</li>
<li>Components 可以互相嵌套</li>
<li>记住，你可以通过继承让事情变得更简单</li>
</ul>
<p>译自:<a href="https://github.com/rstacruz/rscss#readme" target="_blank" rel="noopener">Reasonable System for CSS Stylesheet Structure</a></p>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范（四）css表现规范约定</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------css%E8%A1%A8%E7%8E%B0%E8%A7%84%E8%8C%83%E7%BA%A6%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="一、命名-组成元素"><a href="#一、命名-组成元素" class="headerlink" title="一、命名-组成元素"></a>一、命名-组成元素</h2><ul>
<li>命名必须由单词、中划线①或数字组成；</li>
<li>不允许使用拼音（约定俗成的除外，如：youku, baidu），尤其是缩写的拼音、拼音与英文的混合。</li>
</ul>
<p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.xiangqing</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.news_list</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.zhuti</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.detail</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.news-list</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.topic</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<blockquote>
<p>使用中划线 “-” 作为连接字符，而不是下划线 “_”。</p>
</blockquote>
<blockquote>
<p>2种方式都有不少支持者，但 “-“ 能让你少按一次shift键，并且更符合CSS原生语法，所以我们只选一种目前业内普遍使用的方式</p>
</blockquote>
<h2 id="二、命名-词汇规范"><a href="#二、命名-词汇规范" class="headerlink" title="二、命名-词汇规范"></a>二、命名-词汇规范</h2><ul>
<li>不依据表现形式来命名；</li>
<li>可根据内容来命名；</li>
<li>可根据功能来命名。</li>
</ul>
<p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    left, right, center, red, black</code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    nav, aside, news, type, search</code></pre>
<h2 id="三、命名-缩写规范"><a href="#三、命名-缩写规范" class="headerlink" title="三、命名-缩写规范"></a>三、命名-缩写规范</h2><ul>
<li>保证缩写后还能较为清晰保持原单词所能表述的意思；</li>
<li>使用业界熟知的或者约定俗成的。</li>
</ul>
<p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    navigation   =>  navi
    header       =>  head
    description  =>  des</code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    navigation   =>  nav
    header       =>  hd
    description  =>  desc</code></pre>
<h2 id="四、命名-前缀规范"><a href="#四、命名-前缀规范" class="headerlink" title="四、命名-前缀规范"></a>四、命名-前缀规范</h2><table>
<thead>
<tr>
<th>前缀</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>g-</td>
<td>全局通用样式命名，前缀g全称为global，一旦修改将影响全站样式</td>
<td>g-mod</td>
</tr>
<tr>
<td>m-</td>
<td>模块命名方式</td>
<td>m-detail</td>
</tr>
<tr>
<td>ui-</td>
<td>组件命名方式</td>
<td>ui-selector</td>
</tr>
<tr>
<td>js-</td>
<td>所有用于纯交互的命名，不涉及任何样式规则。JSer拥有全部定义权限</td>
<td>js-switch</td>
</tr>
</tbody></table>
<ul>
<li>选择器必须是以某个前缀开头</li>
</ul>
<p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.info</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.current</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.news</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>因为这样将给我们带来不可预知的管理麻烦以及沉重的历史包袱。你永远也不会知道哪些样式名已经被用掉了，如果你是一个新人，你可能会遭遇，你每定义个样式名，都有同名的样式已存在，然后你只能是换样式名或者覆盖规则。</p>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.m-detail</span> <span class="token class">.info</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail</span> <span class="token class">.current</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail</span> <span class="token class">.news</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>所有的选择器必须是以 g-, m-, ui- 等有前缀的选择符开头的，意思就是说所有的规则都必须在某个相对的作用域下才生效，尽可能减少全局污染。</p>
<p>js- 这种级别的className完全交由JSer自定义，但是命名的规则也可以保持跟重构一致，比如说不能使用拼音之类的</p>
<h2 id="五、书写格式"><a href="#五、书写格式" class="headerlink" title="五、书写格式"></a>五、书写格式</h2><ul>
<li>选择器与大括号之间保留一个空格；</li>
<li>分号之后保留一个空格；</li>
<li>逗号之后保留一个空格；</li>
<li>所有规则需换行；</li>
<li>多组选择器之间需换行。</li>
</ul>
<p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">main</span><span class="token punctuation">{</span>
        <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">h1,h2,h3</span><span class="token punctuation">{</span>
        <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">main </span><span class="token punctuation">{</span>
        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">h1,
    h2,
    h3 </span><span class="token punctuation">{</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h2 id="六、规则与分号"><a href="#六、规则与分号" class="headerlink" title="六、规则与分号"></a>六、规则与分号</h2><p>每条规则结束后都必须加上分号</p>
<p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px
    <span class="token punctuation">}</span></code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h2 id="七、去掉uri中引用资源的引号"><a href="#七、去掉uri中引用资源的引号" class="headerlink" title="七、去掉uri中引用资源的引号"></a>七、去掉uri中引用资源的引号</h2><blockquote>
<p>不要在url()里对引用资源加引号</p>
</blockquote>
<p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>
        <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("sprites.png")</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url("global.css")</span><span class="token punctuation">;</span></span></code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>
        <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(sprites.png)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url(global.css)</span><span class="token punctuation">;</span></span></code></pre>
<h2 id="八、HEX颜色值写法"><a href="#八、HEX颜色值写法" class="headerlink" title="八、HEX颜色值写法"></a>八、HEX颜色值写法</h2><ul>
<li>将所有的颜色值小写；</li>
<li>可以缩写的缩写至3位。</li>
</ul>
<p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF0000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h2 id="九、属性书写顺序"><a href="#九、属性书写顺序" class="headerlink" title="九、属性书写顺序"></a>九、属性书写顺序</h2><h3 id="9-1-遵循先布局后内容的顺序。"><a href="#9-1-遵循先布局后内容的顺序。" class="headerlink" title="9.1 遵循先布局后内容的顺序。"></a>9.1 遵循先布局后内容的顺序。</h3><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.g-box</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    　　　<span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    　　　<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid<span class="token punctuation">;</span>
    　　　<span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#aaa</span><span class="token punctuation">;</span>
    　　　<span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    　　　<span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">14</span>px/<span class="token number">1.5</span> sans-serif<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这个应该好理解，比如优先布局，布局属性有 display, float, overflow 等等；内容次之，比如 color, font, text-align 之类。</p>
<h3 id="9-2组概念。"><a href="#9-2组概念。" class="headerlink" title="9.2组概念。"></a>9.2组概念。</h3><p>拿上例的代码来说，如果我们还需要进行定位及堆叠，规则我们可以改成如下：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.g-box</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    　　　<span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    　　　<span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
    　　　<span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    　　　<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid<span class="token punctuation">;</span>
    　　　<span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#aaa</span><span class="token punctuation">;</span>
    　　　<span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    　　　<span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">14</span>px/<span class="token number">1.5</span> sans-serif<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<pre><code>从代码中可以看到，我们直接将z-index, top, left 紧跟在 position 之后，因为这几个属性其实是一组的，如果去掉position，则后3条属性规则都将失效。</code></pre><h3 id="9-3私有属性在前标准属性在后"><a href="#9-3私有属性在前标准属性在后" class="headerlink" title="9.3私有属性在前标准属性在后"></a>9.3私有属性在前标准属性在后</h3><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.g-box</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    　　　<span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    　　　<span class="token property">-o-box-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    　　　<span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>当有一天你的浏览器升级后，可能不再支持私有写法，那么这时写在后面的标准写法将生效，避免无法向后兼容的情况发生。</p>
<h2 id="十、避免低效率选择器"><a href="#十、避免低效率选择器" class="headerlink" title="十、避免低效率选择器"></a>十、避免低效率选择器</h2><h3 id="10-1-避免类型选择器"><a href="#10-1-避免类型选择器" class="headerlink" title="10.1 避免类型选择器"></a>10.1 避免类型选择器</h3><p>不允许：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">div<span class="token id">#doc</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector">li<span class="token class">.first</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>应该：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token id">#doc</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.first</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<pre><code>CSS选择器是由右到左进行解析的，所以 div#doc 本身并不会比 #doc 更快</code></pre><h3 id="10-1-避免多id选择器"><a href="#10-1-避免多id选择器" class="headerlink" title="10.1 避免多id选择器"></a>10.1 避免多id选择器</h3><p>不允许：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token id">#xxx</span> <span class="token id">#yyy</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>应该：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token id">#yyy</span> </span><span class="token punctuation">{</span> sRules<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<h2 id="十一、属性缩写与分拆"><a href="#十一、属性缩写与分拆" class="headerlink" title="十一、属性缩写与分拆"></a>十一、属性缩写与分拆</h2><h3 id="11-1无继承关系时，使用缩写"><a href="#11-1无继承关系时，使用缩写" class="headerlink" title="11.1无继承关系时，使用缩写"></a>11.1无继承关系时，使用缩写</h3><p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>
    　　　<span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>
    　　　<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="11-2存在继承关系时，使用分拆方式"><a href="#11-2存在继承关系时，使用分拆方式" class="headerlink" title="11.2存在继承关系时，使用分拆方式"></a>11.2存在继承关系时，使用分拆方式</h3><p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.m-detail</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">font</span><span class="token punctuation">:</span> bold <span class="token number">12</span>px/<span class="token number">1.5</span> arial, sans-serif<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail</span> <span class="token class">.info</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">font</span><span class="token punctuation">:</span> normal <span class="token number">14</span>px/<span class="token number">1.5</span> arial, sans-serif<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="11-3要避免错误的覆盖："><a href="#11-3要避免错误的覆盖：" class="headerlink" title="11.3要避免错误的覆盖："></a>11.3要避免错误的覆盖：</h3><pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.m-detail</span> <span class="token class">.info</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">14</span>px sans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>如果你只是想改字号和字体，然后写成了上面这样，这是错误的写法，因为 font 复合属性里的其他属性将会被重置为 user agent 的默认值，比如 font-weight 就会被重置为 normal。</p>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.m-detail</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">font</span><span class="token punctuation">:</span> bold <span class="token number">12</span>px/<span class="token number">1.5</span> arial, sans-serif<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail</span> <span class="token class">.info</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
    　　　<span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>在存在继承关系的情况下，只将需要变更的属性重定义，不进行缩写，避免不需要的重写的属性被覆盖定义</p>
<h3 id="11-4根据规则条数选择缩写和拆分"><a href="#11-4根据规则条数选择缩写和拆分" class="headerlink" title="11.4根据规则条数选择缩写和拆分"></a>11.4根据规则条数选择缩写和拆分</h3><p>不推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.m-detail</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>
    　　　<span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
    　　　<span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span> <span class="token hexcode">#000</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>推荐：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.m-detail</span> </span><span class="token punctuation">{</span>
    　　　<span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    　　　<span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h2 id="十二、模块化"><a href="#十二、模块化" class="headerlink" title="十二、模块化"></a>十二、模块化</h2><ul>
<li>每个模块必须是一个独立的样式文件，文件名与模块名一致；</li>
<li>模块样式的选择器必须以模块名开头以作范围约定；</li>
</ul>
<p>假定有一个模块如前文 HTML模块化，那么 m-detail.scss 的写法大致如下：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.m-detail</span> </span><span class="token punctuation">{</span>
        <span class="token selector">background: <span class="token id">#fff</span>;
        color: <span class="token id">#333</span>;
        &amp;-hd </span><span class="token punctuation">{</span>
            <span class="token selector">padding: 5px 10px;
            background: <span class="token id">#eee</span>;
            <span class="token class">.title</span> </span><span class="token punctuation">{</span>
                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token selector">&amp;-bd </span><span class="token punctuation">{</span>
            <span class="token selector">padding: 10px;
            <span class="token class">.info</span> </span><span class="token punctuation">{</span>
                <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
                <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token selector">&amp;-ft </span><span class="token punctuation">{</span>
            <span class="token selector">text-align: center;
            <span class="token class">.more</span> </span><span class="token punctuation">{</span>
                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>编译之后代码如下：</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.m-detail</span> </span><span class="token punctuation">{</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail-hd</span> </span><span class="token punctuation">{</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail-hd</span> <span class="token class">.title</span> </span><span class="token punctuation">{</span>
        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail-bd</span> </span><span class="token punctuation">{</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail-bd</span> <span class="token class">.info</span> </span><span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
        <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail-ft</span> </span><span class="token punctuation">{</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.m-detail-ft</span> <span class="token class">.more</span> </span><span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<blockquote>
<p>任何超过3级的选择器，需要思考是否必要，是否有无歧义的，能唯一命中的更简短的写法</p>
</blockquote>
<h2 id="十三、图像约定"><a href="#十三、图像约定" class="headerlink" title="十三、图像约定"></a>十三、图像约定</h2><ol>
<li>图像压缩</li>
</ol>
<p>所有图片必须经过一定的压缩和优化才能发布</p>
<ol start="2">
<li><p>背景图</p>
<p> 使用PNG格式而不是GIF格式，因为PNG格式色彩更丰富，还能提供更好的压缩比；<br> 在需要兼容IE6的项目中，尽可能选择PNG8，而不是使用PNG24+滤镜。</p>
</li>
<li><p>前景图</p>
<p> 内容图片建议使用JPG，可以拥有更好地显示效果；<br> 装饰性图片使用PNG。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范（二）html</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------html%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<p><strong>尽量遵循</strong> HTML 标准和语义，但是<strong>不要以牺牲实用性为代价</strong>。任何时候都要尽量使用最少的标签并保持最小的复杂度。</p>
</blockquote>
<h3 id="通用约定"><a href="#通用约定" class="headerlink" title="通用约定"></a>通用约定</h3><h5 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h5><table>
<thead>
<tr>
<th>规范名称</th>
<th>Cook</th>
</tr>
</thead>
<tbody><tr>
<td>当前版本</td>
<td>v1.0 beta</td>
</tr>
<tr>
<td>规范发起</td>
<td>杜瑶(@doyoe)</td>
</tr>
<tr>
<td>参与人群</td>
<td>Qunar FED、Red</td>
</tr>
<tr>
<td>最后更新</td>
<td>2018.08.10</td>
</tr>
</tbody></table>
<h5 id="文档目录结构-仅做参考"><a href="#文档目录结构-仅做参考" class="headerlink" title="文档目录结构(仅做参考)"></a>文档目录结构(仅做参考)</h5><pre class=" language-html"><code class="language-html">    |-- 项目名
        |-- src    开发环境
            |-- html    静态页面模板目录
            |-- bgimg   背景图目录（假设有的话）
            |-- image   前景图目录（假设有的话）
            |-- font    字体目录（假设有的话）
            |-- scripts      脚本目录
            |-- styles（Yo）  样式目录
                |-- lib   基础库
                    |-- core      核心代码：reset
                    |-- element   元素
                    |-- fragment  公用碎片
                    |-- layout    布局
                    |-- widget    组件
                |-- usage  项目具体实现
                    |-- project 某个子项目
                        |-- core      核心代码：桥接lib中的core，可以进行项目级扩展
                        |-- fragment  项目公用碎片
                        |-- module    模块
                        |-- page      page桥接文件目录：src-list
                        |-- export    page pack之后的文件目录
        |-- prd    生产环境
            |-- bgimg   背景图目录（假设有的话）
            |-- image   前景图目录（假设有的话）
            |-- font    字体目录（假设有的话）
            |-- scripts      脚本目录
            |-- styles（Yo）  样式目录
                |-- project1 子项目
                    |-- index.css
                    |-- login.css
                    |-- and etc...
                |-- project2 子项目
                    |-- index.css
                    |-- login.css
                    |-- and etc...
                |-- and etc...</code></pre>
<blockquote>
<p>src, scripts, styles 三个目录是为了和现有项目保持一致，避免修改过大，所以保持不变。</p>
</blockquote>
<blockquote>
<p>html 目录，用于存放前端开发做的静态页面，以备查阅、备份、review或给后端套页面。</p>
</blockquote>
<blockquote>
<p>bgimg, image, font 三个目录在Qunar一般不会直接存在，因为我们有source服务器，这些资源都会在那上面管理；不过特殊情况也会有，比如一些独立的项目，没有使用source的，那么就需要遵循这样的目录划分。</p>
</blockquote>
<blockquote>
<p>至于 html, bgimg, image, font 这几个目录为什么没有加 s，主要是因为不希望大家去想某个目录是否为复数，简单点就好。</p>
</blockquote>
<blockquote>
<p>prd 为生产环境目录，以 xxx 项目中的一个子项目 mobile 为例，其生产环境中的某个CSS外链大致如下：//sitename.com/prd/styles/mobile/index.css</p>
</blockquote>
<h5 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h5><ul>
<li>自闭合（self-closing）标签，无需闭合 ( 例如： img input br hr 等 )；</li>
<li>可选的闭合标签（closing tag），需闭合 ( 例如/li 或 /body )；</li>
<li>尽量减少标签数量；<pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/google.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Google<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Style<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Guide<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- Not recommended --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- Recommended --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h5 id="Class-与-ID"><a href="#Class-与-ID" class="headerlink" title="Class 与 ID"></a>Class 与 ID</h5></li>
<li>class 应以功能或内容命名，不以表现形式命名；</li>
<li>class 与 id 单词字母小写，多个单词组成时，采用中划线-分隔；</li>
<li>使用唯一的 id 作为 Javascript hook, 同时避免创建无样式信息的 class；<pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- Not recommended --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>j-hook left contentWrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!-- Recommended --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>j-hook<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar content-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h5 id="属性顺序"><a href="#属性顺序" class="headerlink" title="属性顺序"></a>属性顺序</h5></li>
</ul>
<p>HTML 属性应该按照特定的顺序出现以保证易读性。</p>
<ol>
<li>id</li>
<li>class</li>
<li>name</li>
<li>data-xxx</li>
<li>src, for, type, href</li>
<li>title, alt</li>
<li>aria-xxx, role<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">data-modal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>###<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<p>aria-xxx :为了避免屏幕识读设备抓取非故意的和可能产生混淆的输出内容（尤其是当图标纯粹作为装饰用途时），我们为这些图标设置了 aria-hidden=“true” 属性;</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>role:可以增强文本的可读性和语义化,比如屏幕朗读程序，为盲人提供的访问网络的便利程序</p>
</blockquote>
<blockquote>
<p>屏幕阅读器是一种可以将电脑、手机屏幕上的内容通过文本转语音 TTS 朗读出的软件,该类软件的受众人群主要是视力障碍人群</p>
</blockquote>
<h5 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h5><p><strong>属性的定义，统一使用双引号</strong>。</p>
<pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- 不推荐 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>j-hook<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>text</span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 推荐--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>j-hook<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>
<h5 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h5><p><strong>a标签 不允许嵌套 div</strong>这种约束属于语义嵌套约束，与之区别的约束还有严格嵌套约束，比如a 不允许嵌套 a。</p>
<p>严格嵌套约束在所有的浏览器下都不被允许；而语义嵌套约束，浏览器大多会容错处理，生成的文档树可能相互不太一样。</p>
<p><strong>语义嵌套约束</strong></p>
<ul>
<li>li 用于 ul 或 ol 下；</li>
<li>dd, dt 用于 dl 下；</li>
<li>thead, tbody, tfoot, tr, td 用于 table 下；</li>
</ul>
<p><strong>严格嵌套约束</strong></p>
<pre><code>inline-Level 元素，仅可以包含文本或其它 inline-Level 元素;
&lt;a&gt;里不可以嵌套交互式元素&lt;a&gt;、&lt;button&gt;、&lt;select&gt;等;
&lt;p&gt;里不可以嵌套块级元素&lt;div&gt;、&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;ul&gt;/&lt;ol&gt;/&lt;li&gt;、&lt;dl&gt;/&lt;dt&gt;/&lt;dd&gt;、&lt;form&gt;等。</code></pre><p>更多详情，参考WEB标准系列-HTML元素嵌套</p>
<h5 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h5><p>用 TODO 标示待办事项和正在开发的条目</p>
<pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- TODO: 图文混排 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>g-imgtext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    ...
    /* TODO: 图文混排 comm: g-imgtext */
    .g-imgtext { sRules; }</code></pre>
<h5 id="布尔值属性"><a href="#布尔值属性" class="headerlink" title="布尔值属性"></a>布尔值属性</h5><p>HTML5 规范中 disabled、checked、selected 等属性不用设置值。</p>
<pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<h3 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h3><p>没有 CSS 的 HTML 是一个语义系统而不是 UI 系统。</p>
<p>通常情况下，每个标签都是有语义的，所谓语义就是你的衣服分为外套， 裤子，裙子，内裤等，各自有对应的功能和含义。所以你总不能把内裤套在脖子上吧。— 一丝</p>
<p>此外语义化的 HTML 结构，有助于机器（搜索引擎）理解，另一方面多人协作时，能迅速了解开发者意图。</p>
<h4 id="常见标签语义"><a href="#常见标签语义" class="headerlink" title="常见标签语义"></a>常见标签语义</h4><table>
<thead>
<tr>
<th>标签</th>
<th>语义</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;p&gt;</td>
<td>段落</td>
</tr>
<tr>
<td>&lt;h1&gt; &lt;h2&gt; &lt;h3&gt; …</td>
<td>标题</td>
</tr>
<tr>
<td>&lt;ul&gt;</td>
<td>无序列表</td>
</tr>
<tr>
<td>&lt;ol&gt;</td>
<td>有序列表</td>
</tr>
<tr>
<td>&lt;blockquote&gt;</td>
<td>大段引用</td>
</tr>
<tr>
<td>&lt;cite&gt;</td>
<td>一般引用</td>
</tr>
<tr>
<td>&lt;b&gt;</td>
<td>为样式加粗而加粗</td>
</tr>
<tr>
<td>&lt;strong&gt;</td>
<td>为强调内容而加粗</td>
</tr>
<tr>
<td>&lt;i&gt;</td>
<td>为样式倾斜而倾斜</td>
</tr>
<tr>
<td>&lt;em&gt;</td>
<td>为强调内容而倾斜</td>
</tr>
<tr>
<td>code</td>
<td>代码标识</td>
</tr>
<tr>
<td>abbr</td>
<td>缩写</td>
</tr>
<tr>
<td>示例</td>
<td></td>
</tr>
</tbody></table>
<p>将你构建的页面当作一本书，将标签的语义对应的其功能和含义；</p>
<ul>
<li>书的名称：&lt;h1&gt;</li>
<li>书的每个章节标题: &lt;h2&gt;</li>
<li>章节内的文章标题: &lt;h3&gt;</li>
<li>小标题/副标题: &lt;h4&gt; &lt;h5&gt; &lt;h6&gt;</li>
<li>章节的段落: &lt;p&gt;</li>
</ul>
<p>更多语义化的内容，大家可查找资料；</p>
<h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><h5 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h5><p>为每个 HTML 页面的第一行添加标准模式（standard mode）的声明， 这样能够确保在每个浏览器中拥有一致的表现。</p>
<pre class=" language-html"><code class="language-html">    <span class="token doctype">&lt;!DOCTYPE html></span></code></pre>
<h5 id="语言属性"><a href="#语言属性" class="headerlink" title="语言属性"></a>语言属性</h5><p>为什么使用 lang=”zh-cmn-Hans” 而不是我们通常写的 lang=”zh-CN” 呢? 请查看 <strong>关于网页头部lang属性值的设置</strong> 一文</p>
<pre><code>&lt;!-- 中文 --&gt;
&lt;html lang=&quot;zh-Hans&quot;&gt;
&lt;!-- 简体中文 --&gt;
&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;
&lt;!-- 繁体中文 --&gt;
&lt;html lang=&quot;zh-cmn-Hant&quot;&gt;
&lt;!-- English --&gt;
&lt;html lang=&quot;en&quot;&gt;</code></pre><h5 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h5><ul>
<li>以无 BOM 的 utf-8 编码作为文件格式;</li>
<li>指定字符编码的 meta 必须是 head 的第一个直接子元素；请参考前端观察的博文： <a href="https://www.qianduan.net/html5-charset-can-it.html/" target="_blank" rel="noopener">HTML5 Charset 能用吗？</a><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  ......
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  ......
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h5 id="IE-兼容模式"><a href="#IE-兼容模式" class="headerlink" title="IE 兼容模式"></a>IE 兼容模式</h5></li>
</ul>
<p>优先使用最新版本的IE 和 Chrome 内核</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h5 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- SEO --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Style Guide<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>your keywords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>your description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author,email address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>
<h5 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h5><ul>
<li>viewport: 一般指的是浏览器窗口内容区的大小，不包含工具条、选项卡等内容；</li>
<li>width: 浏览器宽度，输出设备中的页面可见区域宽度；</li>
<li>device-width: 设备分辨率宽度，输出设备的屏幕可见宽度；</li>
<li>initial-scale: 初始缩放比例；</li>
<li>maximum-scale: 最大缩放比例；</li>
</ul>
<p>为移动端设备优化，设置可见区域的宽度和初始缩放比例。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h5 id="iOS-图标"><a href="#iOS-图标" class="headerlink" title="iOS 图标"></a>iOS 图标</h5><ul>
<li>apple-touch-icon 图片自动处理成圆角和高光等效果;</li>
<li>apple-touch-icon-precomposed 禁止系统自动添加效果，直接显示设计原图;<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/apple-touch-icon-57x57-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
</li>
</ul>
<!-- iPad，72x72 像素，可以没有，但推荐有 -->
<link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-72x72-precomposed.png" sizes="72x72">

<!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->
<link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-114x114-precomposed.png" sizes="114x114">

<!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->
<link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-144x144-precomposed.png" sizes="144x144">
```

<h5 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h5><p>在未指定 favicon 时，大多数浏览器会请求 Web Server 根目录下的 favicon.ico 。为了保证 favicon 可访问，避免404，必须遵循以下两种方法之一：</p>
<ul>
<li><p>在 Web Server 根目录放置 favicon.ico 文件；</p>
</li>
<li><p>使用 link 指定 favicon；</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<h5 id="HEAD-模板"><a href="#HEAD-模板" class="headerlink" title="HEAD 模板"></a>HEAD 模板</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-cmn-Hans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Style Guide<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>不超过150个字符<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name, email@gmail.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

  <span class="token comment" spellcheck="true">&lt;!-- 为移动设备添加 viewport --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

  <span class="token comment" spellcheck="true">&lt;!-- iOS 图标 --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/apple-touch-icon-57x57-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alternate<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/rss+xml<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RSS<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/rss.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre>
</li>
</ul>
<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><ul>
<li>每个模块必须有一个模块名；</li>
<li>每个模块的基本组成部分应该一致；</li>
<li>模块的子节点类名需带上模块名（防止模块间嵌套时产生不必要的覆盖）；</li>
<li>孙辈节点无需再带模块名。</li>
</ul>
<p>代码如：</p>
<pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-detail-hd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>模块标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-detail-bd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一些实际内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m-detail-ft<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>more<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>更多<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span></code></pre>
<p>其中 .m-detail-hd, .m-detail-bd, .m-detail-ft 为可选，视具体模块情况决定是否需要抽象为这种<br> 头，中，尾 的结构</p>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范（三）css通用约定</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------css%E8%A1%A8%E7%8E%B0%E9%80%9A%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    <content><![CDATA[<h3 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h3><ul>
<li>以组件为单位组织代码段；</li>
<li>制定一致的注释规范；</li>
<li>组件块和子组件块以及声明块之间使用一空行分隔，子组件块之间三空行分隔；</li>
<li>如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动；</li>
</ul>
<blockquote>
<p>良好的注释是非常重要的。请留出时间来描述组件（component）的工作方式、局限性和构建它们的方法。不要让你的团队其它成员 来猜测一段不通用或不明显的代码的目的。</p>
</blockquote>
<p>提示：通过配置编辑器，可以提供快捷键来输出一致认可的注释模式。</p>
<pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/* ==========================================================================
       组件块
     ============================================================================ */</span>
    <span class="token comment" spellcheck="true">/* 子组件块
     ============================================================================ */</span>
    <span class="token selector"><span class="token class">.selector</span> </span><span class="token punctuation">{</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* 子组件块
     ============================================================================ */</span>
    <span class="token selector"><span class="token class">.selector-secondary</span> </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 注释*/</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.selector-three</span> </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> span<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="Class-和-ID"><a href="#Class-和-ID" class="headerlink" title="Class 和 ID"></a>Class 和 ID</h3><ul>
<li>使用语义化、通用的命名方式；</li>
<li>使用连字符 - 作为 ID、Class 名称界定符，不要驼峰命名法和下划线；</li>
<li>避免选择器嵌套层级过多，尽量少于 3 级；</li>
<li>避免选择器和 Class、ID 叠加使用；</li>
</ul>
<blockquote>
<p>出于性能考量，在没有必要的情况下避免元素选择器叠加 Class、ID 使用。</p>
</blockquote>
<blockquote>
<p>元素选择器和 ID、Class 混合使用也违反关注分离原则。如果HTML标签修改了，就要再去修改 CSS 代码，不利于后期维护。</p>
</blockquote>
<pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/* Not recommended */</span>
    <span class="token selector"><span class="token class">.red</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.box_green</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.page</span> <span class="token class">.header</span> <span class="token class">.login</span> <span class="token id">#username</span> input </span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token selector">ul<span class="token id">#example</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* Recommended */</span>
    <span class="token selector"><span class="token id">#nav</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.box-video</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#username</span> input </span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token selector"><span class="token id">#example</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<h3 id="声明块格式"><a href="#声明块格式" class="headerlink" title="声明块格式"></a>声明块格式</h3><ul>
<li>选择器分组时，保持独立的选择器占用一行；</li>
<li>声明块的左括号 { 前添加一个空格；</li>
<li>声明块的右括号 } 应单独成行；</li>
<li>声明语句中的 : 后应添加一个空格；</li>
<li>声明语句应以分号 ; 结尾；</li>
<li>一般以逗号分隔的属性值，每个逗号后应添加一个空格；</li>
<li>rgb()、rgba()、hsl()、hsla() 或 rect() 括号内的值，逗号分隔，但逗号后不添加一个空格；</li>
<li>对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，.5 代替 0.5；-.5px 代替 -0.5px）；</li>
<li>十六进制值应该全部小写和尽量简写，例如，#fff 代替 #ffffff；</li>
<li>避免为 0 值指定单位，例如，用 margin: 0; 代替 margin: 0px;；</li>
</ul>
<pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/*  Not recommended  */</span>
    <span class="token selector"><span class="token class">.selector</span>, <span class="token class">.selector-secondary</span>, <span class="token class">.selector</span><span class="token attribute">[type=text]</span> </span><span class="token punctuation">{</span>
      <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">15</span>px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">box-shadow</span><span class="token punctuation">:</span><span class="token number">0</span>px <span class="token number">1</span>px <span class="token number">2</span>px <span class="token hexcode">#CCC</span>,inset <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">0</span> <span class="token hexcode">#FFFFFF</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* Recommended */</span>
    <span class="token selector"><span class="token class">.selector</span>,
    <span class="token class">.selector-secondary</span>,
    <span class="token class">.selector</span><span class="token attribute">[type="text"]</span> </span><span class="token punctuation">{</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token hexcode">#ccc</span>, inset <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">0</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="声明顺序"><a href="#声明顺序" class="headerlink" title="声明顺序"></a>声明顺序</h3><p>相关属性应为一组，推荐的样式编写顺序</p>
<ol>
<li>Positioning</li>
<li>Box model</li>
<li>Typographic</li>
<li>Visual</li>
</ol>
<blockquote>
<p>由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。</p>
</blockquote>
<blockquote>
<p>盒模型决定了组件的尺寸和位置，因此排在第二位。</p>
</blockquote>
<blockquote>
<p>其他属性只是影响组件的内部（inside）或者是不影响前两组属性，因此排在后面。</p>
</blockquote>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.declaration-order</span> </span><span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">/* Positioning */</span>
      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">/* Box model */</span>
      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
      <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#e5e5e5</span><span class="token punctuation">;</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
      <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">/* Typographic */</span>
      <span class="token property">font</span><span class="token punctuation">:</span> normal <span class="token number">13</span>px <span class="token string">"Helvetica Neue"</span>, sans-serif<span class="token punctuation">;</span>
      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>
      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">/* Visual */</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f5f5f5</span><span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
      <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.8</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">/* Other */</span>
      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="引号使用"><a href="#引号使用" class="headerlink" title="引号使用"></a>引号使用</h3><p>url() 、属性选择符、属性值使用双引号。参考 <a href="https://stackoverflow.com/questions/2168855/is-quoting-the-value-of-url-really-necessary" target="_blank" rel="noopener">Is quoting the value of url() really necessary?</a></p>
<pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/* Not recommended */</span>
    <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url(//www.google.com/css/maia.css)</span><span class="token punctuation">;</span></span>
    <span class="token selector">html </span><span class="token punctuation">{</span>
      <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'open sans'</span>, arial, sans-serif<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* Recommended */</span>
    <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url("//www.google.com/css/maia.css")</span><span class="token punctuation">;</span></span>
    <span class="token selector">html </span><span class="token punctuation">{</span>
      <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"open sans"</span>, arial, sans-serif<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.selector</span><span class="token attribute">[type="text"]</span> </span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="媒体查询（Media-query）的位置"><a href="#媒体查询（Media-query）的位置" class="headerlink" title="媒体查询（Media query）的位置"></a>媒体查询（Media query）的位置</h3><blockquote>
<p>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。</p>
</blockquote>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.element-avatar</span> </span><span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.element-selected</span> </span><span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span>
    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
      <span class="token selector"><span class="token class">.element</span> </span><span class="token punctuation">{</span> <span class="token number">...</span><span class="token punctuation">}</span>
      <span class="token selector"><span class="token class">.element-avatar</span> </span><span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span>
      <span class="token selector"><span class="token class">.element-selected</span> </span><span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="不要使用-import"><a href="#不要使用-import" class="headerlink" title="不要使用 @import"></a>不要使用 @import</h3><blockquote>
<p>与 <link> 相比，@import 要慢很多，不光增加额外的请求数，还会导致不可预料的问题。<br>一般情况下，在页面中只允许使用 <link> 标签来引用CSS文件;<br>替代办法：</p>
</blockquote>
<ul>
<li>使用多个 元素；</li>
<li>通过 Sass 或 Less 类似的 CSS 预处理器将多个 CSS 文件编译为一个文件；</li>
<li>其他 CSS 文件合并工具；</li>
</ul>
<p>参考 <a href="https://www.stevesouders.com/blog/2009/04/09/dont-use-import/" target="_blank" rel="noopener">don’t use @import；</a></p>
<p>链接的样式顺序：</p>
<blockquote>
<p>a:link -&gt; a:visited -&gt; a:hover -&gt; a:active（LoVeHAte）<br>无需添加浏览器厂商前缀</p>
</blockquote>
<p>使用 Autoprefixer 自动添加浏览器厂商前缀，编写 CSS 时不需要添加浏览器前缀，直接使用标准的 CSS 编写。</p>
<p>Autoprefixer 通过 <a href="https://caniuse.com/" target="_blank" rel="noopener">Can I use</a>，按兼容的要求，对相应的 CSS 代码添加浏览器厂商前缀。</p>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范(一)基本原则</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<blockquote>
<p><strong>目标</strong>：<strong>代码一致性和最佳实践</strong>。通过代码风格的一致性，<strong>降低维护代码的成本以及改善多人协作的效率</strong>。同时遵守最佳实践，确保页面性能得到最佳优化和高效的代码。</p>
</blockquote>
<blockquote>
<p>此手册是在开发中积累下来的经验和参考其它规范/指南制定的，它<strong>只是起指导作用</strong>，除个别条目强制之外，大多数为非强制约束，开发者可根据自己的实际情况自行决定是否要遵守该指南只是保证大方向一致性和最佳实践的阶段性总结，<strong>不是最后结论，它会随着时间而变化</strong>。</p>
</blockquote>
<h2 id="一、基本原则"><a href="#一、基本原则" class="headerlink" title="一、基本原则"></a>一、基本原则</h2><h4 id="结构、样式、行为分离"><a href="#结构、样式、行为分离" class="headerlink" title="结构、样式、行为分离"></a>结构、样式、行为分离</h4><p>尽量确保文档和模板只包含 HTML 结构，样式都放到样式表里，行为都放到脚本里。</p>
<h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>统一两个空格缩进（总之缩进统一即可），不要使用 Tab 或者 Tab、空格混搭。</p>
<h4 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h4><p>使用不带 BOM 的 UTF-8 编码。</p>
<ul>
<li>在 HTML中指定编码 <meta charset="utf-8"> ；</li>
<li>无需使用 @charset 指定样式表的编码，它默认为 UTF-8 （参考 @charset）；</li>
</ul>
<h4 id="一律使用小写字母"><a href="#一律使用小写字母" class="headerlink" title="一律使用小写字母"></a>一律使用小写字母</h4><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- Recommended --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- Not recommended --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token attr-name">HREF</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>A</span><span class="token punctuation">></span></span>

    /* Recommended */
    color: #e5e5e5;
    /* Not recommended */
    color: #E5E5E5;</code></pre>
<h4 id="省略外链资源-URL-协议部分"><a href="#省略外链资源-URL-协议部分" class="headerlink" title="省略外链资源 URL 协议部分"></a>省略外链资源 URL 协议部分</h4><p>省略外链资源（图片及其它媒体资源）URL 中的 http / https 协议，<strong>使 URL 成为相对地址</strong>，避免 Mixed Content 问题，减小文件字节数。</p>
<h5 id="其它协议（ftp-等）的-URL-不省略。"><a href="#其它协议（ftp-等）的-URL-不省略。" class="headerlink" title="其它协议（ftp 等）的 URL 不省略。"></a>其它协议（ftp 等）的 URL 不省略。</h5><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- Recommended --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//www.google.com/js/gweb/analytics/autotrack.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- Not recommended --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.google.com/js/gweb/analytics/autotrack.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/* Recommended */</span>
    <span class="token selector"><span class="token class">.example</span> </span><span class="token punctuation">{</span>
      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(//www.google.com/images/example)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* Not recommended */</span>
    <span class="token selector"><span class="token class">.example</span> </span><span class="token punctuation">{</span>
      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(http://www.google.com/images/example)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h4 id="统一注释"><a href="#统一注释" class="headerlink" title="统一注释"></a>统一注释</h4><p>通过配置编辑器，可以提供快捷键来输出一致认可的注释模式。</p>
<h5 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h5><ul>
<li>模块注释<pre class=" language-html"><code class="language-html">      <span class="token comment" spellcheck="true">&lt;!-- 文章列表列表模块 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      ...
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
</li>
<li>区块注释<pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!--
  @name: Drop Down Menu
  @description: Style of top bar drop down menu.
  @author: Ashu(Aaaaaashu@gmail.com)
  --></span></code></pre>
</li>
<li>CSS 注释</li>
</ul>
<p>组件块和子组件块以及声明块之间使用一空行分隔，子组件块之间三空行分隔；</p>
<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* ==========================================================================
   组件块
 ============================================================================ */</span>

<span class="token comment" spellcheck="true">/* 子组件块
 ============================================================================ */</span>
<span class="token selector"><span class="token class">.selector</span> </span><span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token comment" spellcheck="true">/* 子组件块
 ============================================================================ */</span>
<span class="token selector"><span class="token class">.selector-secondary</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 注释*/</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.selector-three</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> span<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h5 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h5><ul>
<li>单行注释</li>
</ul>
<p>必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。</p>
<ul>
<li>多行注释</li>
</ul>
<p>避免使用 /<em>…</em>/ 这样的多行注释。有多行注释内容时，使用多个单行注释。</p>
<ul>
<li><p>函数/方法注释</p>
<p>  函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识；<br>  参数和返回值注释必须包含类型信息和说明；<br>  当函数是内部函数，外部不可访问时，可以使用 @inner 标识；</p>
<pre class=" language-javaScript"><code class="language-javaScript">/**
* 函数描述
*
* @param {string} p1 参数1的说明
* @param {string} p2 参数2的说明，比较长
*     那就换行了.
* @param {number=} p3 参数3的说明（可选）
* @return {Object} 返回值描述
*/
function foo(p1, p2, p3) {
  var p3 = p3 || 10;
  return {
      p1: p1,
      p2: p2,
      p3: p3
  };
}</code></pre>
</li>
<li><p>文件注释</p>
</li>
</ul>
<p>文件注释用于告诉不熟悉这段代码的读者这个文件中包含哪些东西。 应该提供文件的大体内容, 它的作者, 依赖关系和兼容性信息。如下:</p>
<pre class=" language-javaScript"><code class="language-javaScript">/**
 * @fileoverview Description of file, its uses and information
 * about its dependencies.
 * @author user@meizu.com (Firstname Lastname)
 * Copyright 2015 Meizu Inc. All Rights Reserved.
 */</code></pre>
<ul>
<li><p>代码验证</p>
<p>  使用 W3C HTML Validator 来验证你的HTML代码有效性；<br>  使用 W3C CSS Validator 来验证你的CSS代码有效性；</p>
</li>
</ul>
<blockquote>
<p><strong>代码验证不是最终目的</strong>，真的目的在于让开发者在经过多次的这种验证过程后，能够深刻理解到怎样的语法或写法是非标准和不推荐的，即使在某些场景下被迫要使用非标准写法，也可以做到心中有数。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>高阶函数--回调</title>
    <url>/s2/javaScript/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%88%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%EF%BC%89/</url>
    <content><![CDATA[<h3 id="回调函数（高阶函数）"><a href="#回调函数（高阶函数）" class="headerlink" title="回调函数（高阶函数）"></a>回调函数（高阶函数）</h3><a id="more"></a>
<blockquote>
<p>在Javascript中，函数是第一类对象，这意味着函数可以像对象一样按照第一类管理被使用。既然函数实际上是对象：它们能被“存储”在变量中，能作为函数参数被传递，能在函数中被创建，能从函数中返回。</p>
</blockquote>
<p>因为函数是第一类对象，我们可以在Javascript使用回调函数。回调函数可能是在Javascript中使用最多的函数式编程技巧，虽然在字面上看起来它们一直一小段Javascript代码，但是对于许多开发者来说它仍然是一个谜。</p>
<blockquote>
<p>回调函数是从一个叫函数式编程的编程范式中衍生出来的概念。简单来说，函数式编程就是使用函数作为变量。函数式编程过去 - 甚至是现在，依旧没有被广泛使用 - 它过去常被看做是那些受过特许训练的，大师级别的程序员的秘传技巧。</p>
</blockquote>
<p>幸运的是，函数是编程的技巧现在已经被充分阐明因此像我和你这样的普通人也能去轻松使用它。<strong><em>函数式编程中的一个主要技巧就是回调函数</em></strong>。在后面内容中你会发现实现回调函数其实就和普通函数传参一样简单。这个技巧是如此的简单以致于我常常感到很奇怪为什么它经常被包含在讲述Javascript高级技巧的章节中。</p>
<h3 id="什么是回调或者高阶函数"><a href="#什么是回调或者高阶函数" class="headerlink" title="什么是回调或者高阶函数"></a>什么是回调或者高阶函数</h3><blockquote>
<p> 一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数（在这里我们把另一个函数叫做“otherFunction”）的函数，回调函数在otherFunction中被调用。一个回调函数本质上是一种编程模式（为一个常见问题创建的解决方案），因此，使用回调函数也叫做回调模式。</p>
</blockquote>
<p>下面是一个在jQuery中使用回调函数简单普遍的例子：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">/</span>注意到click方法中是一个函数而不是一个变量
<span class="token comment" spellcheck="true">//它就是回调函数</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Btn 1 Clicked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   </code></pre>
<p>　<br>正如你在前面的例子中看到的，我们将一个函数作为参数传递给了click方法。click方法会调用（或者执行）我们传递给它的函数。这是Javascript中回调函数的典型用法，它在jQuery中广泛被使用。</p>
<p>下面是另一个Javascript中典型的回调函数的例子：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token string">"Stacy"</span><span class="token punctuation">,</span> <span class="token string">"Andy"</span><span class="token punctuation">,</span> <span class="token string">"Rick"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

friends<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>eachName<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">". "</span> <span class="token operator">+</span> eachName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. Mike, 2. Stacy, 3. Andy, 4. Rick</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>再一次，注意到我们讲一个匿名函数（没有名字的函数）作为参数传递给了forEach方法。</p>
<p>到目前为止，我们将匿名函数作为参数传递给了另一个函数或方法。在我们看更多的实际例子和编写我们自己的回调函数之前，先来理解回调函数是怎样运作的。</p>
<h3 id="回调函数是怎样运作的？"><a href="#回调函数是怎样运作的？" class="headerlink" title="回调函数是怎样运作的？"></a>回调函数是怎样运作的？</h3><blockquote>
<p>因为函数在Javascript中是第一类对象，我们像对待对象一样对待函数，因此我们能像传递变量一样传递函数，在函数中返回函数，在其他函数中使用函数。</p>
</blockquote>
<p>当我们将一个回调函数作为参数传递给另一个函数时，我们仅仅传递了函数定义。我们并没有在参数中执行函数。我们并不传递像我们平时执行函数一样带有一对执行小括号()的函数。</p>
<p>需要注意的很重要的一点是回调函数并不会马上被执行。它会在包含它的函数内的某个特定时间点被“回调”（就像它的名字一样）。因此，即使第一个jQuery的例子如下所示：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token string">"Stacy"</span><span class="token punctuation">,</span> <span class="token string">"Andy"</span><span class="token punctuation">,</span> <span class="token string">"Rick"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

friends<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>eachName<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">". "</span> <span class="token operator">+</span> eachName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. Mike, 2. Stacy, 3. Andy, 4. Rick</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这个匿名函数稍后会在函数体内被调用。即使有名字，它依然在包含它的函数内通过arguments对象获取。</p>
<h3 id="回调函数是闭包"><a href="#回调函数是闭包" class="headerlink" title="回调函数是闭包"></a>回调函数是闭包</h3><blockquote>
<p>当我们将一个回调函数作为变量传递给另一个函数时，这个回调函数在包含它的函数内的某一点执行，就好像这个回调函数是在包含它的函数中定义的一样。这意味着回调函数本质上是一个闭包。</p>
</blockquote>
<p>正如我们所知，闭包能够进入包含它的函数的作用域，因此回调函数能获取包含它的函数中的变量，以及全局作用域中的变量。</p>
<h3 id="实现回调函数的基本原理"><a href="#实现回调函数的基本原理" class="headerlink" title="实现回调函数的基本原理"></a>实现回调函数的基本原理</h3><blockquote>
<p>回调函数并不复杂，但是在我们开始创建并使用毁掉函数之前，我们应该熟悉几个实现回调函数的基本原理。</p>
</blockquote>
<h5 id="使用命名或匿名函数作为回调"><a href="#使用命名或匿名函数作为回调" class="headerlink" title="使用命名或匿名函数作为回调"></a>使用命名或匿名函数作为回调</h5><p>在前面的jQuery例子以及forEach的例子中，我们使用了再参数位置定义的匿名函数作为回调函数。这是在回调函数使用中的一种普遍的魔术。另一种常见的模式是定义一个命名函数并将函数名作为变量传递给函数。比如下面的例子：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局变量</span>
<span class="token keyword">var</span> allUserData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//普通的logStuff函数，将内容打印到控制台    </span>
<span class="token keyword">function</span> logStuff <span class="token punctuation">(</span>userData<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> userData <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> userData <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> userData<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> userData<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//一个接收两个参数的函数，后面一个是回调函数    </span>
<span class="token keyword">function</span> getInput <span class="token punctuation">(</span>options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    allUserData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//当我们调用getInput函数时，我们将logStuff作为一个参数传递给它    </span>
<span class="token comment" spellcheck="true">//因此logStuff将会在getInput函数内被回调（或者执行）    </span>
<span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Rich"</span><span class="token punctuation">,</span>speciality<span class="token punctuation">:</span><span class="token string">"Javascript"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> logStuff<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//name:Rich</span>
<span class="token comment" spellcheck="true">//speciality:Javascript</span></code></pre>
<p>　　</p>
<h4 id="传递参数给回调函数"><a href="#传递参数给回调函数" class="headerlink" title="传递参数给回调函数"></a>传递参数给回调函数</h4><p>既然回调函数在执行时仅仅是一个普通函数，我们就能给它传递参数。我们能够传递任何包含它的函数的属性（或者全局书讯给）作为回调函数的参数。在前面的例子中，我们将options作为一个参数传递给了毁掉函数。现在我们传递一个全局变量和一个本地变量：</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token comment" spellcheck="true">//全局变量</span>
<span class="token keyword">var</span> generalLastName <span class="token operator">=</span> <span class="token string">"Cliton"</span>；

<span class="token keyword">function</span> getInput <span class="token punctuation">(</span>options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    allUserData<span class="token punctuation">.</span>push <span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//将全局变量generalLastName传递给回调函数</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>generalLastName<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>　　</p>
<h4 id="在执行之前确保回调函数是一个函数"><a href="#在执行之前确保回调函数是一个函数" class="headerlink" title="在执行之前确保回调函数是一个函数"></a>在执行之前确保回调函数是一个函数</h4><blockquote>
<p>在调用之前检查作为参数被传递的回调函数确实是一个函数，这样的做法是明智的。同时，这也是一个实现条件回调函数的最佳时间。</p>
</blockquote>
<p>我们来重构上面例子中的getInput函数来确保检查是恰当的。</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">getInput</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    allUserData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>   

    <span class="token comment" spellcheck="true">//确保callback是一个函数   </span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//调用它，既然我们已经确定了它是可调用的</span>
          <span class="token function">callback</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>　　</p>
<blockquote>
<p>如果没有适当的检查，如果getInput的参数中没有一个回调函数或者传递的回调函数事实上并不是一个函数，我们的代码将会导致运行错误。<br>使用this对象的方法作为回调函数时的问题</p>
</blockquote>
<p>当回调函数是一个this对象的方法时，我们必须改变执行回调函数的方法来保证this对象的上下文。否则如果回调函数被传递给一个全局函数，this对象要么指向全局window对象（在浏览器中）。要么指向包含方法的对象。<br>我们在下面的代码中说明：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个拥有一些属性和一个方法的对象 //我们接着将会把方法作为回调函数传递给另一个函数</span>

<span class="token keyword">var</span> clientData <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token number">094545</span><span class="token punctuation">,</span>
    fullName <span class="token string">"Not Set"</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//setUsrName是一个在clientData对象中的方法</span>
    setUserName<span class="token punctuation">:</span> fucntion <span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//这指向了对象中的fullName属性</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getUserInput</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//在这做些什么来确认firstName/lastName</span>

    <span class="token comment" spellcheck="true">//现在存储names</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

　　</code></pre>
<p>在下面你的代码例子中，当clientData.setUsername被执行时，this.fullName并没有设置clientData对象中的fullName属性。相反，它将设置window对象中的fullName属性，因为getUserInput是一个全局函数。这是因为全局函数中的this对象指向window对象。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">getUserInput</span><span class="token punctuation">(</span><span class="token string">"Barack"</span><span class="token punctuation">,</span><span class="token string">"Obama"</span><span class="token punctuation">,</span>clientData<span class="token punctuation">.</span>setUserName<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clientData<span class="token punctuation">,</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Not Set</span>

<span class="token comment" spellcheck="true">//fullName属性将在window对象中被初始化    </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Barack Obama</span></code></pre>
<p>　　</p>
<h4 id="使用Call和Apply函数来保存this"><a href="#使用Call和Apply函数来保存this" class="headerlink" title="使用Call和Apply函数来保存this"></a>使用Call和Apply函数来保存this</h4><blockquote>
<p>我们可以使用Call或者Apply函数来修复上面你的问题。到目前为止，我们知道了每个Javascript中的函数都有两个方法:Call 和 Apply。这些方法被用来设置函数内部的this对象以及给此函数传递变量。</p>
</blockquote>
<blockquote>
<p>call接收的第一个参数为被用来在函数内部当做this的对象，传递给函数的参数被挨个传递（当然使用逗号分开）。Apply函数的第一个参数也是在函数内部作为this的对象，然而最后一个参数确是传递给函数的值的数组。</p>
</blockquote>
<p>ring起来很复杂，那么我们来看看使用Apply和Call有多么的简单。为了修复前面例子的问题，我将在下面你的例子中使用Apply函数：</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token comment" spellcheck="true">//注意到我们增加了新的参数作为回调对象，叫做“callbackObj”</span>
<span class="token keyword">function</span> <span class="token function">getUserInput</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> callback<span class="token punctuation">.</span> callbackObj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//在这里做些什么来确认名字</span>

        callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>callbackObj<span class="token punctuation">,</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>　　</p>
<p>使用Apply函数正确设置了this对象，我们现在正确的执行了callback并在clientData对象中正确设置了fullName属性：</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token comment" spellcheck="true">//我们将clientData.setUserName方法和clientData对象作为参数，clientData对象会被Apply方法使用来设置this对象    </span>
<span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token string">"Barack"</span><span class="token punctuation">,</span> <span class="token string">"Obama"</span><span class="token punctuation">,</span> clientData<span class="token punctuation">.</span>setUserName<span class="token punctuation">,</span> clientData<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//clientData中的fullName属性被正确的设置</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clientUser<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Barack Obama</span></code></pre>
<p>　　</p>
<p>我们也可以使用Call函数，但是在这个例子中我们使用Apply函数。<br>允许多重回调函数</p>
<p>我们可以将不止一个的回调函数作为参数传递给一个函数，就像我们能够传递不止一个变量一样。这里有一个关于jQuery中AJAX的例子：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">successCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//在发送之前做点什么</span>
<span class="token punctuation">}</span>    

<span class="token keyword">function</span> <span class="token function">successCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//在信息被成功接收之后做点什么</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">completeCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//在完成之后做点什么</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">errorCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//当错误发生时做点什么</span>
<span class="token punctuation">}</span>

$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token punctuation">:</span><span class="token string">"http://fiddle.jshell.net/favicon.png"</span><span class="token punctuation">,</span>
    success<span class="token punctuation">:</span>successCallback<span class="token punctuation">,</span>
    complete<span class="token punctuation">:</span>completeCallback<span class="token punctuation">,</span>
    error<span class="token punctuation">:</span>errorCallback

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>　　</p>
<h3 id="“回调地狱”问题以及解决方案"><a href="#“回调地狱”问题以及解决方案" class="headerlink" title="“回调地狱”问题以及解决方案"></a>“回调地狱”问题以及解决方案</h3><blockquote>
<p>在执行异步代码时，无论以什么顺序简单的执行代码，经常情况会变成许多层级的回调函数堆积以致代码变成下面的情形。这些杂乱无章的代码叫做回调地狱因为回调太多而使看懂代码变得非常困难。</p>
</blockquote>
<p>我从node-mongodb-native，一个适用于Node.js的MongoDB驱动中拿来了一个例子。这段位于下方的代码将会充分说明回调地狱：</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token keyword">var</span> p_client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Db</span><span class="token punctuation">(</span><span class="token string">'integration_tests_20'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'pk'</span><span class="token punctuation">:</span>CustomPKFactory<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   p_client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> p_client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       p_client<span class="token punctuation">.</span><span class="token function">dropDatabase</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           p_client<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">'test_custom_key'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               collection<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                   collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'_id'</span><span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">ObjectID</span><span class="token punctuation">(</span><span class="token string">"aaaaaaaaaaaa"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       cursor<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           test<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

                           <span class="token comment" spellcheck="true">// Let's close the db</span>
                           p_client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>　　</p>
<p>你应该不想在你的代码中遇到这样的问题，当你当你遇到了-你将会是不是的遇到这种情况-这里有关于这个问题的两种解决方案。</p>
<ol>
<li>给你的函数命名并传递它们的名字作为回调函数，而不是主函数的参数中定义匿名函数。</li>
<li>模块化L将你的代码分隔到模块中，这样你就可以到处一块代码来完成特定的工作。然后你可以在你的巨型应用中导入模块。</li>
</ol>
<h3 id="创建你自己的回调函数"><a href="#创建你自己的回调函数" class="headerlink" title="创建你自己的回调函数"></a>创建你自己的回调函数</h3><p>既然你已经完全理解了关于Javascript中回调函数的一切（我认为你已经理解了，如果没有那么快速的重读以便），你看到了使用回调函数是如此的简单而强大，你应该查看你的代码看看有没有能使用回调函数的地方。回调函数将在以下几个方面帮助你： </p>
<ul>
<li>避免重复代码（DRY-不要重复你自己） - 在你拥有更多多功能函数的地方实现更好的抽象（依然能保持所有功能） - 让代码具有更好的可维护性 </li>
<li>使代码更容易阅读 </li>
<li>编写更多特定功能的函数</li>
</ul>
<p>创建你的回调函数非常简单。在下面的例子中，我将创建一个函数完成以下工作：读取用户信息，用数据创建一首通用的诗，并且欢迎用户。这本来是个非常复杂的函数因为它包含很多if/else语句并且，它将在调用那些用户数据需要的功能方面有诸多限制和不兼容性。</p>
<p>相反，我用回调函数实现了添加功能，这样一来获取用户信息的主函数便可以通过简单的将用户全名和性别作为参数传递给回调函数并执行来完成任何任务。</p>
<p>简单来讲，getUserInput函数是多功能的：它能执行具有无种功能的回调函数。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//首先，创建通用诗的生成函数；它将作为下面的getUserInput函数的回调函数</span>

    <span class="token keyword">function</span> <span class="token function">genericPoemMaker</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is finer than fine wine."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Altruistic and noble for the modern time."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Always admirably adorned with the latest style."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"A "</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">" of unfortunate tragedies who still manages a perpetual smile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//callback，参数的最后一项，将会是我们在上面定义的genericPoemMaker函数</span>
        <span class="token keyword">function</span> <span class="token function">getUserInput</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> fullName <span class="token operator">=</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// Make sure the callback is a function</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Execute the callback function and pass the parameters to it</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>fullName<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>   </code></pre>
<p>　　</p>
<p>调用getUserInput函数并将genericPoemMaker函数作为回调函数： </p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token function">getUserInput</span><span class="token punctuation">(</span><span class="token string">"Michael"</span><span class="token punctuation">,</span> <span class="token string">"Fassbender"</span><span class="token punctuation">,</span> <span class="token string">"Man"</span><span class="token punctuation">,</span> genericPoemMaker<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment" spellcheck="true">// 输出 </span><span class="token comment" spellcheck="true">/* Michael Fassbender is finer than fine wine. Altruistic and noble for the modern time. Always admirably adorned with the latest style. A Man of unfortunate tragedies who still manages a perpetual smile. */</span></code></pre>
<p>因为getUserInput函数仅仅只负责提取数据，我们可以把任意回调函数传递给它。例如，我们可以传递一个greetUser函数：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">greetUser</span><span class="token punctuation">(</span>customerName<span class="token punctuation">,</span> sex<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
   <span class="token keyword">var</span> salutation  <span class="token operator">=</span> sex <span class="token operator">&amp;&amp;</span> sex <span class="token operator">===</span> <span class="token string">"Man"</span> <span class="token operator">?</span> <span class="token string">"Mr."</span> <span class="token punctuation">:</span> <span class="token string">"Ms."</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> salutation <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> customerName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 将greetUser作为一个回调函数</span>
<span class="token function">getUserInput</span><span class="token punctuation">(</span><span class="token string">"Bill"</span><span class="token punctuation">,</span> <span class="token string">"Gates"</span><span class="token punctuation">,</span> <span class="token string">"Man"</span><span class="token punctuation">,</span> greetUser<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 这里是输出</span>
Hello<span class="token punctuation">,</span> Mr<span class="token punctuation">.</span> Bill Gates</code></pre>
<p>　　</p>
<blockquote>
<p>我们调用了完全相同的getUserInput函数，但是这次完成了一个完全不同的任务。</p>
</blockquote>
<p>正如你所见，回调函数很神奇。即使前面的例子相对简单，想象一下能节省多少工作量，你的代码将会变得更加的抽象，这一切只需要你开始使用毁掉函数。大胆的去使用吧。</p>
<p>在Javascript编程中回调函数经常以几种方式被使用，尤其是在现代web应用开发以及库和框架中：</p>
<blockquote>
<ol>
<li>异步调用（例如读取文件，进行HTTP请求，等等）</li>
<li>时间监听器/处理器</li>
<li>setTimeout和setInterval方法</li>
<li>一般情况：精简代码</li>
</ol>
</blockquote>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>Javascript回调函数非常美妙且功能强大，它们为你的web应用和代码提供了诸多好处。你应该在有需求时使用它；或者为了代码的抽象性，可维护性以及可读性而使用回调函数来重构你的代码。</p>
]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
      <tags>
        <tag>行为</tag>
      </tags>
  </entry>
  <entry>
    <title>前端食用规范(九)JavaScript行为之通用约定</title>
    <url>/s2/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/%E5%89%8D%E7%AB%AF%E9%A3%9F%E7%94%A8%E8%A7%84%E8%8C%83------%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="一、click-的-300ms-延迟响应"><a href="#一、click-的-300ms-延迟响应" class="headerlink" title="一、click 的 300ms 延迟响应"></a>一、click 的 300ms 延迟响应</h3><p>click 的 300ms 延迟是由双击缩放(double tap to zoom)所导致的，由于用户可以进行双击缩放或者双击滚动的操作，当用户一次点击屏幕之后，浏览器并不能立刻判断用户是确实要打开这个链接，还是想要进行双击操作。因此，移动端浏览器就等待 300 毫秒，以判断用户是否再次点击了屏幕。</p>
<p>随着响应式网页逐渐增多，用户使用双击缩放机会减少，这 300ms 的延迟就更不可接受了。浏览器开发商也随之提供相应的解决方案。这些方案在5 Ways to Prevent the 300ms Click Delay on Mobile Devices 中，被提及的包括「禁用缩放」和「width=device-width」等方案，但这些方案并不完美，需要针对某些版本浏览器，又或仅在 Android 的浏览器上使用。</p>
<p>所以这时候就需要一个更简单通用的解决方案，其中 FT Labs 专门为解决移动端浏览器 300 毫秒点击延迟问题所开发的一个轻量级的库 FastClick 就是很好的选择。FastClick 在检测到 touchend 事件的时候，会通过 DOM 自定义事件立即触发一个模拟 click 事件，并把浏览器在 300 毫秒之后真正触发的 click 事件阻止掉。</p>
<p>FastClick 的使用方法非常简单，在 window load 事件之后，在 <body> 上调用FastClick.attach() 即可。</body></p>
<pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FastClick<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span> document<span class="token punctuation">.</span>body <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="二、快速回弹滚动"><a href="#二、快速回弹滚动" class="headerlink" title="二、快速回弹滚动"></a>二、快速回弹滚动</h3><p>快速回弹滚动在手机浏览器上的发展历史：</p>
<ol>
<li>早期的时候，移动端的浏览器都不支持非 body 元素的滚动条，所以一般都借助 iScroll;</li>
<li>Android 3.0 / iOS 解决了非 body 元素的滚动问题，但滚动条不可见，同时 iOS 上只能通过2个手指进行滚动；</li>
<li>Android 4.0 解决了滚动条不可见及增加了快速回弹滚动效果，不过随后这个特性又被移除；</li>
<li>iOS从5.0开始解决了滚动条不可见及增加了快速回弹滚动效果</li>
</ol>
<p>如果想要为某个元素拥有 Native 般的滚动效果，可以这样操作：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>element <span class="token punctuation">{</span>
    overflow<span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* auto | scroll */</span>
    <span class="token operator">-</span>webkit<span class="token operator">-</span>overflow<span class="token operator">-</span>scrolling<span class="token punctuation">:</span> touch<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>除了 iScroll 之外，还有一个更加强大的滚动插件 Swiper，支持 3D 和内置滚动条等。</p>
<h3 id="三、设备检测"><a href="#三、设备检测" class="headerlink" title="三、设备检测"></a>三、设备检测</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 这段代码引用自：https://github.com/binnng/device.js</span>
<span class="token keyword">var</span> WIN <span class="token operator">=</span> window<span class="token punctuation">;</span>
<span class="token keyword">var</span> LOC <span class="token operator">=</span> WIN<span class="token punctuation">[</span><span class="token string">"location"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> NA <span class="token operator">=</span> WIN<span class="token punctuation">.</span>navigator<span class="token punctuation">;</span>
<span class="token keyword">var</span> UA <span class="token operator">=</span> NA<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> needle<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>UA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> IsTouch <span class="token operator">=</span> <span class="token string">"ontouchend"</span> <span class="token keyword">in</span> WIN<span class="token punctuation">;</span>
<span class="token keyword">var</span> IsAndroid <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/android|htc/</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token regex">/linux/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>NA<span class="token punctuation">.</span>platform <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsIPad <span class="token operator">=</span> <span class="token operator">!</span>IsAndroid <span class="token operator">&amp;&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/ipad/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsIPhone <span class="token operator">=</span> <span class="token operator">!</span>IsAndroid <span class="token operator">&amp;&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/ipod|iphone/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsIOS <span class="token operator">=</span> IsIPad <span class="token operator">||</span> IsIPhone<span class="token punctuation">;</span>
<span class="token keyword">var</span> IsWinPhone <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/windows phone/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsWebapp <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>NA<span class="token punctuation">[</span><span class="token string">"standalone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsXiaoMi <span class="token operator">=</span> IsAndroid <span class="token operator">&amp;&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/mi\s+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsUC <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/ucbrowser/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsWeixin <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/micromessenger/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsBaiduBrowser <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/baidubrowser/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsChrome <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>WIN<span class="token punctuation">[</span><span class="token string">"chrome"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsBaiduBox <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/baiduboxapp/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsPC <span class="token operator">=</span> <span class="token operator">!</span>IsAndroid <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>IsIOS <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>IsWinPhone<span class="token punctuation">;</span>
<span class="token keyword">var</span> IsHTC <span class="token operator">=</span> IsAndroid <span class="token operator">&amp;&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/htc\s+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> IsBaiduWallet <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/baiduwallet/</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="四、获取滚动条值"><a href="#四、获取滚动条值" class="headerlink" title="四、获取滚动条值"></a>四、获取滚动条值</h3><p>PC 端滚动条的值是通过 document.scrollTop 和 document.scrollLeft 获得，但在 iOS 中并没有滚动条的概念，所以仅能通过 windows.scroll 获取，同时也能兼容 Android 。</p>
<pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>scrollY
window<span class="token punctuation">.</span>scrollX</code></pre>
<h3 id="五、清除输入框内阴影"><a href="#五、清除输入框内阴影" class="headerlink" title="五、清除输入框内阴影"></a>五、清除输入框内阴影</h3><p>在 iOS 上，输入框默认有内部阴影，但无法使用 box-shadow 来清除，如果不需要阴影，可以这样操作：</p>
<pre class=" language-javascript"><code class="language-javascript">input<span class="token punctuation">,</span>
textarea <span class="token punctuation">{</span>
    border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 方法1 */</span>
    <span class="token operator">-</span>webkit<span class="token operator">-</span>appearance<span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 方法2 */</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="六、Meta-相关"><a href="#六、Meta-相关" class="headerlink" title="六、Meta 相关"></a>六、Meta 相关</h3><p>页面窗口自动调整到设备宽度，并禁止用户缩放页面</p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre>
<h3 id="七、电话号码识别"><a href="#七、电话号码识别" class="headerlink" title="七、电话号码识别"></a>七、电话号码识别</h3><p>iOS Safari ( Android 或其他浏览器不会) 会自动识别看起来像电话号码的数字，将其处理为电话号码链接，比如：</p>
<ol>
<li>7位数字，形如：1234567</li>
<li>带括号及加号的数字，形如：(+86)123456789</li>
<li>双连接线的数字，形如：00-00-00111</li>
<li>11位数字，形如：13800138000</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript">   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 关闭电话号码识别： <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"format-detection"</span> content<span class="token operator">=</span><span class="token string">"telephone=no"</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启电话功能： <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"tel:123456"</span><span class="token operator">></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启短信功能： <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"sms:123456"</span><span class="token operator">></span><span class="token number">123456</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre>
<h3 id="八、邮箱地址的识别"><a href="#八、邮箱地址的识别" class="headerlink" title="八、邮箱地址的识别"></a>八、邮箱地址的识别</h3><p>在 Android （ iOS 不会）上，浏览器会自动识别看起来像邮箱地址的字符串，不论有你没有加上邮箱链接，当你在这个字符串上长按，会弹出发邮件的提示。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 关闭邮箱地址识别： <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"format-detection"</span> content<span class="token operator">=</span><span class="token string">"email=no"</span> <span class="token operator">/</span><span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启邮件发送： <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>a mailto<span class="token punctuation">:</span><span class="token operator">></span>mobile@gmail<span class="token punctuation">.</span>com"<span class="token operator">></span>mobile@gmail<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre>
<h3 id="九、指定-iOS-的-safari-顶端状态条的样式"><a href="#九、指定-iOS-的-safari-顶端状态条的样式" class="headerlink" title="九、指定 iOS 的 safari 顶端状态条的样式"></a>九、指定 iOS 的 safari 顶端状态条的样式</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"apple-mobile-web-app-status-bar-style"</span> content<span class="token operator">=</span><span class="token string">"black"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 可选<span class="token keyword">default</span>、black、black<span class="token operator">-</span>translucent <span class="token operator">--</span><span class="token operator">></span></code></pre>
<h3 id="十、点透现象"><a href="#十、点透现象" class="headerlink" title="十、点透现象"></a>十、点透现象</h3><p>待续……</p>
]]></content>
      <categories>
        <category>前端规范</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>css定位</title>
    <url>/s2/css/%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h3 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h3><a id="more"></a>
<blockquote>
<p>static：默认值，没有定位</p>
</blockquote>
<blockquote>
<p>relative：相对定位</p>
</blockquote>
<blockquote>
<p>absolute：绝对定位</p>
</blockquote>
<blockquote>
<p>fixed：固定定位</p>
</blockquote>
<h4 id="2-relative属性值"><a href="#2-relative属性值" class="headerlink" title="2 relative属性值"></a>2 relative属性值</h4><ul>
<li>相对自身原来位置进行偏移<blockquote>
<p>偏移设置：top、left、right、bottom</p>
</blockquote>
</li>
</ul>
<ol>
<li>设置相对定位的盒子会相对它原来的位置，通过指定偏移，到达新的位置</li>
<li>设置相对定位的盒子仍在标准文档流中，它对父级盒子和相邻的盒子都没有任何影响</li>
<li>设置相对定位的盒子原来的位置会被保留下来</li>
</ol>
<h3 id="3-absolute属性值"><a href="#3-absolute属性值" class="headerlink" title="3 absolute属性值"></a>3 absolute属性值</h3><blockquote>
<p>偏移设置： left、right、top、bottom </p>
</blockquote>
<ol>
<li>使用了绝对定位的元素以它最近的一个“已经定位”的“祖先元素” 为基准进行偏移</li>
<li>如果没有已经定位的祖先元素，会以浏览器窗口为基准进行定位</li>
<li>绝对定位的元素从标准文档流中脱离，这意味着它们对其他元素的定位不会造成影响</li>
<li>元素位置发生偏移后，它原来的位置不会被保留下来</li>
</ol>
<ul>
<li>设置了绝对定位但没有设置偏移量的元素将保持在原来的位置。</li>
<li>在网页制作中可以用于需要使某个元素脱离标准流，而仍然希望它保持在原来的位置的情况</li>
</ul>
<h3 id="fixed属性值"><a href="#fixed属性值" class="headerlink" title="fixed属性值"></a>fixed属性值</h3><ul>
<li>偏移设置： left、right、top、bottom <blockquote>
<p>类似绝对定位，不过区别在于定位的基准不是祖先元素，而是浏览器窗口</p>
</blockquote>
</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>1相对定位的特性</li>
</ul>
<blockquote>
<p>相对于自己的初始位置来定位<br>元素位置发生偏移后，它原来的位置会被保留下来<br>层级提高，可以把标准文档流中的元素及浮动元素盖在下边</p>
</blockquote>
<ul>
<li><p>相对定位的使用场景</p>
<blockquote>
<p>相对定位一般情况下很少自己单独使用，都是配合绝对定位使用，为绝对定位创造定位父级而又不设置偏移量</p>
</blockquote>
</li>
<li><p>2绝对定位的特性</p>
<blockquote>
<p>绝对定位是相对于它的定位父级的位置来定位，如果没有设置定位父级，则相对浏览器窗口来定位<br>元素位置发生偏移后，原来的位置不会被保留<br>层级提高，可以把标准文档流中的元素及浮动元素盖在下边<br>设置绝对定位的元素脱离文档流</p>
</blockquote>
</li>
<li><p>绝对定位的使用场景</p>
<blockquote>
<p>一般情况下，绝对定位用在下拉菜单、焦点图轮播、弹出数字气泡、特别花边等场景</p>
</blockquote>
</li>
<li><p>3固定定位的特性</p>
<blockquote>
<p>相对浏览器窗口来定位<br>偏移量不会随滚动条的移动而移动</p>
</blockquote>
</li>
<li><p>固定定位的使用场景</p>
<blockquote>
<p>一般在网页中被用在窗口左右两边的固定广告、返回顶部图标、吸顶导航栏等</p>
</blockquote>
</li>
</ul>
<h3 id="z-index属性"><a href="#z-index属性" class="headerlink" title="z-index属性"></a>z-index属性</h3><ul>
<li>调整元素定位时重叠层的上下位置<blockquote>
<p>z-index属性值：整数，默认值为0<br>设置了positon属性时，z-index属性可以设置各元素之间的重叠高低关系<br>z-index值大的层位于其值小的层上方</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>网页中的元素都含有两个堆叠层级<br>未设置绝对定位时所处的环境，z-index是0<br>设置绝对定位时所处的堆叠环境，此时层的位置由z-index的值确定<br>改变设置绝对定位和没有设置绝对定位的层的上下堆叠顺序，只需调整绝对定位层的z-index值即可</p>
</blockquote>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>表现</tag>
      </tags>
  </entry>
  <entry>
    <title>操作mongose数据库</title>
    <url>/s2/uncategorized/%E6%93%8D%E4%BD%9Cmongose%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>mongose   </p>
<p>一、基本概念<br>       最常接触到的有三个概念Schema、Model、Entity。<br>        1、Schema是定义数据库的结构。类似创建表时的数据定义，但比创建数据库可以做更多的定义，只是没办法通过Schema对数据库进行更改。<br>        2、Model是将Schema定义的结构赋予表名。但可用此名对数据库进行增删查改。<br>        3、Entity是将Model与具体的数据绑定，可以对具体数据自身进行操作，例如保存数据。</p>
<p>二、Schema<br>    Schema用来定义数据库文档结构，数据库有什么字段、字段是什么类型、默认值、主键之类的信息。<br>    除了定义结构外，还能定义文档的实例方法，静态模型方法，复合索引，中间件等。<br>    详情查看mongoose官方文档。</p>
<pre><code>1、定义一个Schema
  使用
  var stuSchema = new mongoose.Schema({
          studentNo:String,
          studentName:String,
          sex:{type:String,default:&#39;男&#39;},
          age:{type:Number,default:18}
          lx:{
              phone:Number,
              email:{type:String,default:&#39;&#39;}
          }
  })

2.后续追加属性
  stuSchema.add({ 
              address: String, 
              grade: Number
  });

Shema不仅定义了文档的结构和属性，还可以定义文档的插件、实例方法、静态方法、复合索引文档生命周期钩子，具体还需查看官方文档。

3、Schema.Type

    Schema.Type是Mongoose内部定义的数据类型。
    基本类型有：String、Number、Date、Boolean、Array、Buffer、Mixed、ObjectId等

    1、Mixed
        混合数据类型，可以直接定义{}来使用，以下两种形式等价。
        new Schema({mixed: {Schema.Types.Mixed} });
        new Schema({mixed: {} });

    2、ObjectId
        储存在数据库中的每个数据都会有默认的主键_id，默认存储的是ObjectId。
        ObjectId是一个12字节的BSON类型字符串。按照字节顺序依次代表：
        4字节：UNIX时间戳
        3字节：表示运行MongoDB的机器
        2字节：表示生成此_id的进程
        3字节：由一个随机数开始的计数器生成的值</code></pre><p>三、Model</p>
<pre><code>var stuModel = mongoose.model(&#39;student&#39;, stuSchema);

注意：将名为stuSchema的Schema与student名字绑定，即是存入数据库的名字，但存入数据库中的名字是students，会自动添加一个s的，意味着创建一个新的
这里将Model命名为stuModel，需要对Blog表操作的话，都需要使用变量名stuModel</code></pre><p>四、Entity<br>    可以绑定具体数据对Model实例化</p>
<pre><code>    var stuEntity = new stuModel({
            studentNo:&#39;S1234100&#39;,
              studentName:&#39;李磊&#39;,
              sex:&#39;男&#39;,
              age:20
              lx:{
                  phone:13337878898,
                  email:&#39;lilei@qq.com&#39;
              }
    });

这里将名为stuModel的Model实例化。之后我们可以用stuEntity名对数据进行保存并执行回调。
    Entity#save([options], [options.safe], [options.validateBeforeSave], [fn])

    stuEntity.save(function(err, docs){
        if(err){
            return throw new Error();
        } 
        console.log(&#39;保存成功：&#39; + docs);
    })

在平常使用SQL语句操作数据库时，取得数据后先组织成SQL语句，然后放入执行语句中执行。
这里理解也是类似，取得数据先进行实例化，这一步类似于组织成SQL语句，然后再做具体操作例如上面的Save操作。
但由于Node.js是异步操作，所以返回的数据利用回调函数来进行操作。

注意：实体Entity的方法一般用于添加数据</code></pre><p>五、CRUD<br>    1、C create<br>        上述添加除了可以使用stuEntity的save外还可以使用model方式的create<br>        1、单条数据插入<br>            Model.create(doc(s), [callback])</p>
<pre><code>        var doc = ({
            studentNo:&#39;S1234100&#39;,
              studentName:&#39;李磊&#39;,
              sex:&#39;男&#39;,
              age:20
              lx:{
                  phone:13337878898,
                  email:&#39;lilei@qq.com&#39;
              }
        })

        stuModel.create(doc,(err,docs)=&gt;{
            if(err){
                return throw new Error();
            } 
            console.log(&#39;保存成功：&#39; + docs);
        })

    2、批量数据插入    Model.insertMany(doc(s), [options], [callback])

        var doc1 = ({
            studentNo:&#39;S1234100&#39;,
              studentName:&#39;李磊&#39;,
              sex:&#39;男&#39;,
              age:20
              lx:{
                  phone:13337878898,
                  email:&#39;lilei@qq.com&#39;
              }
        })

        var doc2 = ({
            studentNo:&#39;S1234100&#39;,
              studentName:&#39;张磊&#39;,
              sex:&#39;男&#39;,
              age:22
              lx:{
                  phone:13337878888,
                  email:&#39;zhanglei@qq.com&#39;
              }
        })

        stuModel.insertMany([
                doc1, doc2
            ], (err, docs)=&gt;{
                if(err){
                    throw new Error() 
                    return;
                } 
                console.log(&#39;保存成功：&#39; + docs);
        });


2、R 查找
    1、通用查询
        Model.find(conditions, [projection], [options], [callback])
        conditions：查询条件;  projection：控制返回的字段;   options：控制选项;  callback：回调函数;

        stuModel.find({studentNo: &quot;S1234100&quot;, lx.phone: 13337878888}, {studentNo: 1, studentName: 1, email: 1}, function(err, docs){
            if(err){
                return throw new Error();
            } 
            console.log(&#39;查询结果：&#39; + docs);
        })
        说明：查询“studentNo”标题为“S1234100”，并且“lx”中“phone”字段值为“13337878888”的记录，返回仅返回“studentNo”、“studentName”、“email”三个字段的数据

    2、单个查询
        Model.findOne([conditions], [projection], [options], [callback])

    3、根据id查询
        Model.findById(id, [projection], [options], [callback])
        id：指定_id的值；projection：控制返回的字段；options：控制选项；callback：回调函数

    4、 统计总条数
        stuModel.count({sex:&#39;男&#39;},(err,docs)=&gt;{
            if(err){
                return throw new Error();
            }
            console.log(docs);
        })

3、U 修改
    1、通用更新

        Model.update(conditions, doc, [options], [callback])    

        conditions：查询条件；doc：需要修改的数据，不能修改主键（_id）；options：控制选项；callback：回调函数，返回的是受影响的行数。
            options有以下选项：
            　　safe (boolean)： 默认为true。安全模式。
            　　upsert (boolean)： 默认为false。如果不存在则创建新记录。
            　　multi (boolean)： 默认为false。是否更新多个查询记录。
            　　runValidators： 如果值为true，执行Validation验证。
            　　setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。
            　　strict (boolean)： 以strict模式进行更新。
            　　overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。


        stuModel.update({studentNo: &quot;S1234100&quot;}, {sex: &quot;女&quot;}, {multi: true}, function(err, docs){
            if(err){
                return throw new Error();
            } 
            console.log(&#39;更改成功：&#39; + docs);
        })

        以上代码先查询“studentNo”为“S1234100”的数据，然后将它的“sex”修改为“女”，“multi”为true允许更新多条查询记录


    2、一次更新多条
        Model.updateMany(conditions, doc, [options], [callback])


    3、一次更新一条
        Model.updateOne(conditions, doc, [options], [callback])

    4、根据id更新

        Model.findByIdAndUpdate(id, [update], [options], [callback])

        id：指定_id的值；update：需要修改的数据；options控制选项；callback回调函数。
        options有以下选项：
        　　new： bool - 默认为false。返回修改后的数据。
        　　upsert： bool - 默认为false。如果不存在则创建记录。
        　　runValidators： 如果值为true，执行Validation验证。
        　　setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。
        　　sort： 如果有多个查询条件，按顺序进行查询更新。
        　　select： 设置数据的返回。


    5、单个更新    
        Model.findOneAndUpdate([conditions], [update], [options], [callback])
        conditions：查询条件；update：需要修改的数据；options控制选项；callback回调函数。

        options有以下选项：
        　　new： bool - 默认为false。返回修改后的数据。
        　　upsert： bool - 默认为false。如果不存在则创建记录。
        　　fields： {Object|String} - 选择字段。类似.select(fields).findOneAndUpdate()。
        　　maxTimeMS： 查询用时上限。
        　　sort： 如果有多个查询条件，按顺序进行查询更新。
        　　runValidators： 如果值为true，执行Validation验证。
        　　setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。
        　　passRawResult： 如果为真，将原始结果作为回调函数第三个参数。

4、D 删除
    1、通用删除
        Model.remove(conditions, [callback])

        stuModel.remove({studentNo: &quot;S1234100&quot;}, function(err, docs){
            if(err){
                return throw new Error();
            } 
            console.log(&#39;删除成功：&#39; + docs);
        })


    2、根据id删除
        Model.findByIdAndRemove(id, [options], [callback])

        id：指定_id的值；update：需要修改的数据；options控制选项；callback回调函数。
        options有以下选项：
        　　sort： 如果有多个查询条件，按顺序进行查询更新。
        　　select： 设置数据的返回。

    3、根据条件删除
        Model.findOneAndRemove(conditions, [options], [callback])

        conditions：查询条件；update：需要修改的数据；options控制选项；callback回调函数。
        options有以下选项：
        　　sort： 如果有多个查询条件，按顺序进行查询更新。
        　　maxTimeMS： 查询用时上限。
        　　select： 设置数据的返回。</code></pre><p>六、静态方法<br>    静态方法statics</p>
<pre><code>studnetSchema.statics.removeData = function(option,callback){
      db.model(&#39;student&#39;).remove(option,callback);  // db.model(&#39;student&#39;)指向Study数据库中student集合
}

// 注意位置必须位于声明静态方法之后和调用方法之前的中间位置
var stuModel = db.model(&#39;student&#39;,studnetSchema);


stuModel.removeData({_id:&#39;5d3128eaad02701ddc07e55c&#39;},(err,result)=&gt;{
  if(err) throw err;
  console.log(result);
  db.close();
})</code></pre><p>七、复杂条件查询</p>
<pre><code>1、 .exec()
链式语句时，可以在之后接.exec()执行查询，并指定回调函数
    stuModel.find({title: &quot;Mongoose&quot;, meta.votes: 100}, {title: 1, author: 1, body: 1}).exec(function(err, docs){
        if(err) throw err;
        console.log(&#39;查询结果：&#39; + docs);
    })

2、 and 
    执行逻辑AND的阵列上操作的一个或多个表达式（例如&lt;expression1&gt;， &lt;expression2&gt;等），
    并且选择满足该文件 的所有阵列中的表达式。该$and运营商使用短路计算。
    如果第一个表达式（例如&lt;expression1&gt;）的计算结果为false，MongoDB将不会评估剩余的表达式。

    and: [ { &lt;expression1&gt; }, { &lt;expression2&gt; } , ... , { &lt;expressionN&gt; } ]

        stuModel.and([
            { title: { $regex: &quot;SS1234+&quot;}},// 以SS1234开头
            { age: { $lt: 20}} //小于20
        ).sort({ meta.votes: 1}
        ).exec(function(err, docs){
            if(err) console.log(err);
            console.log(&#39;查询结果：&#39; + docs);
        });

3、比较查询运算符
        $equals 等于 
        $gt 大于 
        $gte 大于等于 
        $lt 小余 
        $lte 小余等于 
        $ne 不等于 
        $in 在数组中 
        $nin 不在数组中

        stuModel.find({age: {$lt: 20}});

        stuModel.find({studentName: {$in: [&#39;王&#39;, &#39;小王&#39;, &#39;大王&#39;]}});// 查询“studentName”为“王”或“小王”或“大王”其中之一的数据。

4、逻辑查询运算符

    $or 或 ／ $and 与 ／ $nor 非


    // 查询“lx”中的“votes”字段值大于等于50到小于100的数据。
    stuModel.find({ $and: [
        {lx.votes: {$gte: 50}}, 
        {lx.votes: {$lt: 100}}
    ]});    

    等同于以下代码：使用and
    stuModel.and([
        {lx.votes: {$gte: 50}}, 
        {lx.votes: {$lt: 100}}
    ]);


    // 查询“lx”中的“votes”字段值不等于50和不等于100的数据。
    stuModel.find({ $nor: [
        {lx.votes: 50}, 
        {lx.votes: 100}
    ]});
    等同于以下代码：
    stuModel.nor([
        {meta.votes: 50}, 
        {meta.votes: 100}
    ]);


5、元素查询运算符     $exists 是否包含
    stuModel.find({ title: {$exists: true}});  // 查询是否存在“title”字段的数据。
    stuModel.where(&#39;title&#39;).exists(true);

6、评估查询运算符

    1、$mod　与数据进行取模运算筛选
        stuModel.find({ lx.votes: {$mod: [4, 0]}});// 查找“lx”中的“votes”字段值与4取模后，值为0的数据。
        stuModel.where(&#39;lx.votes&#39;).$mod(4, 0);// 查找“lx”中的“votes”字段值与4取模后，值为0的数据。

    2、正则
        1、$regex　使用正则表达式查询数据

        stuModel.find({ studengNo: { $regex: &quot;S1234+&quot;,&quot;$options&quot;:&quot;i&quot;}}); // 搜索以“S1234”开头的“studengNo”字段，“options”中的“i”代表不区分大小写。

        2、$where　支持js表达式查询
        stuModel.find({ $where: &#39;this.studentNo.length === 10 || this.studentName.length === 5&#39; });
        stuModel.$where(function() { return this.studentNo.length === 10 || this.studentName.length === 5; });

7、数组查询运算符
    1、查询数组的本身及超集

        stuModel.find( address: [&#39;洛阳&#39;, &#39;河南&#39;]);

        查询“address”的字段值同时包含有[&#39;洛阳&#39;, &#39;河南&#39;]的数据。只要值中包含此数组即返回数据，若是只包含数组中的一个则不返回此数据。

    2、查询数组的交集

        stuModel.find( $elemMatch: { address: &#39;洛阳&#39;, sex: &#39;男&#39;});// 查询“address”为“洛阳”或是“sex”为“男”的数据。

8、其他常用的运算符

    1、limit(val)　　限制查询返回的数量

        stuModel.find( studentNo: &#39;S&#39;).limit(5);// 查询“studentNo”为“S”的数据，只返回前5个查询结果。

    2、skip(val)　　跳过前N个查询结果
        stuModel.find( studentNo: &#39;S&#39;).skip(10).limit(5);//查询“tags”为“mongoose”的数据，跳过前10个查询结果，返回从第11个开始的五个查询结果。
                                                            //做分页时常用到这两个，但数据量过大时就会有性能问题。
    3、sort(arg)　　对结果按某个指定字段进行排序

        1、asc为升序，-1、desc为降序。可以对一个字段进行排序，也可以是多个

        stuModel.find( sex: &#39;男&#39;).skip(10).limit(5).sort(&quot;{ _id: 1}&quot;);
                // 查询“sex”为“男”的数据，跳过前10个查询结果，返回从第11个开始的五个查询结果。之后按“_id”进行升序排序。

    4、select(arg)　　选择指定字段

        在查询中可以选择指定的查询字段，或者排除指定的字段。+为包含，-为排除。

        stuModel.select(&#39;title body&#39;);// 只包含“title”、“body”字段。
        stuModel.select(&#39;+title -body&#39;); // 包含“title”、排除“body”字段。</code></pre>]]></content>
  </entry>
</search>
