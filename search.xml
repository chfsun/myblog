<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring Cloud 你需要知道的</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8801%EF%BC%89%E4%B9%8B%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84/</url>
    <content><![CDATA[<h2 id="Spring-Cloud是什么"><a href="#Spring-Cloud是什么" class="headerlink" title="Spring Cloud是什么"></a>Spring Cloud是什么</h2><p>Spring Cloud 是一系列框架的有序集合。它利用 Spring Boot 的开发便利性，巧妙地简化了分布式系统基础设施的开发，如服务注册、服务发现、配置中心、消息总线、负载均衡、断路器、数据监控等，这些都可以用 Spring Boot 的开发风格做到一键启动和部署。</p>
<a id="more"></a>
<p>通俗地讲，Spring Cloud 就是用于构建微服务开发和治理的框架集合（并不是具体的一个框架），主要贡献来自 Netflix OSS。</p>
<p>Spring Cloud 模块的相关也就是需要掌握的介绍如下：</p>
<pre><code>Eureka：服务注册中心，用于服务管理。
Ribbon：基于客户端的负载均衡组件。
Hystrix：容错框架，能够防止服务的雪崩效应。
Feign：Web 服务客户端，能够简化 HTTP 接口的调用。
Zuul：API 网关，提供路由转发、请求过滤等功能。
Config：分布式配置管理。
Sleuth：服务跟踪。
Stream：构建消息驱动的微服务应用程序的框架。
Bus：消息代理的集群消息总线。</code></pre><p>除了上述模块，还有 Cli、Task、Gateway等等。在此只介绍一些常用的模块。</p>
<p>Spring Cloud 是一个非常好的框架集合，它包含的功能模块非常多，不可能一一讲解到，凡是在课程中出现的模块都是真实开发中用得到的，一句话我们先学常用的，其它技术点用到时再学习。</p>
<h2 id="Spring-Cloud-版本介绍"><a href="#Spring-Cloud-版本介绍" class="headerlink" title="Spring Cloud 版本介绍"></a>Spring Cloud 版本介绍</h2><p>相信大家跟我一样，在第一次访问 <a href="https://projects.spring.io/spring-cloud/#learn" target="_blank" rel="noopener">Spring Cloud 官网</a><br>时一定会有一个疑惑那就是版本也太多了撒，到底哪个是稳定版本？哪个才是自己需要的版本？这些都不是大问题。</p>
<p>访问官网 <a href="https://projects.spring.io/spring-cloud/#learn" target="_blank" rel="noopener">https://projects.spring.io/spring-cloud/#learn</a><br> 可以看到网页右侧的版本列表，如图 1 所示。<br> <img src="https://img-blog.csdnimg.cn/20200428212432294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">从图 1 中可以看到 Spring Cloud 不是像别的项目那样，版本号采用 1.1、1.2、1.3 这种的格式。因为 Spring Cloud 是一个拥有诸多子项目的大型综合项目，可以说是对微服务架构解决方案的综合套件组件，其中包含的各个子项目都独立进行着内容的迭代与更新，各自维护着自己的发布版本号。</p>
<p>Spring Cloud是一个由许多子项目组成的综合项目，各子项目有不同的发布节奏。 为了管理Spring Cloud与各子项目的版本依赖关系，发布了一个清单，其中包括了某个Spring Cloud版本对应的子项目版本。 为了避免Spring Cloud版本号与子项目版本号混淆，Spring Cloud版本采用了名称而非版本号的命名，这些版本的名字采用了伦敦地铁站的名字，根据字母表的顺序来对应版本时间顺序，例如Angel是第一个版本，Brixton是第二个版本。 当Spring Cloud的发布内容积累到临界点或者一个重大BUG被解决后，会发布一个”service releases”版本，简称SRX版本，比如Greenwich.SR2就是Spring Cloud发布的Greenwich版本的第2个SRX版本。目前Spring Cloud的最新版本是Hoxton。</p>
<p>至于怎么选择适合自己的版本，大家可以在接触的时候直接选最新的稳定版本。新版本中的 Bug 肯定要少，并且更稳定。</p>
<p>本课程的案例都是基于 Hoxton  进行讲解的。不同的版本有不同的功能，对应的每个子模块的版本也不一样，那么如何知道每个大版本下面具体的子模块是什么版本呢？</p>
<p>答案就在官网的首页上面，在页面的最下方有一个表格（见表 1 ），通过这个表格我们可以清楚地知道 Hoxton 对应的 Spring Boot 版本是 2.2.X，Spring-Cloud-Bus 是 2.2.1。<br><img src="https://img-blog.csdnimg.cn/2020042821335543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>PS：Hoxton版本是基于SpringBoot 2.2.x版本构建的，不适用于1.5.x版本。随着2019年8月SpringBoot 1.5.x版本停止维护，Edgware版本也将停止维护。</p>
<h2 id="Spring-Cloud和Dubbo的区别及各自的优缺点"><a href="#Spring-Cloud和Dubbo的区别及各自的优缺点" class="headerlink" title="Spring Cloud和Dubbo的区别及各自的优缺点"></a>Spring Cloud和Dubbo的区别及各自的优缺点</h2><p>我们先从 Nginx 说起，了解为什么需要微服务。最初的服务化解决方案是给相同服务提供一个统一的域名，然后服务调用者向这个域发送 HTTP 请求，由 Nginx 负责请求的分发和跳转。</p>
<p>这种架构存在很多问题：Nginx 作为中间层，在配置文件中耦合了服务调用的逻辑，这削弱了微服务的完整性，也使得 Nginx 在一定程度上变成了一个重量级的 ESB。图 1 标识出了 Nginx 的转发信息流走向。<br>Nginx转发的信息流<br>图 1  Nginx 转发的信息流<br><img src="https://img-blog.csdnimg.cn/20200428214507329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>服务的信息分散在各个系统，无法统一管理和维护。每一次的服务调用都是一次尝试，服务消费方并不知道有哪些实例在给他们提供服务。这带来了一些问题：</p>
<pre><code>无法直观地看到服务提供方和服务消费方当前的运行状况与通信频率；
消费方的失败重发、负载均衡等都没有统一策略，这加大了开发每个服务的难度，不利于快速演化。</code></pre><p>为了解决上面的问题，我们需要一个现成的中心组件对服务进行整合，将每个服务的信息汇总，包括服务的组件名称、地址、数量等。</p>
<p>服务的调用方在请求某项服务时首先通过中心组件获取提供服务的实例信息（IP、端口等），再通过默认或自定义的策略选择该服务的某一提供方直接进行访问，所以考虑引入 Dubbo。</p>
<p>Dubbo 是阿里开源的一个 SOA 服务治理解决方案，文档丰富，在国内的使用度非常高。图 2 为 Dubbo 的基本架构图，使用 Dubbo 构建的微服务已经可以较好地解决上面提到的问题。<br>Dubbo的基本架构图<br>图 2  Dubbo 的基本架构图</p>
<p>从图 2 中，可以看出以下几点：<br><img src="https://img-blog.csdnimg.cn/20200428214550507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<pre><code>调用中间层变成了可选组件，消费方可以直接访问服务提供方；
服务信息被集中到 Registry 中，形成了服务治理的中心组件；
通过 Monitor 监控系统，可以直观地展示服务调用的统计信息；
服务消费者可以进行负载均衡、服务降级的选择。</code></pre><p>但是对于微服务架构而言，Dubbo 并不是十全十美的，也有一些缺陷，比如：</p>
<pre><code>Registry 严重依赖第三方组件（ZooKeeper 或者 Redis），当这些组件出现问题时，服务调用很快就会中断。
Dubbo 只支持 RPC 调用。这使得服务提供方与调用方在代码上产生了强依赖，服务提供方需要不断将包含公共代码的 Jar 包打包出来供消费方使用。一旦打包出现问题，就会导致服务调用出错。</code></pre><p>个人认为，Dubbo 和 Spring Cloud 并不是完全的竞争关系，两者所解决的问题域并不一样。</p>
<p>Dubbo 的定位始终是一款 RPC 框架，而 Spring Cloud 的目标是微服务架构下的一站式解决方案。如果非要比较的话，Dubbo 可以类比到 Netflix OSS 技术栈，而 Spring Cloud 集成了 Netflix OSS 作为分布式服务治理解决方案，但除此之外 Spring Cloud 还提供了配置、消息、安全、调用链跟踪等分布式问题解决方案。</p>
<p>当前由于 RPC 协议、注册中心元数据不匹配等问题，在面临微服务基础框架选型时 Dubbo 与 Spring Cloud 只能二选一，这也是大家总是拿 Dubbo 和 Spring Cloud 做对比的原因之一。</p>
<p>Dubbo 已经适配到 Spring Cloud 生态，比如作为 Spring Cloud 的二进制通信方案来发挥 Dubbo 的性能优势，Dubbo 通过模块化以及对 HTTP 的支持适配到 Spring Cloud。</p>
<h2 id="Spring-Cloud-好在哪里"><a href="#Spring-Cloud-好在哪里" class="headerlink" title="Spring Cloud 好在哪里"></a>Spring Cloud 好在哪里</h2><p>作为新一代的服务框架，Spring Cloud 提出的口号是开发“面向云的应用程序”，它为微服务架构提供了更加全面的技术支持。结合我们一开始提到的微服务的诉求，参见表 1，把Spring Cloud 与 Dubbo 进行一番对比。</p>
<p>表 1 Spring Cloud与Dubbo功能对比 功能名称<br><img src="https://img-blog.csdnimg.cn/20200428214951436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Spring Cloud 抛弃了 Dubbo 的 RPC 通信，采用的是基于 HTTP 的 REST 方式。严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生 RPC 带来的问题。而且 REST 相比 RPC 更为灵活，服务提供方和调用方，不存在代码级别的强依赖，这在强调快速演化的微服务环境下显得更加合适。</p>
<p>很明显，Spring Cloud 的功能比 Dubbo 更加强大，涵盖面更广，而且作为 Spring 的拳头项目，它也能够与 Spring Framework、Spring Boot、Spring Data、Spring Batch 等其他 Spring 项目完美融合，这些对于微服务而言是至关重要的。</p>
<p>前面提到，微服务背后一个重要的理念就是持续集成、快速交付，而在服务内部使用一个统一的技术框架，显然比将分散的技术组合到一起更有效率。</p>
<p>更重要的是，相比于 Dubbo，它是一个正在持续维护的、社区更加火热的开源项目，这就可以保证使用它构建的系统持续地得到开源力量的支持。</p>
<p>下面列举 Spring Cloud 的几个优势。</p>
<pre><code>Spring Cloud 来源于 Spring，质量、稳定性、持续性都可以得到保证。
Spirng Cloud 天然支持 Spring Boot，更加便于业务落地。
Spring Cloud 发展得非常快，从开始接触时的相关组件版本为 1.x，到现在将要发布 2.x 系列。
Spring Cloud 是 Java 领域最适合做微服务的框架。</code></pre><p>相比于其他框架，Spring Cloud 对微服务周边环境的支持力度最大。对于中小企业来讲，使用门槛较低。</p>
<p>缺点：</p>
<pre><code>微服务过多，治理成本高，不利于维护系统
分布式系统开发的成本高（容错，分布式事务等）对团队挑战大</code></pre><p>总的来说优点大过于缺点，目前看来Spring Cloud是一套非常完善的分布式框架，目前很多企业开始用微服务、Spring Cloud的优势是显而易见的。因此对于想研究微服务架构的同学来说，学习Spring Cloud是一个不错的选择。</p>
<h2 id="Spring-Cloud发展前景"><a href="#Spring-Cloud发展前景" class="headerlink" title="Spring Cloud发展前景"></a>Spring Cloud发展前景</h2><p>Spring Cloud对于中小型互联网公司来说是一种福音，因为这类公司往往没有实力或者没有足够的资金投入去开发自己的分布式系统基础设施，使用Spring Cloud一站式解决方案能在从容应对业务发展的同时大大减少开发成本。同时，随着近几年微服务架构和Docker容器概念的火爆，也会让Spring Cloud在未来越来越“云”化的软件开发风格中立有一席之地，尤其是在五花八门的分布式解决方案中提供了标准化的、全站式的技术方案，意义可能会堪比当年Servlet规范的诞生，有效推进服务端软件系统技术水平的进步。<br><img src="https://img-blog.csdnimg.cn/20200428220218252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="主要项目"><a href="#主要项目" class="headerlink" title="主要项目"></a>主要项目</h2><p>Spring Cloud的子项目，大致可分成两类，一类是对现有成熟框架”Spring Boot化”的封装和抽象，也是数量最多的项目；第二类是开发了一部分分布式系统的基础设施的实现，如Spring Cloud Stream扮演的就是kafka, ActiveMQ这样的角色。<br>Spring Cloud Config</p>
<p>集中配置管理工具，分布式系统中统一的外部配置管理，默认使用Git来存储配置，可以支持客户端配置的刷新及加密、解密操作。<br>Spring Cloud Netflix</p>
<p>Netflix OSS 开源组件集成，包括Eureka、Hystrix、Ribbon、Feign、Zuul等核心组件。</p>
<pre><code>Eureka：服务治理组件，包括服务端的注册中心和客户端的服务发现机制；
Ribbon：负载均衡的服务调用组件，具有多种负载均衡调用策略；
Hystrix：服务容错组件，实现了断路器模式，为依赖服务的出错和延迟提供了容错能力；
Feign：基于Ribbon和Hystrix的声明式服务调用组件；
Zuul：API网关组件，对请求提供路由及过滤功能。</code></pre><p>Spring Cloud Bus</p>
<p>用于传播集群状态变化的消息总线，使用轻量级消息代理链接分布式系统中的节点，可以用来动态刷新集群中的服务配置。<br>Spring Cloud Consul</p>
<p>基于Hashicorp Consul的服务治理组件。<br>Spring Cloud Security</p>
<p>安全工具包，对Zuul代理中的负载均衡OAuth2客户端及登录认证进行支持。<br>Spring Cloud Sleuth</p>
<p>Spring Cloud应用程序的分布式请求链路跟踪，支持使用Zipkin、HTrace和基于日志（例如ELK）的跟踪。<br>Spring Cloud Stream</p>
<p>轻量级事件驱动微服务框架，可以使用简单的声明式模型来发送及接收消息，主要实现为Apache Kafka及RabbitMQ。<br>Spring Cloud Task</p>
<p>用于快速构建短暂、有限数据处理任务的微服务框架，用于向应用中添加功能性和非功能性的特性。<br>Spring Cloud Zookeeper</p>
<p>基于Apache Zookeeper的服务治理组件。<br>Spring Cloud Gateway</p>
<p>API网关组件，对请求提供路由及过滤功能。<br>Spring Cloud OpenFeign</p>
<p>基于Ribbon和Hystrix的声明式服务调用组件，可以动态创建基于Spring MVC注解的接口实现用于服务调用，在Spring Cloud 2.0中已经取代Feign成为了一等公民。</p>
<h2 id="和Spring-Boot的关系"><a href="#和Spring-Boot的关系" class="headerlink" title="和Spring Boot的关系"></a>和Spring Boot的关系</h2><ol>
<li><p>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务，Spring<br>Cloud是一个基于Spring Boot实现的云应用开发工具。Spring -&gt; Spring Boot &gt; Spring Cloud<br>这样的关系。</p>
</li>
<li><p>Spring Boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring<br>Boot，属于依赖的关系</p>
</li>
<li><p>Spring Boot专注于快速、方便集成的单个个体微服务，Spring Cloud是关注全局的服务治理框架</p>
</li>
<li><p>Spring Boot使用了默认大于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置，Spring<br>Cloud很大的一部分是基于Spring Boot来实现，可以不基于Spring Boot吗？不可以</p>
</li>
</ol>
<p>总之：Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 中 Redis的使用 及Spring Session共享实现</title>
    <url>/myblog/spring-boot/Spring-Boot-%E4%B8%AD-Redis%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%8F%8ASpring-Session%E5%85%B1%E4%BA%AB%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一、关于Redis"><a href="#一、关于Redis" class="headerlink" title="一、关于Redis"></a>一、关于Redis</h2> <a id="more"></a>                                     
<p><img src="https://img-blog.csdnimg.cn/20181119212947332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODk0ODk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>最近阅读了《Redis开发与运维》，非常不错。这里对书中的知识整理一下，方便自己回顾Redis的整个体系，来对相关知识点查漏补缺。</strong></p>
<p><strong>按照五点把书中的内容进行一下整理：</strong></p>
<p>1、为什么要选择Redis：介绍Redis的使用场景与使用Redis的原因；</p>
<p>2、Redis常用命令总结：包括时间复杂度总结与具体数据类型在Redis内部使用的数据结构；</p>
<p>3、Redis的高级功能：包括持久化、复制、哨兵、集群介绍；</p>
<p>4、理解Redis：理解内存、阻塞，这部分是非常重要的，前面介绍的都可以成为术，这里应该属于道的部分；</p>
<p>5、开发技巧：主要是一些开发实战的总结，包括缓存设计与常见坑点。</p>
<p>先来开启第一部分的内容，对Redis来一次重新打量。</p>
<p><strong>Redis不是万金油</strong></p>
<p>在面试的时候，常被问比较下Redis与Memcache的优缺点，个人觉得这二者并不适合一起比较，一个是非关系型数据库不仅可以做缓存还能干其他事情，一个是仅用做缓存。常常让我们对这二者进行比较，主要也是由于Redis最广泛的应用场景就是Cache，那么Redis到底能干什么？又不能干什么呢？</p>
<p><img src="https://img-blog.csdnimg.cn/20181119213020882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODk0ODk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>

<h2 id="Redis都可以干什么事儿"><a href="#Redis都可以干什么事儿" class="headerlink" title="Redis都可以干什么事儿"></a>Redis都可以干什么事儿</h2><p>缓存，毫无疑问这是Redis当今最为人熟知的使用场景，再提升服务器性能方面非常有效。</p>
<p><strong>1.排行榜</strong>，如果使用传统的关系型数据库来做，非常麻烦，而利用Redis的SortSet数据结构能够非常方便搞定；</p>
<p><strong>2.计算器/限速器</strong>，利用Redis中原子性的自增操作，我们可以统计类似用户点赞数、用户访问数等，这类操作如果用MySQL，频繁的读写会带来相当大的压力；限速器比较典型的使用场景是限制某个用户访问某个API的频率，常用的有抢购时，防止用户疯狂点击带来不必要的压力；</p>
<p><strong>3.好友关系</strong>，利用集合的一些命令，比如求交集、并集、差集等，可以方便搞定一些共同好友、共同爱好之类的功能；</p>
<p><strong>4.简单消息队列</strong>，除了Redis自身的发布/订阅模式，我们也可以利用List来实现一个队列机制，比如到货通知、邮件发送之类的需求，不需要高可靠，但是会带来非常大的DB压力，完全可以用List来完成异步解耦；</p>
<p><strong>5.Session共享</strong>，以PHP为例，默认Session是保存在服务器的文件中，如果是集群服务，同一个用户过来可能落在不同机器上，这就会导致用户频繁登陆；采用Redis保存Session后，无论用户落在那台机器上都能够获取到对应的Session信息。</p>
<h2><a name="t1"></a><a name="t1"></a><a id="Redis_41"></a>Redis不能干什么事儿</h2>
<p>Redis感觉能干的事情特别多，但它不是万能的，合适的地方用它事半功倍，如果滥用可能导致系统的不稳定、成本增高等问题。</p>
<p>1.比如，用Redis去保存用户的基本信息，虽然它能够支持持久化，但是它的持久化方案并不能保证数据绝对的落地，并且还可能带来Redis性能下降，因为持久化太过频繁会增大Redis服务的压力。</p>
<p>2.简单总结就是数据量太大、数据访问频率非常低的业务都不适合使用Redis，数据太大会增加成本，访问频率太低，保存在内存中纯属浪费资源。</p>
<h2><a name="t2"></a><a name="t2"></a><a id="_51"></a>选择总需要找个理由</h2>
<p>上面说了Redis的一些使用场景，那么这些场景的解决方案也有很多其它选择，比如缓存可以用Memcache，Session共享还能用MySql来实现，消息队列可以用RabbitMQ，我们为什么一定要用Redis呢？</p>
<p>速度快，完全基于内存，使用C语言实现，网络层使用epoll解决高并发问题，单线程模型避免了不必要的上下文切换及竞争条件；</p>
<p><strong>注意：单线程仅仅是说在网络请求这一模块上用一个请求处理客户端的请求，像持久化它就会重开一个线程/进程去进行处理。</strong></p>
<p>丰富的数据类型，Redis有8种数据类型，当然常用的主要是 String、Hash、List、Set、 SortSet 这5种类型，他们都是基于键值的方式组织数据。每一种数据类型提供了非常丰富的操作命令，可以满足绝大部分需求，如果有特殊需求还能自己通过 lua 脚本自己创建新的命令（具备原子性）；</p>
<p><img src="https://img-blog.csdnimg.cn/20181119213123717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODk0ODk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>除了提供的丰富的数据类型，Redis还提供了像慢查询分析、性能测试、Pipeline、事务、Lua自定义命令、Bitmaps、HyperLogLog、发布/订阅、Geo等个性化功能。</p>
<p>Redis的代码开源在GitHub，代码非常简单优雅，任何人都能够吃透它的源码；它的编译安装也是非常的简单，没有任何的系统依赖；有非常活跃的社区，各种客户端的语言支持也是非常完善。另外它还支持事务（没用过）、持久化、主从复制让高可用、分布式成为可能。</p>
<p><img src="https://img-blog.csdnimg.cn/20181119213141787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODk0ODk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>做为一个开发者，对于我们使用的东西不能让它成为一个黑盒子，我们应该深入进去，对它更了解、更熟悉，今天简单说了下Redis的使用场景，以及为什么选择了Redis而不是其他。</p>

<div id="content_views" class="markdown_views prism-atom-one-dark">
                    <!-- flowchart 箭头图标 勿删 -->
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>
                    </svg>
                                            <div id="article_content" class="article_content clearfix csdn-tracking-statistics">



<h2 id="二、为什么选择Redis"><a href="#二、为什么选择Redis" class="headerlink" title="二、为什么选择Redis"></a>二、为什么选择Redis</h2><h2 id="首先，要知道缓存技术，这里主要说一下这两个的（memcached，Redis）区别。"><a href="#首先，要知道缓存技术，这里主要说一下这两个的（memcached，Redis）区别。" class="headerlink" title="首先，要知道缓存技术，这里主要说一下这两个的（memcached，Redis）区别。"></a><p>首先，要知道缓存技术，这里主要说一下这两个的（memcached，Redis）区别。</p></h2></div></div><p>缓存：</p>
<p>&nbsp; &nbsp; &nbsp;1）定义</p>
<p><u>缓存就是在内存中存储的数据备份，当数据没有发生本质变化的时候，我们避免数据的查询操作直接连接数据库，而是去&nbsp; &nbsp; 内容中读取数据，这样就大大降低了数据库的读写次数，而且从内存中读数据的速度要比从数据库查询要快很多。</u></p>
<p>&nbsp; &nbsp; 2）缓存的形式</p>
<p>页面缓存（smarty静态化技术）：页面缓存经常用在CMS（content manage system）内存管理系统里面。</p>
<p>数据缓存：经常会用在页面的具体数据里面。</p>
<blockquote>
<p>1，memcached</p>
</blockquote>
<ul><li>
    <p>协议简单、基于libevent的事件处理、内置内存存储方式、memcached不互相通信的分布式。 各个memcached不会互相通信以共享信息，分布策略由客户端实现。不会对数据进行持久化，重启memcached、重启操作系统会导致全部数据消失。</p>
    </li>
    <li>
    <p>Memcached常见的应用场景是存储一些读取频繁但更新较少的数据，如静态网页、系统配置及规则数据、活跃用户的基本数据和个性化定制数据、准实时统计信息等。</p>
    </li>
</ul><blockquote>
<p>2，Redis</p>
</blockquote>
<ul><li>
    <p>Redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string、list、set、zset(有序集合)和hash。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序和算法。</p>
    </li>
    <li>
    <p>与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件（RDB和AOF两种方式），并且在此基础上实现了master-slave(主从)同步，机器重启后能通过持久化数据自动重建内存，使用Redis作为Cache时机器宕机后热点数据不会丢失。</p>
    </li>
    <li>
    <p>Redis丰富的数据结构也使其拥有更加丰富的应用场景。Redis的命令都是原子性的，可以简单地利用INCR和DECR实现计数功能。使用list可以实现获取最近N个数的操作。sort set支持对数据排序，可以应用在排行榜中。set集合可以应用到数据排重。Redis还支持过期时间设置，可以应用到需要设定精确过期时间的应用。只要可以使用Redis支持的数据结构表示的场景，就可以使用Redis进行存储。</p>
    </li>
    <li>
    <p>Redis基于乐观锁</p>
    </li>
</ul><p>为什么选择Redis？</p>
<blockquote>
<p>&nbsp; &nbsp; 1）Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。<br>
&nbsp; &nbsp; 2）Redis支持master-slave(主-从)模式应用<br>
&nbsp; &nbsp; 3）Redis支持数据持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。<br>
&nbsp; &nbsp; 4）Redis单个value的最大限制是1GB，memcached只能保存1MB的数据。</p>
</blockquote><p>主要是从两个角度去考虑:<strong>性能</strong>和<strong>并发</strong>。当然，redis还具备可以做分布式锁等其他功能，但是如果只是为了分布式锁这些其他功能，完全还有其他中间件(如zookpeer等)代替，并不是非要使用redis。因此，这个问题主要从性能和并发两个角度去答。</p>

<p><strong>一、Redis简介</strong></p>
<blockquote>
<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>
</blockquote>
<p><strong>二、支持的数据类型</strong></p>
<blockquote>
<p>Redis是Remote Dictionary Server(远程数据服务)的缩写，由意大利人antirez(Salvatore Sanfilippo)开发的一款内存高速缓存数据库，该软件使用C语言编写，它的数据模型为key-value。它支持丰富的数据结构(类型)，比如string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型，类似于<a href="http://lib.csdn.net/base/17" rel="nofollow" target="_blank">Java</a>中的map）。</p>
</blockquote>
<p>&nbsp;</p>
<p><strong>（一）性能</strong><br>
如下图所示，我们在碰到需要执行耗时特别久，且结果不频繁变动的SQL，就特别适合将运行结果放入缓存。这样，后面的请求就去缓存中读取，使得请求能够<strong>迅速响应</strong>。<br><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk56fVjL0HJXvibicrE4666HwC9ibHNxGcIict6GSmQbA8Rn3RNvHsRkIgW8D97zhnfzNEiamA5C607FnWjg/640?wx_fmt=png"><br><strong>题外话：</strong>忽然想聊一下这个<strong>迅速响应</strong>的标准。其实根据交互效果的不同，这个响应时间没有固定标准。不过曾经有人这么告诉我:"在理想状态下，我们的页面跳转需要在<strong>瞬间</strong>解决，对于页内操作则需要在<strong>刹那</strong>间解决。另外，超过<strong>一弹指</strong>的耗时操作要有进度提示，并且可以随时中止或取消，这样才能给用户最好的体验。"</p>
<p><br>
那么<strong>瞬间、刹那、一弹指</strong>具体是多少时间呢？</p>
<p><br>
根据《摩诃僧祗律》记载</p>
<p>一刹那者为一念，二十念为一瞬，二十瞬为一弹指，二十弹指为一罗预，二十罗预为一须臾，一日一夜有三十须臾。<br>
&nbsp;</p>
<p>那么，经过周密的计算，一<strong>瞬间</strong>为0.36 秒,一<strong>刹那</strong>有 0.018 秒.一<strong>弹指</strong>长达 7.2 秒。</p>
<p><br><strong>（二）并发</strong></p>
<p><br>
如下图所示，在大并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常。这个时候，就需要使用redis做一个缓冲操作，让请求先访问到redis，而不是直接访问数据库。<br><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk56fVjL0HJXvibicrE4666HwC95NCicgQR2aYVARNYzjB1ZlgrL1HIxyicrlnBibQXFB537v6APjAKCoSfA/640?wx_fmt=png"></p>
<h3><a name="t0"></a><a name="t0"></a>&nbsp;</h3>
<p>2、使用redis有什么缺点</p>
<p><strong>&nbsp;</strong></p>
<p><strong>分析</strong>:大家用redis这么久，这个问题是必须要了解的，基本上使用redis都会碰到一些问题，常见的也就几个。</p>
<p><br><strong>回答</strong>:主要是四个问题<br>
(一)缓存和数据库双写一致性问题<br>
(二)缓存雪崩问题<br>
(三)缓存击穿问题<br>
(四)缓存的并发竞争问题<br>
这四个问题，我个人是觉得在项目中，比较常遇见的，具体解决方案，后文给出。</p>
<p>&nbsp;</p>
<h3><a name="t1"></a><a name="t1"></a>&nbsp;</h3>
<p>3、单线程的redis为什么这么快</p>
<p><strong>&nbsp;</strong></p>
<p><strong>分析</strong>:这个问题其实是对redis内部机制的一个考察。其实根据博主的面试经验，很多人其实都不知道redis是单线程工作模型。所以，这个问题还是应该要复习一下的。</p>
<p><br><strong>回答</strong>:主要是以下三点<br>
(一)纯内存操作<br>
(二)单线程操作，避免了频繁的上下文切换<br>
(三)采用了非阻塞<strong>I/O多路复用机制</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>题外话：</strong>我们现在要仔细的说一说I/O多路复用机制，因为这个说法实在是太通俗了，通俗到一般人都不懂是什么意思。博主打一个比方：小曲在S城开了一家快递店，负责同城快送服务。小曲因为资金限制，雇佣了<strong>一批</strong>快递员，然后小曲发现资金不够了，只够买<strong>一辆</strong>车送快递。</p>
<p><br><strong>经营方式一</strong><br>
客户每送来一份快递，小曲就让一个快递员盯着，然后快递员开车去送快递。慢慢的小曲就发现了这种经营方式存在下述问题</p>
<ul><li>
    <p>几十个快递员基本上时间都花在了抢车上了，大部分快递员都处在闲置状态，谁抢到了车，谁就能去送快递</p>
    </li>
    <li>
    <p>随着快递的增多，快递员也越来越多，小曲发现快递店里越来越挤，没办法雇佣新的快递员了</p>
    </li>
    <li>
    <p>快递员之间的协调很花时间</p>
    </li>
</ul><p>综合上述缺点，小曲痛定思痛，提出了下面的经营方式</p>
<p><br><strong>经营方式二</strong><br>
小曲只雇佣一个快递员。然后呢，客户送来的快递，小曲按<strong>送达地点</strong>标注好，然后<strong>依次</strong>放在一个地方。最后，那个快递员<strong>依次</strong>的去取快递，一次拿一个，然后开着车去送快递，送好了就回来拿下一个快递。</p>
<p>&nbsp;</p>
<p><strong>对比</strong><br>
上述两种经营方式对比，是不是明显觉得第二种，效率更高，更好呢。在上述比喻中:</p>
<ul><li>
    <p>每个快递员----------&gt;每个线程</p>
    </li>
    <li>
    <p>每个快递------------&gt;每个socket(I/O流)</p>
    </li>
    <li>
    <p>快递的送达地点------&gt;socket的不同状态</p>
    </li>
    <li>
    <p>客户送快递请求------&gt;来自客户端的请求</p>
    </li>
    <li>
    <p>小曲的经营方式------&gt;服务端运行的代码</p>
    </li>
    <li>
    <p>一辆车---------------&gt;CPU的核数</p>
    </li>
</ul><p>&nbsp;</p>
<p>于是我们有如下结论<br>
1、经营方式一就是传统的并发模型，每个I/O流(快递)都有一个新的线程(快递员)管理。<br>
2、经营方式二就是I/O多路复用。只有单个线程(一个快递员)，通过跟踪每个I/O流的状态(每个快递的送达地点)，来管理多个I/O流。</p>
<p>下面类比到真实的redis线程模型，如图所示<br><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk56fVjL0HJXvibicrE4666HwC93yQahTTjSKTSVBicx4XcyOpD9l00KSyXeDjltA4gmnVpeTYGPuM3e5Q/640?wx_fmt=png"><br>
参照上图，简单来说，就是。我们的redis-client在操作的时候，会产生具有不同事件类型的socket。在服务端，有一段I/0多路复用程序，将其置入队列之中。然后，文件事件分派器，依次去队列中取，转发到不同的事件处理器中。</p>
<p><br>
需要说明的是，这个I/O多路复用机制，redis还提供了select、epoll、evport、kqueue等多路复用函数库，大家可以自行去了解。</p>
<p>&nbsp;</p>
<h3><a name="t2"></a><a name="t2"></a>&nbsp;</h3>
<p>4、redis的数据类型，以及每种数据类型的使用场景</p>
<p><strong>&nbsp;</strong></p>
<p><strong>分析</strong>：是不是觉得这个问题很基础，其实我也这么觉得。然而根据面试经验发现，至少百分八十的人答不上这个问题。建议，在项目中用到后，再类比记忆，体会更深，不要硬记。基本上，一个合格的程序员，五种类型都会用到。</p>
<p><br><strong>回答</strong>：一共五种</p>
<p><br>
(一)String<br>
这个其实没啥好说的，最常规的set/get操作，value可以是String也可以是数字。一般做<strong>一些复杂的计数功能的缓存。</strong></p>
<p><br>
(二)hash<br>
这里value存放的是结构化的对象，比较方便的就是操作其中的某个字段。博主在做<strong>单点登录</strong>的时候，就是用这种数据结构存储用户信息，以cookieId作为key，设置30分钟为缓存过期时间，能很好的模拟出类似session的效果。</p>
<p><br>
(三)list<br>
使用List的数据结构，可以<strong>做简单的消息队列的功能</strong>。另外还有一个就是，可以利用lrange命令，<strong>做基于redis的分页功能</strong>，性能极佳，用户体验好。</p>
<p><br>
(四)set<br>
因为set堆放的是一堆不重复值的集合。所以可以做<strong>全局去重的功能</strong>。为什么不用JVM自带的Set进行去重？因为我们的系统一般都是集群部署，使用JVM自带的Set，比较麻烦，难道为了一个做一个全局去重，再起一个公共服务，太麻烦了。</p>
<p><br>
另外，就是利用交集、并集、差集等操作，可以<strong>计算共同喜好，全部的喜好，自己独有的喜好等功能</strong>。</p>
<p><br>
(五)sorted set<br>
sorted set多了一个权重参数score,集合中的元素能够按score进行排列。可以做<strong>排行榜应用，取TOP N操作</strong>。sorted set可以用来做<strong>延时任务</strong>。最后一个应用就是可以做<strong>范围查找</strong>。</p>
<p>&nbsp;</p>
<p>5、redis的过期策略以及内存淘汰机制</p>
<p><strong>&nbsp;</strong></p>
<p><strong>分析</strong>:这个问题其实相当重要，到底redis有没用到家，这个问题就可以看出来。比如你redis只能存5G数据，可是你写了10G，那会删5G的数据。怎么删的，这个问题思考过么？还有，你的数据已经设置了过期时间，但是时间到了，内存占用率还是比较高，有思考过原因么?<br>
&nbsp;</p>
<p><strong>回答</strong>:<br>
redis采用的是定期删除+惰性删除策略。</p>
<p><br><strong>为什么不用定时删除策略?</strong><br>
定时删除,用一个定时器来负责监视key,过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</p>
<p><br><strong>定期删除+惰性删除是如何工作的呢?</strong><br>
定期删除，redis默认每个100ms检查，是否有过期的key,有过期key则删除。需要说明的是，redis不是每个100ms将所有的key检查一次，而是随机抽取进行检查(如果每隔100ms,全部key进行检查，redis岂不是卡死)。因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</p>
<p><br>
于是，惰性删除派上用场。也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</p>
<p><br><strong>采用定期删除+惰性删除就没其他问题了么?</strong><br>
不是的，如果定期删除没删除key。然后你也没即时去请求key，也就是说惰性删除也没生效。这样，redis的内存会越来越高。那么就应该采用<strong>内存淘汰机制</strong>。</p>
<p><br>
在redis.conf中有一行配置</p>
<p># maxmemory-policy volatile-lru<br>
&nbsp;</p>
<p>该配置就是配内存淘汰策略的(什么，你没配过？好好反省一下自己)<br>
1）noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。<strong>应该没人用吧。</strong><br>
2）allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。<strong>推荐使用，目前项目在用这种。</strong><br>
3）allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。<strong>应该也没人用吧，你不删最少使用Key,去随机删。</strong><br>
4）volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。<strong>这种情况一般是把redis既当缓存，又做持久化存储的时候才用。不推荐</strong><br>
5）volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。<strong>依然不推荐</strong><br>
6）volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。<strong>不推荐</strong><br>
ps：如果没有设置 expire 的key, 不满足先决条件(prerequisites); 那么 volatile-lru, volatile-random 和 volatile-ttl 策略的行为, 和 noeviction(不删除) 基本上一致。</p>
<p>&nbsp;</p>
<h3><a name="t3"></a><a name="t3"></a>&nbsp;</h3>
<p>6、redis和数据库双写一致性问题</p>
<h3><a name="t4"></a><a name="t4"></a>&nbsp;</h3>
<p><strong>分析</strong>:一致性问题是分布式常见问题，还可以再分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。答这个问题，先明白一个前提。就是<strong>如果对数据有强一致性要求，不能放缓存。</strong>我们所做的一切，只能保证最终一致性。另外，我们所做的方案其实从根本上来说，只能说<strong>降低不一致发生的概率</strong>，无法完全避免。因此，有强一致性要求的数据，不能放缓存。</p>
<p><br><strong>回答</strong>:首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p>
<p>&nbsp;</p>
<h3><a name="t5"></a><a name="t5"></a>&nbsp;</h3>
<p>7、如何应对缓存穿透和缓存雪崩问题</p>
<h3><a name="t6"></a><a name="t6"></a>&nbsp;</h3>
<p><strong>分析</strong>:这两个问题，说句实在话，一般中小型传统软件企业，很难碰到这个问题。如果有大并发的项目，流量有几百万左右。这两个问题一定要深刻考虑。</p>
<p><br><strong>回答</strong>:如下所示</p>
<p><br><strong>缓存穿透</strong>，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。</p>
<p><br><strong>解决方案</strong>:<br>
(一)利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试<br>
(二)采用异步更新策略，无论key是否取到值，都直接返回。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做<strong>缓存预热</strong>(项目启动前，先加载缓存)操作。<br>
(三)提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的Key是否合法有效。如果不合法，则直接返回。</p>
<p><br><strong>缓存雪崩</strong>，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。</p>
<p><br><strong>解决方案</strong>:<br>
(一)给缓存的失效时间，加上一个随机值，避免集体失效。<br>
(二)使用互斥锁，但是该方案吞吐量明显下降了。<br>
(三)双缓存。我们有两个缓存，缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作。然后细分以下几个小点</p>
<ul><li>
    <p>I 从缓存A读数据库，有则直接返回</p>
    </li>
    <li>
    <p>II A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程。</p>
    </li>
    <li>
    <p>III 更新线程同时更新缓存A和缓存B。</p>
    </li>
</ul><p>&nbsp;</p>
<h3><a name="t7"></a><a name="t7"></a>&nbsp;</h3>
<p>8、如何解决redis的并发竞争key问题</p>
<h3><a name="t8"></a><a name="t8"></a>&nbsp;</h3>
<p><strong>分析</strong>:这个问题大致就是，同时有多个子系统去set一个key。这个时候要注意什么呢？大家思考过么。需要说明一下，博主提前百度了一下，发现答案基本都是推荐用redis事务机制。博主<strong>不推荐使用redis的事务机制。</strong>因为我们的生产环境，基本都是redis集群环境，做了数据分片操作。你一个事务中有涉及到多个key操作的时候，这多个key不一定都存储在同一个redis-server上。因此，<strong>redis的事务机制，十分鸡肋。</strong></p>
<p><br><strong>回答:</strong>如下所示<br>
(1)如果对这个key操作，<strong>不要求顺序</strong><br>
这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可，比较简单。<br>
(2)如果对这个key操作，<strong>要求顺序</strong><br>
假设有一个key1,系统A需要将key1设置为valueA,系统B需要将key1设置为valueB,系统C需要将key1设置为valueC.<br>
期望按照key1的value值按照 valueA--&gt;valueB--&gt;valueC的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。假设时间戳如下</p>
<p>系统A key 1 {valueA &nbsp;3:00}<br>
系统B key 1 {valueB &nbsp;3:05}<br>
系统C key 1 {valueC &nbsp;3:10}</p>
<p>那么，假设这会系统B先抢到锁，将key1设置为{valueB 3:05}。接下来系统A抢到锁，发现自己的valueA的时间戳早于缓存中的时间戳，那就不做set操作了。以此类推。</p>
<p>其他方法，比如利用队列，将set方法变成串行访问也可以。总之，灵活变通。</p>
<p>&nbsp;</p>
<p>9 总结</p>
<p>本文对redis的常见问题做了一个总结。大部分是博主自己在工作中遇到，以及以前面试别人的时候，爱问的一些问题。另外，<strong>不推荐大家临时抱佛脚</strong>，真正碰到一些有经验的工程师，其实几下就能把你问懵。最后，希望大家有所收获吧。</p>



<h2 id="Redis的一些优点。"><a href="#Redis的一些优点。" class="headerlink" title="Redis的一些优点。"></a>Redis的一些优点。</h2><blockquote>
<p>异常快 - Redis非常快，每秒可执行大约110000次的设置(SET)操作，每秒大约可执行81000次的读取/获取(GET)操作。<br>支持丰富的数据类型 -<br>Redis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。<br>操作具有原子性 - 所有Redis操作都是原子操作，这确保如果两个客户端并发访问，Redis服务器能接收更新的值。 多实用工具 -<br>Redis是一个多实用工具，可用于多种用例，如：缓存，消息队列(Redis本地支持发布/订阅)，应用程序中的任何短期数据，例如，web应用程序中的会话，网页命中计数等。</p>
</blockquote>
<h2 id="三、-spring-boot-集成Redis"><a href="#三、-spring-boot-集成Redis" class="headerlink" title="三、 spring boot 集成Redis"></a>三、 spring boot 集成Redis</h2><p>1、添加依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  &lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-context&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.1.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">Spring</span> <span class="selector-tag">Boot</span> 2<span class="selector-class">.0</span>中<span class="selector-tag">spring-boot-starter-data-redis</span>默认使用<span class="selector-tag">Lettuce</span>方式替代了<span class="selector-tag">Jedis</span>。使用<span class="selector-tag">Jedis</span>的话先排除掉<span class="selector-tag">Lettuce</span>的依赖，然后手动引入<span class="selector-tag">Jedis</span>的依赖。 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">     &lt;<span class="selector-tag">exclusions</span>&gt;</span><br><span class="line">         &lt;<span class="selector-tag">exclusion</span>&gt;</span><br><span class="line">             &lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class="line">         &lt;/exclusion&gt;</span><br><span class="line">     &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">     &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2、配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.redis.host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">#Redis服务器连接端口</span><br><span class="line">spring.redis.port=<span class="number">6379</span></span><br><span class="line">#Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line">#连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active=<span class="number">8</span></span><br><span class="line">#连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait=-<span class="number">1</span></span><br><span class="line">#连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle=<span class="number">8</span></span><br><span class="line">#连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle=<span class="number">0</span></span><br><span class="line">#连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=<span class="number">30000</span></span><br></pre></td></tr></table></figure>
<p>3、配置类RedisConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor; </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span></span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.pool.max-active&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.pool.max-wait&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxWait;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.pool.max-idle&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxIdle;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.pool.min-idle&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">wiselyKeyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                sb.append(target.getClass().getName());</span><br><span class="line">                sb.append(method.getName());</span><br><span class="line">                <span class="keyword">for</span> (Object obj : params) &#123;</span><br><span class="line">                    sb.append(obj.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisConnectionFactory factory = <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">        factory.setHostName(host);</span><br><span class="line">        factory.setPort(port);</span><br><span class="line">        factory.setTimeout(timeout); <span class="comment">//设置连接超时时间</span></span><br><span class="line">        factory.setPassword(password);</span><br><span class="line">        factory.getPoolConfig().setMaxIdle(maxIdle);</span><br><span class="line">        factory.getPoolConfig().setMinIdle(minIdle);</span><br><span class="line">        factory.getPoolConfig().setMaxTotal(maxActive);</span><br><span class="line">        factory.getPoolConfig().setMaxWaitMillis(maxWait);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">		RedisCacheManager cacheManager = RedisCacheManager.create(connectionFactory);</span><br><span class="line">		<span class="comment">// Number of seconds before expiration. Defaults to unlimited (0)</span></span><br><span class="line">		<span class="comment">// cacheManager.setDefaultExpiration(10); // 设置key-value超时时间</span></span><br><span class="line">		<span class="keyword">return</span> cacheManager;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line">        setSerializer(template); <span class="comment">//设置序列化工具，这样ReportBean不需要实现Serializable接口</span></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RefreshScope</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSerializer</span><span class="params">(StringRedisTemplate template)</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、RedisUtils类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.HashOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ListOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.SetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存设置时效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value, Long expireTime ,TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            redisTemplate.expire(key, expireTime, timeUnit);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePattern</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</span><br><span class="line">        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);</span><br><span class="line">        <span class="keyword">if</span> (keys.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            redisTemplate.delete(keys);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exists(key)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存中是否有对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        result = operations.get(key);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hmSet</span><span class="params">(String key, Object hashKey, Object value)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class="line">        hash.put(key,hashKey,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hmGet</span><span class="params">(String key, Object hashKey)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt;  hash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> hash.get(key,hashKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lPush</span><span class="params">(String k,Object v)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        list.rightPush(k,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String k, <span class="keyword">long</span> l, <span class="keyword">long</span> l1)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        <span class="keyword">return</span> list.range(k,l,l1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        set.add(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">setMembers</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        <span class="keyword">return</span> set.members(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zAdd</span><span class="params">(String key,Object value,<span class="keyword">double</span> scoure)</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        zset.add(key,value,scoure);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByScore</span><span class="params">(String key,<span class="keyword">double</span> scoure,<span class="keyword">double</span> scoure1)</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        <span class="keyword">return</span> zset.rangeByScore(key, scoure, scoure1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>5、测试，编写controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> com.chenqi.springboot.redis.RedisUtils;</span><br><span class="line"><span class="keyword">import</span> com.chenqi.springboot.service.TestService;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"></span><br><span class="line">......    </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"/hello/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">hello</span><span class="params">(@PathVariable(value = <span class="string">"deptNo"</span>)</span> String deptNo) </span>&#123;</span><br><span class="line">		<span class="comment">// 查询缓存中是否存在</span></span><br><span class="line">		<span class="keyword">boolean</span> hasKey = redisUtils.exists(deptNo);</span><br><span class="line">		Dept dept = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (hasKey) &#123;</span><br><span class="line">			<span class="comment">// 获取缓存</span></span><br><span class="line">			Object object = redisUtils.get(deptNo);</span><br><span class="line">			log.info(<span class="string">"从缓存获取的数据"</span> + object);</span><br><span class="line">			dept = (Dept) object;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 从数据库中获取信息</span></span><br><span class="line">			log.info(<span class="string">"从数据库中获取数据"</span>);</span><br><span class="line">			dept = deptService.getDeptInfo(Integer.valueOf(deptNo));</span><br><span class="line">			<span class="comment">// 数据插入缓存（set中的参数含义：key值，user对象，缓存存在时间10（long类型），时间单位）</span></span><br><span class="line">			redisUtils.set(deptNo, dept, <span class="number">10L</span>, TimeUnit.MINUTES);</span><br><span class="line">			log.info(<span class="string">"数据插入缓存"</span> + dept);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dept;</span><br><span class="line">	&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
 <p>6、启动项目，第一次访问：<a href="http://localhost:8002/hello/111" target="_blank" rel="nofollow noopener">http://localhost:8002/hello/111</a><br>
<img src="https://img-blog.csdnimg.cn/20190801200449949.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDYyMzczNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<img src="https://img-blog.csdnimg.cn/20190801200458311.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDYyMzczNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
通过控制台输出，我们可以看到是从数据库中获取的数据，并且存入了redis缓存中。</p>                    
<p>7、我们再次刷新浏览器<br>
<img src="https://img-blog.csdnimg.cn/20190801200519680.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDYyMzczNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
可以看到，第二次是从缓存中读取的，我们试试不断刷新浏览器<br>
<img src="https://img-blog.csdnimg.cn/20190801200535433.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDYyMzczNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
可以看到，之后都是从缓存中获取的。</p>

<p>8、测试Redis<br>    测试输入命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">redis-cli</span><span class="selector-class">.exe</span> <span class="selector-tag">-h</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> <span class="selector-tag">-p</span> 6379 </span><br><span class="line"><span class="selector-tag">set</span> <span class="selector-tag">userinfo</span> <span class="selector-tag">zjl</span></span><br><span class="line"><span class="selector-tag">get</span> <span class="selector-tag">userinfo</span></span><br></pre></td></tr></table></figure>
<p>9、使用RedisDesktopManager可视化工具进行查看<br><img src="https://img-blog.csdnimg.cn/20200415232823550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200415232855966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="四、SpringBoot-使用-Redis-实现-Session-共享"><a href="#四、SpringBoot-使用-Redis-实现-Session-共享" class="headerlink" title="四、SpringBoot 使用 Redis 实现 Session 共享"></a>四、SpringBoot 使用 Redis 实现 Session 共享</h2><p><strong>1、 什么是 Session</strong></p>
<blockquote>
<p>由于 HTTP 协议是无状态的协议，因而服务端需要记录用户的状态时，就需要用某种机制来识具体的用户。Session<br>是另一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而 Session<br>保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是<br>Session。客户端浏览器再次访问时只需要从该 Session 中查找该客户的状态就可以了。</p>
</blockquote>
<p><strong>2、 为什么需要同步session ？</strong></p>
<blockquote>
<p>当用户量比较大时候一个tomcat可能无法处理更多的请求，超过单个tomcat的承受能力，可能会出现用户等待，严重的导致tomcat宕机。<br><img src="https://img-blog.csdnimg.cn/2020041523514483.png#pic_center" alt="在这里插入图片描述">    </p>
<p>这时候我们后端可能会采用多个tomcat去处理请求，分派请求，不同请求让多个tomcat分担处理。</p>
<p> 登录的时候可能采用的是tomca1，下单的时候可能采用的是tomcat2 等等等。</p>
<p>若没有session共享同步，可能在tomcat1登录了，下一次请求被分派到tomcat2上，这时候用户就需要重新登录。</p>
<p>在实际工作中我们建议使用外部的缓存设备来共享 Session，避免单个节点挂掉而影响服务，使用外部缓存 Session 后，我们的<br>    共享数据都会放到外部缓存容器中，服务本身就会变成无状态的服务，可以随意的根据流量的大小增加或者减少负载的设备。</p>
</blockquote>
<p><strong>目前主流的分布式 Session 管理有两种方案</strong>。</p>
<p><strong>1 Session 复制</strong></p>
<p>部分 Web 服务器能够支持 Session 复制功能，如 Tomcat。用户可以通过修改 Web 服务器的配置文件，让 Web 服务器进行 Session 复制，保持每一个服务器节点的 Session 数据都能达到一致。</p>
<p>这种方案的实现依赖于 Web 服务器，需要 Web 服务器有 Session 复制功能。当 Web 应用中 Session 数量较多的时候，每个服务器节点都需要有一部分内存用来存放 Session，将会占用大量内存资源。同时大量的 Session 对象通过网络传输进行复制，不但占用了网络资源，还会因为复制同步出现延迟，导致程序运行错误。</p>
<p>在微服务架构中，往往需要 N 个服务端来共同支持服务，不建议采用这种方案。</p>
<p><strong>2 Session 集中存储</strong></p>
<p>在单独的服务器或服务器集群上使用缓存技术，如 Redis 存储 Session 数据，集中管理所有的 Session，所有的 Web 服务器都从这个存储介质中存取对应的 Session，实现 Session 共享。将 Session 信息从应用中剥离出来后，其实就达到了服务的无状态化，这样就方便在业务极速发展时水平扩充。</p>
<p>Spring Session<br>Spring Session 提供了一套创建和管理 Servlet HttpSession 的方案。Spring Session 提供了集群 Session（Clustered Sessions）功能，默认采用外置的 Redis 来存储 Session 数据，以此来解决 Session 共享的问题。</p>
<p>Spring Session 为企业级 Java 应用的 Session 管理带来了革新，使得以下的功能更加容易实现：</p>
<blockquote>
<p>API 和用于管理用户会话的实现； HttpSession，允许以应用程序容器（即 Tomcat）中性的方式替换<br>              HttpSession；    将 Session 所保存的状态卸载到特定的外部 Session 存储中，如 Redis 或<br>              Apache Geode    中，它们能够以独立于应用服务器的方式提供高质量的集群； 支持每个浏览器上使用多个<br>              Session，从而能够很容易地构建更加丰富的终端用户体验； 控制 Session ID<br>              如何在客户端和服务器之间进行交换，这样的话就能很容易地编写 Restful API，因为它可以从 HTTP 头信息中获取<br>              Session ID，而不必再依赖于 cookie； 当用户使用 WebSocket 发送请求的时候，能够保持<br>              HttpSession 处于活跃状态。  需要说明的很重要的一点就是，Spring Session 的核心项目并不依赖于<br>              Spring 框架，因此，我们甚至能够将其应用于不使用  Spring 框架的项目中。</p>
</blockquote>
<p>3、spring boot中如何使用<br>首先新建一个springboot项目<br>1）、pom文件中除了引人redis外还需引入</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2）、配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Redis 配置</span><br><span class="line"># Redis 数据库索引（默认为0）</span><br><span class="line">spring.redis.database=<span class="number">0</span></span><br><span class="line"># Redis 服务器地址</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line"># Redis 服务器连接端口</span><br><span class="line">spring.redis.port=<span class="number">6379</span>  </span><br><span class="line"># Redis 服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.lettuce.pool.max-active=<span class="number">8</span></span><br><span class="line">spring.redis.lettuce.pool.max-wait=-<span class="number">1</span></span><br><span class="line">spring.redis.lettuce.shutdown-timeout=<span class="number">100</span></span><br><span class="line">spring.redis.lettuce.pool.max-idle=<span class="number">8</span></span><br><span class="line">spring.redis.lettuce.pool.min-idle=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>3）、新建一个初始化类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * maxInactiveIntervalInSeconds: 设置 Session 失效时间</span></span><br><span class="line"><span class="comment"> * 使用 Redis Session 之后，原 Spring Boot 中的 server.session.timeout 属性不再生效。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span>(maxInactiveIntervalInSeconds = <span class="number">86400</span>*<span class="number">30</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4）、一个控制层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/setSession"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">setSession</span> <span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       request.getSession().setAttribute(<span class="string">"message"</span>, request.getRequestURL());</span><br><span class="line">       map.put(<span class="string">"request Url"</span>, request.getRequestURL());</span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/getSession"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getSession</span> <span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">"sessionId"</span>, request.getSession().getId());</span><br><span class="line">       map.put(<span class="string">"message"</span>, request.getSession().getAttribute(<span class="string">"message"</span>));</span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">login</span> <span class="params">(HttpServletRequest request,String userName,String password)</span></span>&#123;</span><br><span class="line">       String msg=<span class="string">"logon failure!"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (userName!=<span class="keyword">null</span> &amp;&amp; <span class="string">"admin"</span>.equals(userName) &amp;&amp; <span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line">           request.getSession().setAttribute(<span class="string">"user"</span>,userName);</span><br><span class="line">           msg=<span class="string">"login successful!"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> msg;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>5）、同上再创建一个项目，该端口为8282</p>
<p>6）、分别启动并测试<br>   在端口是8282 的项目中登录<br>    <img src="https://img-blog.csdnimg.cn/20200416000520408.png#pic_center" alt="在这里插入图片描述"> 然后在端口是8282 和 8080的项目中获取session<br>    <img src="https://img-blog.csdnimg.cn/20200416000611251.png#pic_center" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200416000622929.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>两个服务中session id 是一致的，说明我们的session管理成功。</p>
<p>使用Spring Session 可以将session单独的从每个服务总抽离出来，存储到redis中进行集中管理。<br>相对于每个服务复制session的方式可谓简便至极，也不需要在每个Tomcat中修改配置文件，添加jar包等操作。</p>
</blockquote>
<p>有问题：316572403</p>
<p>原文出处1：<a href="http://mp.toutiao.com/preview_article/?pgc_id=6625563203793322503" target="_blank" rel="nofollow noopener">http://mp.toutiao.com/preview_article/?pgc_id=6625563203793322503</a></p>
<p>原文出处2：<a href="http://mp.toutiao.com/preview_article/?pgc_id=6625563203793322503" target="_blank" rel="nofollow noopener">https://blog.csdn.net/qq_43001609/article/details/82928798</a></p>
<p>原文出处3：<a href="http://mp.toutiao.com/preview_article/?pgc_id=6625563203793322503" target="_blank" rel="nofollow noopener">https://blog.csdn.net/weixin_40623736/article/details/98097708</a></p>   
<p>原文出处4：<a href="http://mp.toutiao.com/preview_article/?pgc_id=6625563203793322503" target="_blank" rel="nofollow noopener">https://segmentfault.com/a/1190000019625173</a></p>]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud之Eureka服务注册与发现</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8802%EF%BC%89%E4%B9%8BEureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a>Eureka简介</h2><p>在微服务架构中往往会有一个注册中心，每个微服务都会向注册中心去注册自己的地址及端口信息，注册中心维护着服务名称与服务实例的对应关系。每个微服务都会定时从注册中心获取服务列表，同时汇报自己的运行情况，这样当有的服务需要调用其他服务时，就可以从自己获取到的服务列表中获取实例地址进行调用，Eureka实现了这套服务注册与发现机制。</p>
<a id="more"></a>
<p>下面将展示基于eclipse使用STS搭建Eureka服务的正确手法<br>(别问我什么是STS，我只会给你个眼神自己体会……)</p>
<h2 id="一、搭建Eureka注册中心"><a href="#一、搭建Eureka注册中心" class="headerlink" title="一、搭建Eureka注册中心"></a>一、搭建Eureka注册中心</h2><p><img src="https://img-blog.csdnimg.cn/2020042823074869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200428231056675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>项目结构：<br><img src="https://img-blog.csdnimg.cn/20200428231838752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">pom文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">	xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">	&lt;parent&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">	&lt;/parent&gt;</span><br><span class="line">	&lt;groupId&gt;cn.chfsun&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;eureka-server&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">	&lt;name&gt;eureka-server&lt;/name&gt;</span><br><span class="line">	&lt;description&gt;eureka-server&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">	&lt;properties&gt;</span><br><span class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">		&lt;spring-cloud.version&gt;Hoxton.SR3&lt;/spring-cloud.version&gt;</span><br><span class="line">	&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">			&lt;exclusions&gt;</span><br><span class="line">				&lt;exclusion&gt;</span><br><span class="line">					&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">				&lt;/exclusion&gt;</span><br><span class="line">			&lt;/exclusions&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">	&lt;dependencyManagement&gt;</span><br><span class="line">		&lt;dependencies&gt;</span><br><span class="line">			&lt;dependency&gt;</span><br><span class="line">				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">				&lt;version&gt;<span class="variable">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class="line">				&lt;<span class="built_in">type</span>&gt;pom&lt;/<span class="built_in">type</span>&gt;</span><br><span class="line">				&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">			&lt;/dependency&gt;</span><br><span class="line">		&lt;/dependencies&gt;</span><br><span class="line">	&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">	&lt;build&gt;</span><br><span class="line">		&lt;plugins&gt;</span><br><span class="line">			&lt;plugin&gt;</span><br><span class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">			&lt;/plugin&gt;</span><br><span class="line">		&lt;/plugins&gt;</span><br><span class="line">	&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001<span class="comment"># 你的端口</span></span><br><span class="line"> </span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost <span class="comment"># 你的地址</span></span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: <span class="literal">false</span> <span class="comment"># 表示是否注册自身到eureka服务器，因为当前这个应用就是eureka服务器，没必要注册自身，所以这里是false</span></span><br><span class="line">    fetchRegistry: <span class="literal">false</span> <span class="comment"># fetchRegistry表示是否从eureka服务器获取注册信息</span></span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://<span class="variable">$&#123;eureka.instance.hostname&#125;</span>:<span class="variable">$&#123;server.port&#125;</span>/eureka/</span><br><span class="line">      <span class="comment"># defaultZone就比较重要了，是设置eureka服务器所在的地址，查询服务和注册服务都需要依赖这个地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chfsun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 该注解表明开启应用为eureka服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(EurekaServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接右键选择Spring Boot App，启动服务，浏览器中输入<a href="http://localhost:8000/" target="_blank" rel="noopener">http://localhost:8000/</a><br> 访问后，页面如下：<br><img src="https://img-blog.csdnimg.cn/20200428232713755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br></p>
<h2 id="二、搭建Eureka客户端"><a href="#二、搭建Eureka客户端" class="headerlink" title="二、搭建Eureka客户端"></a>二、搭建Eureka客户端</h2><p><img src="https://img-blog.csdnimg.cn/20200428233130562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>next后：<br><img src="https://img-blog.csdnimg.cn/20200428233452597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>项目结构：<br><img src="https://img-blog.csdnimg.cn/20200428233635209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>pom文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">	xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">	&lt;parent&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">	&lt;/parent&gt;</span><br><span class="line">	&lt;groupId&gt;cn.chfsun&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;eureka-client-springboot&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">	&lt;name&gt;eureka-client-springboot&lt;/name&gt;</span><br><span class="line">	&lt;description&gt;eureka-client&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">	&lt;properties&gt;</span><br><span class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">		&lt;spring-cloud.version&gt;Hoxton.SR3&lt;/spring-cloud.version&gt;</span><br><span class="line">	&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">			&lt;exclusions&gt;</span><br><span class="line">				&lt;exclusion&gt;</span><br><span class="line">					&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">					&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">				&lt;/exclusion&gt;</span><br><span class="line">			&lt;/exclusions&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">	&lt;dependencyManagement&gt;</span><br><span class="line">		&lt;dependencies&gt;</span><br><span class="line">			&lt;dependency&gt;</span><br><span class="line">				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">				&lt;version&gt;<span class="variable">$&#123;spring-cloud.version&#125;</span>&lt;/version&gt;</span><br><span class="line">				&lt;<span class="built_in">type</span>&gt;pom&lt;/<span class="built_in">type</span>&gt;</span><br><span class="line">				&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">			&lt;/dependency&gt;</span><br><span class="line">		&lt;/dependencies&gt;</span><br><span class="line">	&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">	&lt;build&gt;</span><br><span class="line">		&lt;plugins&gt;</span><br><span class="line">			&lt;plugin&gt;</span><br><span class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">			&lt;/plugin&gt;</span><br><span class="line">		&lt;/plugins&gt;</span><br><span class="line">	&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>配置文件application.yml：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8101  <span class="comment"># 你的端口</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8000/eureka/  <span class="comment"># 服务中心地址</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: springboot <span class="comment"># 客户端的名字</span></span><br></pre></td></tr></table></figure>
<p>EurekaClientSpringbootApplication中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chfsun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// 开启客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientSpringbootApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(EurekaClientSpringbootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切换回之前的浏览器eureka服务中心，可发现：<br><img src="https://img-blog.csdnimg.cn/20200428234049690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br></p>
<h2 id="三、-搭建Eureka注册中心集群"><a href="#三、-搭建Eureka注册中心集群" class="headerlink" title="三、 搭建Eureka注册中心集群"></a>三、 搭建Eureka注册中心集群</h2><p>搭建两个注册中心</p>
<blockquote>
<p>别问我为啥，我只会这样说：<br>由于所有服务都会注册到注册中心去，服务之间的调用都是通过从注册中心获取的服务列表来调用，注册中心一旦宕机，所有服务调用都会出现问题。所以我们需要多个注册中心组成集群来提供服务，下面将搭建一个双节点的注册中心集群。</p>
</blockquote>
<p>1、给eureka-sever添加配置文件application-replica1.yml配置第一个注册中心</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定运行端口</span></span><br><span class="line">server:</span><br><span class="line">  port: 8002</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务名称</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定主机地址</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: replica1</span><br><span class="line">  client:</span><br><span class="line">    fetch-registry: <span class="literal">true</span></span><br><span class="line">    register-with-eureka: <span class="literal">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      <span class="comment"># 注册到另一个Eureka注册中心</span></span><br><span class="line">      defaultZone: http://replica2:8003/eureka/</span><br></pre></td></tr></table></figure>


<p>2、给eureka-sever添加配置文件application-replica2.yml配置第二个注册中心</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定运行端口</span></span><br><span class="line">server:</span><br><span class="line">  port: 8003</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务名称</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定主机地址</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: replica2</span><br><span class="line">  client:</span><br><span class="line">    fetch-registry: <span class="literal">true</span></span><br><span class="line">    register-with-eureka: <span class="literal">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      <span class="comment"># 注册到另一个Eureka注册中心</span></span><br><span class="line">      defaultZone: http://replica1:8002/eureka/</span><br></pre></td></tr></table></figure>

<p>这里我们通过两个注册中心互相注册，搭建了注册中心的双节点集群，由于defaultZone使用了域名，所以还需在本机的hosts文件中配置一下。</p>
<p><em>PS:建议先备份一个hosts文件，万一你改错了，影响到了系统的其它文件呢，然后就会……你懂的…..</em> </p>
<p>修改本地host文件，用管理员权限进入C:\Windows\System32\drivers\etc，添加如下配置，然后保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 replica1</span><br><span class="line">127.0.0.1 replica2</span><br></pre></td></tr></table></figure>
<p>然后运行Eureka注册中心集群：<br>3、添加两个配置，分别以application-replica1.yml和application-replica2.yml来启动eureka-server<br><img src="https://img-blog.csdnimg.cn/20200429003437193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下一步，项目单击右键Run As–》最后一项 Run Configurations<br><img src="https://img-blog.csdnimg.cn/20200429003730609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>同样方式来个第二个，换下指定配置文件即可，这里不再啰嗦。</p>
<p>启动两个eureka-server，访问其中一个注册中心<a href="http://replica1:8002/发现另一个已经成为其备份：" target="_blank" rel="noopener">http://replica1:8002/发现另一个已经成为其备份：</a><br><img src="https://img-blog.csdnimg.cn/20200429004023492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>修改Eureka-client，在eureka-client-springboot的配置文件中添加一个application-replica.yml，让其同时注册到两个注册中心。，让其连接到集群：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定运行端口</span></span><br><span class="line">server:</span><br><span class="line">  port: 8102</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务名称</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    <span class="comment"># 注册到Eureka的注册中心</span></span><br><span class="line">    register-with-eureka: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 获取注册实例列表</span></span><br><span class="line">    fetch-registry: <span class="literal">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      <span class="comment"># 同时注册到两个注册中心</span></span><br><span class="line">      defaultZone: http://replica1:8002/eureka/,http://replica2:8003/eureka/</span><br></pre></td></tr></table></figure>
<p>以该配置文件启动后访问任意一个注册中心节点都可以看到eureka-client-springboot：<br><img src="https://img-blog.csdnimg.cn/20200429095320105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="四、为Eureka注册中心添加安全访问认证"><a href="#四、为Eureka注册中心添加安全访问认证" class="headerlink" title="四、为Eureka注册中心添加安全访问认证"></a>四、为Eureka注册中心添加安全访问认证</h2><p>1、创建一个eureka-security-server模块，在pom.xml中添加以下依赖</p>
<pre><code>&lt;dependency&gt;
     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
     &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
 &lt;/dependency&gt;</code></pre><p>2、添加application.yml配置文件—主要是配置了登录注册中心的用户名和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8004</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-security-server</span><br><span class="line">  security:</span><br><span class="line">    user:</span><br><span class="line">      <span class="comment"># 配置spring security登录用户名和密码</span></span><br><span class="line">      name: root</span><br><span class="line">      password: root</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    fetch-registry: <span class="literal">false</span></span><br><span class="line">    register-with-eureka: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>3、新建Java配置WebSecurityConfig类：</p>
<blockquote>
<p>PS:默认情况下添加SpringSecurity依赖的应用每个请求都需要添加CSRF<br>token才能访问，Eureka客户端注册时并不会添加，所以需要配置/eureka/**路径不需要CSRF token。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().ignoringAntMatchers(<span class="string">"/eureka/**"</span>);</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、运行eureka-security-server，访问<a href="http://localhost:8004" target="_blank" rel="noopener">http://localhost:8004</a> 发现需要登录认证：</p>
<p><img src="https://img-blog.csdnimg.cn/20200429100208836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">5、eureka-client注册到有登录认证的注册中心</p>
<p>配置文件中需要修改注册中心地址格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://<span class="variable">$&#123;username&#125;</span>:<span class="variable">$&#123;password&#125;</span>@<span class="variable">$&#123;hostname&#125;</span>:<span class="variable">$&#123;port&#125;</span>/eureka/</span><br></pre></td></tr></table></figure>

<p>6、添加application-security.yml配置文件，按格式修改用户名和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定运行端口</span></span><br><span class="line">server:</span><br><span class="line">  port: 8103</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务名称</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    <span class="comment"># 注册到Eureka的注册中心</span></span><br><span class="line">    register-with-eureka: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 获取注册实例列表</span></span><br><span class="line">    fetch-registry: <span class="literal">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      <span class="comment"># 配置注册中心地址</span></span><br><span class="line">      defaultZone: http://root:root@localhost:8004/eureka/</span><br></pre></td></tr></table></figure>

<p>以application-security.yml配置运行eureka-client，可以在注册中心界面看到eureka-client已经成功注册</p>
<p><img src="https://img-blog.csdnimg.cn/20200429100615475.png#pic_center" alt="在这里插入图片描述"><br>Eureka用到的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client: <span class="comment">#eureka客户端配置</span></span><br><span class="line">    register-with-eureka: <span class="literal">true</span> <span class="comment">#是否将自己注册到eureka服务端上去</span></span><br><span class="line">    fetch-registry: <span class="literal">true</span> <span class="comment">#是否获取eureka服务端上注册的服务列表</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/ <span class="comment"># 指定注册中心地址</span></span><br><span class="line">    enabled: <span class="literal">true</span> <span class="comment"># 启用eureka客户端</span></span><br><span class="line">    registry-fetch-interval-seconds: 30 <span class="comment">#定义去eureka服务端获取服务列表的时间间隔</span></span><br><span class="line">  instance: <span class="comment">#eureka客户端实例配置</span></span><br><span class="line">    lease-renewal-interval-in-seconds: 30 <span class="comment">#定义服务多久去注册中心续约</span></span><br><span class="line">    lease-expiration-duration-in-seconds: 90 <span class="comment">#定义服务多久不去续约认为服务失效</span></span><br><span class="line">    metadata-map:</span><br><span class="line">      zone: guangdong <span class="comment">#所在区域</span></span><br><span class="line">    hostname: localhost <span class="comment">#服务主机名称</span></span><br><span class="line">    prefer-ip-address: <span class="literal">false</span> <span class="comment">#是否优先使用ip来作为主机名</span></span><br><span class="line">  server: <span class="comment">#eureka服务端配置</span></span><br><span class="line">    <span class="built_in">enable</span>-self-preservation: <span class="literal">false</span> <span class="comment">#关闭eureka服务端的保护机制</span></span><br></pre></td></tr></table></figure>

<h2><a name="t25"></a><a name="t25"></a><a id="_542"></a>项目源码地址</h2>
<p><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></p>]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（03）之 Ribbon服务消费者</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8803%EF%BC%89%E4%B9%8B-Ribbon%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85/</url>
    <content><![CDATA[<h2 id="Ribbon简介"><a href="#Ribbon简介" class="headerlink" title="Ribbon简介"></a>Ribbon简介</h2><p>目前主流的负载方案分为以下两种：</p>
<blockquote>
<p>   1、集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如 Nginx）。<br>2、客户端自己做负载均衡，根据自己的请求情况做负载，Ribbon 就属于客户端自己做负载。</p>
</blockquote>
<a id="more"></a>
<p>Spring Cloud Ribbon 是一个基于 HTTP 和 TCP 的客户端负载均衡工具，它基于 Netflix Ribbon 实现。通过 Spring Cloud 的封装，可以让我们轻松地将面向服务的 REST 模版请求自动转换成客户端负载均衡的服务调用。</p>
<p>Spring Cloud Ribbon 虽然只是一个工具类框架，它不像服务注册中心、配置中心、API 网关那样需要独立部署，但是它几乎存在于每一个 Spring Cloud 构建的微服务和基础设施中。因为微服务间的调用，API 网关的请求转发等内容，实际上都是通过 Ribbon 来实现的（<a href="https://github.com/Netflix/ribbon）。" target="_blank" rel="noopener">https://github.com/Netflix/ribbon）。</a></p>
<h2 id="Ribbon-模块"><a href="#Ribbon-模块" class="headerlink" title="Ribbon 模块"></a>Ribbon 模块</h2><table>
<caption>
Ribbon 模块介绍</caption>
<tbody>
<tr>
<th>
名&nbsp; 称</th>
<th>
说&nbsp; &nbsp; 明</th>
</tr>
<tr>
<td>
ribbon-loadbalancer</td>
<td>
负载均衡模块，可独立使用，也可以和别的模块一起使用。</td>
</tr>
<tr>
<td>
Ribbon</td>
<td>
内置的负载均衡算法都实现在其中。</td>
</tr>
<tr>
<td>
ribbon-eureka</td>
<td>
基于 Eureka 封装的模块，能够快速、方便地集成 Eureka。</td>
</tr>
<tr>
<td>
ribbon-transport</td>
<td>
基于 Netty 实现多协议的支持，比如 HTTP、Tcp、Udp 等。</td>
</tr>
<tr>
<td>
ribbon-httpclient</td>
<td>
基于 Apache HttpClient 封装的 REST 客户端，集成了负载均衡模块，可以直接在项目中使用来调用接口。</td>
</tr>
<tr>
<td>
ribbon-example</td>
<td>
Ribbon 使用代码示例，通过这些示例能够让你的学习事半功倍。</td>
</tr>
<tr>
<td>
ribbon-core</td>
<td>
一些比较核心且具有通用性的代码，客户端 API 的一些配置和其他 API 的定义。</td>
</tr>
</tbody>
</table>


<p>在微服务架构中，很多服务都会部署多个，其他服务去调用该服务的时候，如何保证负载均衡是个不得不去考虑的问题。负载均衡可以增加系统的可用性和扩展性，当我们使用RestTemplate来调用其他服务时，Ribbon可以很方便的实现负载均衡功能。</p>

<h2 id="RestTemplate的使用"><a href="#RestTemplate的使用" class="headerlink" title="RestTemplate的使用"></a>RestTemplate的使用</h2><blockquote>
<p>RestTemplate是一个HTTP客户端，使用它我们可以方便的调用HTTP接口，支持GET、POST、PUT、DELETE等方法。</p>
</blockquote>
<h2 id="GET请求方法"><a href="#GET请求方法" class="headerlink" title="GET请求方法"></a>GET请求方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(URI url, Class&lt;T&gt; responseType)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">getForEntity</span><span class="params">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">getForEntity</span><span class="params">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">getForEntity</span><span class="params">(URI var1, Class&lt;T&gt; responseType)</span></span>;</span><br></pre></td></tr></table></figure>



<h2 id="getForObject方法"><a href="#getForObject方法" class="headerlink" title="getForObject方法"></a>getForObject方法</h2><p>作用为返回对象为响应体中数据转化成的对象，如下：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(userServiceUrl + <span class="string">"/user/&#123;1&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="getForEntity方法"><a href="#getForEntity方法" class="headerlink" title="getForEntity方法"></a>getForEntity方法</h2><p>作用为返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等。如下：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getEntityByUsername"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getEntityByUsername</span><span class="params">(@RequestParam String username)</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;Result&gt; entity = restTemplate.getForEntity(userServiceUrl + <span class="string">"/user/getByUsername?username=&#123;1&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">username</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作失败"</span>, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="POST请求方法"><a href="#POST请求方法" class="headerlink" title="POST请求方法"></a>POST请求方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">postForEntity</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">postForEntity</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">postForEntity</span><span class="params">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="postForObject示例"><a href="#postForObject示例" class="headerlink" title="postForObject示例"></a>postForObject示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForObject(userServiceUrl + <span class="string">"/user/insert"</span>, user, Result<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="postForEntity示例"><a href="#postForEntity示例" class="headerlink" title="postForEntity示例"></a>postForEntity示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForEntity(userServiceUrl + <span class="string">"/user/insert"</span>, user, Result<span class="class">.<span class="keyword">class</span>).<span class="title">getBody</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="PUT请求方法"><a href="#PUT请求方法" class="headerlink" title="PUT请求方法"></a>PUT请求方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, @Nullable Object request, Object... uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, @Nullable Object request, Map&lt;String, ?&gt; uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(URI url, @Nullable Object request)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="PUT请求示例"><a href="#PUT请求示例" class="headerlink" title="PUT请求示例"></a>PUT请求示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    restTemplate.put(userServiceUrl + <span class="string">"/user/update"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作成功"</span>,<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DELETE请求方法"><a href="#DELETE请求方法" class="headerlink" title="DELETE请求方法"></a>DELETE请求方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String url, Object... uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String url, Map&lt;String, ?&gt; uriVariables)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(URI url)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="DELETE请求示例"><a href="#DELETE请求示例" class="headerlink" title="DELETE请求示例"></a>DELETE请求示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">   restTemplate.delete(userServiceUrl + <span class="string">"/user/delete/&#123;1&#125;"</span>, <span class="keyword">null</span>, id);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作成功"</span>,<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="demo示例："><a href="#demo示例：" class="headerlink" title="demo示例："></a><strong>demo示例：</strong></h2><blockquote>
<p>技术点：spring boot、mybatis、mysql、eureka、ribbon</p>
</blockquote>
<h2 id="一、创建一个eureka注册中心模块"><a href="#一、创建一个eureka注册中心模块" class="headerlink" title="一、创建一个eureka注册中心模块"></a>一、创建一个eureka注册中心模块</h2><blockquote>
<p>具体操作请参考上一章：Spring Cloud之Eureka服务注册与发现</p>
</blockquote>
<h2 id="二、创建一个ribbon-orcl-server-service-模块"><a href="#二、创建一个ribbon-orcl-server-service-模块" class="headerlink" title="二、创建一个ribbon-orcl-server-service 模块"></a>二、创建一个ribbon-orcl-server-service 模块</h2><blockquote>
<p>用于给Ribbon提供服务调用，可视为服务提供者，较为简单。</p>
</blockquote>
<p>1、pom.xml文件参考：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">     &lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>


<p>2、配置文件application.yml参考：</p>
<blockquote>
<p>主要是配置了端口和注册中心地址。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8201</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">ribbon-orcl-server-service</span></span><br><span class="line">  #数据库相关配置</span><br><span class="line">  <span class="selector-tag">datasource</span>:</span><br><span class="line">     <span class="selector-tag">driver-class-name</span>: <span class="selector-tag">com</span><span class="selector-class">.mysql</span><span class="selector-class">.cj</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br><span class="line">     url: jdbc:mysql://localhost:3306/orcl?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">     <span class="selector-tag">username</span>: <span class="selector-tag">root</span></span><br><span class="line">     <span class="selector-tag">password</span>: 123456</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br></pre></td></tr></table></figure>


<p>3、创建实体类Dept和统一返回前端的响应类Result<br>3.1、实体类Dept</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer deptNo;</span><br><span class="line">	<span class="keyword">private</span> String deptName;</span><br><span class="line">	<span class="keyword">private</span> String localtion;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getDeptNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptNo;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptNo</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.deptNo = deptNo;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDeptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptName</span><span class="params">(String deptName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.deptName = deptName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getLocaltion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> localtion;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocaltion</span><span class="params">(String localtion)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.localtion = localtion;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// 省略setter和getter方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>3.2、统一返回前端的响应类Result</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(T data, String message, <span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(String message, Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, message, code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(data, <span class="string">"操作成功"</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略setter和getter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、mapper层基于注解操作数据库，此处省略DeptMapper及DeptService代码，DeptController层代码如下：</p>
<blockquote>
<p>DeptController类定义了对Dept对象常用的CRUD接口。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/dept"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DeptController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> rs = deptService.insert(dept);</span><br><span class="line">		<span class="keyword">if</span> (rs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作成功"</span>, <span class="number">200</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作失败"</span>, -<span class="number">200</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;Dept&gt; <span class="title">getDept</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		Dept dept = deptService.getDeptInfo(deptNo);</span><br><span class="line">		LOGGER.info(<span class="string">"当前端口为:"</span> + port + <span class="string">"，根据deptNo获取部门信息，部门名称为：&#123;&#125;"</span>, dept.getDeptName());</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result&lt;Dept&gt;(dept);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/listDept"</span>)</span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; listDept() &#123;</span><br><span class="line">		List&lt;Dept&gt; deptList = deptService.queryList();</span><br><span class="line">		LOGGER.info(<span class="string">"获取部门列表总数为：&#123;&#125;"</span>, deptList.size());</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result&lt;List&lt;Dept&gt;&gt;(deptList);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> rs = deptService.update(dept);</span><br><span class="line">		<span class="keyword">if</span> (rs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作成功"</span>, <span class="number">200</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作失败"</span>, -<span class="number">200</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/delete/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> rs = deptService.del(deptNo);</span><br><span class="line">		<span class="keyword">if</span> (rs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作成功"</span>, <span class="number">200</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作失败"</span>, -<span class="number">200</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<h2 id="三、创建一个ribbon-orcl-client-service模块"><a href="#三、创建一个ribbon-orcl-client-service模块" class="headerlink" title="三、创建一个ribbon-orcl-client-service模块"></a>三、创建一个ribbon-orcl-client-service模块</h2><blockquote>
<p>ribbon-orcl-client-service模块来调用ribbon-orcl-server-service模块演示负载均衡的服务调用，可视为消费者。</p>
</blockquote>
<p>1、pom.xml文件参考：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">      &lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>


<p>2、配置文件application.yml参考：</p>
<blockquote>
<p>配置了端口、注册中心地址及ribbon-orcl-server-service的调用路径。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8301</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">ribbon-orcl-client-service</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">service-url</span>:</span><br><span class="line">  dept-service: http://ribbon-orcl-server-service</span><br></pre></td></tr></table></figure>


<p>3、使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</p>
<blockquote>
<p>使用Ribbon的负载均衡功能非常简单，和直接使用RestTemplate没什么两样，只需给RestTemplate添加一个@LoadBalanced即可。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、创建DeptRibbonController类</p>
<blockquote>
<p>注入RestTemplate，使用其调用user-service中提供的相关接口，这里对GET和POST调用进行了演示，其他方法调用均可参考。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/dept"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptRibbonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;service-url.dept-service&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String deptServiceUrl;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDept</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;1&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> restTemplate.postForObject(deptServiceUrl + <span class="string">"/dept/insert"</span>, dept, Result<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> restTemplate.postForObject(deptServiceUrl + <span class="string">"/dept/update"</span>, dept, Result<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> restTemplate.postForObject(deptServiceUrl + <span class="string">"/dept/delete/&#123;1&#125;"</span>, <span class="keyword">null</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="负载均衡功能演示"><a href="#负载均衡功能演示" class="headerlink" title="负载均衡功能演示"></a>负载均衡功能演示</h2><p>1、启动你的注册中心模块于8001端口；<br>2、启动ribbon-orcl-server-service端口8201的服务；<br>3、启动ribbon-orcl-server-service端口8202的服务（可以通过修改Eclipse或者IDEA中的SpringBoot的启动配置实现）<br>4、启动ribbon-orcl-client-service端口为8301的服务</p>
<p><strong>此时运行中的服务如下</strong>：<br><img src="https://img-blog.csdnimg.cn/20200504175151620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>调用接口进行测试</strong>：<a href="http://localhost:8301/dept/1" target="_blank" rel="nofollow noopener">http://localhost:8301/dept/1</a><br><img src="https://img-blog.csdnimg.cn/20200504175252933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>可以发现运行在8201和8202的user-service控制台交替打印如下信息：<br><img src="https://img-blog.csdnimg.cn/20200504175946101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200504180035212.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Ribbon的常用配置"><a href="#Ribbon的常用配置" class="headerlink" title="Ribbon的常用配置"></a>Ribbon的常用配置</h2><p>1、全局配置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ribbon</span>:</span><br><span class="line">  <span class="selector-tag">ConnectTimeout</span>: 1000 #服务请求连接超时时间（毫秒）</span><br><span class="line">  <span class="selector-tag">ReadTimeout</span>: 3000 #服务请求处理超时时间（毫秒）</span><br><span class="line">  <span class="selector-tag">OkToRetryOnAllOperations</span>: <span class="selector-tag">true</span> #对超时请求启用重试机制</span><br><span class="line">  <span class="selector-tag">MaxAutoRetriesNextServer</span>: 1 #切换重试实例的最大个数</span><br><span class="line">  <span class="selector-tag">MaxAutoRetries</span>: 1 # 切换实例后重试最大次数</span><br><span class="line">  <span class="selector-tag">NFLoadBalancerRuleClassName</span>: <span class="selector-tag">com</span><span class="selector-class">.netflix</span><span class="selector-class">.loadbalancer</span><span class="selector-class">.RandomRule</span> #修改负载均衡算法</span><br></pre></td></tr></table></figure>


<p>2、指定服务进行配置</p>
<blockquote>
<p>与全局配置的区别就是ribbon节点挂在服务名称下面，如下是对ribbon-service调用user-service时的单独配置。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dept-service</span>:</span><br><span class="line">  <span class="selector-tag">ribbon</span>:</span><br><span class="line">    <span class="selector-tag">ConnectTimeout</span>: 1000 #服务请求连接超时时间（毫秒）</span><br><span class="line">    <span class="selector-tag">ReadTimeout</span>: 3000 #服务请求处理超时时间（毫秒）</span><br><span class="line">    <span class="selector-tag">OkToRetryOnAllOperations</span>: <span class="selector-tag">true</span> #对超时请求启用重试机制</span><br><span class="line">    <span class="selector-tag">MaxAutoRetriesNextServer</span>: 1 #切换重试实例的最大个数</span><br><span class="line">    <span class="selector-tag">MaxAutoRetries</span>: 1 # 切换实例后重试最大次数</span><br><span class="line">    <span class="selector-tag">NFLoadBalancerRuleClassName</span>: <span class="selector-tag">com</span><span class="selector-class">.netflix</span><span class="selector-class">.loadbalancer</span><span class="selector-class">.RandomRule</span> #修改负载均衡算法</span><br></pre></td></tr></table></figure>

<h2 id="Ribbon的负载均衡策略"><a href="#Ribbon的负载均衡策略" class="headerlink" title="Ribbon的负载均衡策略"></a>Ribbon的负载均衡策略</h2><blockquote>
<p>所谓的负载均衡策略，就是当A服务调用B服务时，此时B服务有多个实例，这时A服务以何种方式来选择调用的B实例，ribbon可以选择以下几种负载均衡策略:</p>
</blockquote>
<ul>
<li>com.netflix.loadbalancer.RandomRule：从提供服务的实例中以随机的方式；</li>
<li>com.netflix.loadbalancer.RoundRobinRule：以线性轮询的方式，就是维护一个计数器，从提供服务的实例中按顺序选取，第一次选第一个，第二次选第二个，以此类推，到最后一个以后再从头来过；</li>
<li>com.netflix.loadbalancer.RetryRule：在RoundRobinRule的基础上添加重试机制，即在指定的重试时间内，反复使用线性轮询策略来选择可用实例；</li>
<li>com.netflix.loadbalancer.WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择；</li>
<li>com.netflix.loadbalancer.BestAvailableRule：选择并发较小的实例；</li>
<li>com.netflix.loadbalancer.AvailabilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例；</li>
<li>com.netflix.loadbalancer.ZoneAwareLoadBalancer：采用双重过滤，同时过滤不是同一区域的实例和故障实例，选择并发较小的实例。</li>
</ul>
<p>本章使用到的模块：</p>
<p>springcloud-ribbon<br>├── ribbon-eureka-server– eureka注册中心<br>├── ribbon-orcl-server-service – 服务提供者<br>└── ribbon-orcl-client-service – ribbon服务调用的消费者</p>
<p><strong><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></strong></p>
<p>原文部分参考：<a href="https://blog.csdn.net/ThinksWon/article/details/102729080" target="_blank" rel="noopener">https://blog.csdn.net/ThinksWon/article/details/102729080</a></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（05）之 Hystrix Dashboard与Turbine断路器监控</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8805%EF%BC%89%E4%B9%8B-Hystrix-Dashboard%E4%B8%8ETurbine%E6%96%AD%E8%B7%AF%E5%99%A8%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h2><p>Hystrix提供了Hystrix Dashboard来实时监控HystrixCommand方法的执行情况。 Hystrix Dashboard可以有效地反映出每个Hystrix实例的运行情况，帮助我们快速发现系统中的问题，从而采取对应措施。</p>
<a id="more"></a>
<h2 id="一、Hystrix-单个实例监控"><a href="#一、Hystrix-单个实例监控" class="headerlink" title="一、Hystrix 单个实例监控"></a>一、Hystrix 单个实例监控</h2><p>我们先通过使用Hystrix Dashboard监控单个Hystrix实例来了解下它的使用方法。</p>
<p>新建一个hystrix-dashboard模块</p>
<pre><code>用来监控hystrix实例的执行情况。</code></pre><p>1、pom.xml中添加相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、application.yml配置文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8501</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">hystrix-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br></pre></td></tr></table></figure>

<p>3、在启动类上添加@EnableHystrixDashboard来启用监控功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、依次启动相关服务后访问注册中心可看到相应服务：</p>
<p><img src="https://img-blog.csdnimg.cn/20200507235207831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Hystrix实例监控演示"><a href="#Hystrix实例监控演示" class="headerlink" title="Hystrix实例监控演示"></a>Hystrix实例监控演示</h2><p>1、访问Hystrix Dashboard：<a href="http://localhost:8501/hystrix" target="_blank" rel="noopener">http://localhost:8501/hystrix</a></p>
<p><img src="https://img-blog.csdnimg.cn/2020050723533779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">2、图中会有一些提示：</p>
<blockquote>
<p>Cluster via Turbine (default cluster):<br><a href="http://turbine-hostname:port/turbine.stream">http://turbine-hostname:port/turbine.stream</a> Cluster via Turbine<br>(custom cluster):<br><a href="http://turbine-hostname:port/turbine.stream?cluster=[clusterName]">http://turbine-hostname:port/turbine.stream?cluster=[clusterName]</a><br>Single Hystrix App: <a href="http://hystrix-app:port/hystrix.stream">http://hystrix-app:port/hystrix.stream</a></p>
</blockquote>
<p><strong>大概意思就是如果查看默认集群使用第一个url,查看指定集群使用第二个url,单个应用的监控使用最后一个</strong>，我们暂时只演示单个应用的</p>
<p>3、<strong>还有一点值得注意</strong>的是，<br>3.1 被监控的服务需要开启Actuator的hystrix.stream端点，配置信息如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        #暴露hystrix监控端点</span><br><span class="line">        include: <span class="string">'hystrix.stream'</span></span><br></pre></td></tr></table></figure>
<p>3.2 坑点，我在备课时遇到了hystrix dashboard Unable to connect to Command Metric Stream的问题，折腾了好久，翻看源码才发现：</p>
<p><img src="https://img-blog.csdnimg.cn/20200508223628498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">被监控的服务同时还需要实例化HystrixMetricsStreamServlet、ServletRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">	ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">	registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">	registrationBean.addUrlMappings(<span class="string">"/actuator/hystrix.stream"</span>);</span><br><span class="line">	registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">	<span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、填写 <a href="http://localhost:8401/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:8401/actuator/hystrix.stream</a> 信息后点击监控按钮，这里我们需要<strong>注意</strong>的是：由于我们本地不支持https，所以我们的地址需要填入的是http，否则会无法获取监控信息；<br><img src="https://img-blog.csdnimg.cn/2020050822473061.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5、填写好信息后，点击下方Monitor Steam 按钮进入监控界面：<br><img src="https://img-blog.csdnimg.cn/20200508224200657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>初始界面一切数据为零，调用几次hystrix-orcl-client-service的接口后：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200508225326167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">可以发现曾经我们在@HystrixCommand中添加的commandKey和threadPoolKey属性都显示在上面了，而执行有6次调用都成功了。</p>
<h2 id="Hystrix-Dashboard-图表解读"><a href="#Hystrix-Dashboard-图表解读" class="headerlink" title="Hystrix Dashboard 图表解读"></a>Hystrix Dashboard 图表解读</h2><p><img src="https://img-blog.csdnimg.cn/20200508230814570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="二、Hystrix-集群实例监控"><a href="#二、Hystrix-集群实例监控" class="headerlink" title="二、Hystrix 集群实例监控"></a>二、Hystrix 集群实例监控</h2><blockquote>
<p>这里我们使用Turbine来聚合hystrix -turbine-service服务的监控信息，然后我们的hystrix-dashboard服务就可以从Turbine获取聚合好的监控信息展示给我们了。</p>
</blockquote>
<p>1、创建一个hystrix-turbine-service模块</p>
<blockquote>
<p>用来聚合hystrix-orcl-client-service的监控信息。</p>
</blockquote>
<p>2、pom文件相关依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-turbine&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>3、application.yml配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8601</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: hystrix-turbine-service</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8001/eureka/</span></span><br><span class="line"></span><br><span class="line">turbine:</span><br><span class="line">  # 指定需要收集信息的服务名称</span><br><span class="line">  app-config: hystrix-orcl-client-service</span><br><span class="line">  # 指定服务所属集群</span><br><span class="line">  cluster-name-expression: <span class="keyword">new</span> String(<span class="string">'default'</span>)</span><br><span class="line">  # 以主机名和端口号区分服务</span><br><span class="line">  combine-host-port: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>4、启动类设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixTurbineServiceApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(HystrixTurbineServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、使用application-r1.yml、application-r2.yml配置再启动一个hystrix-orcl-client-service服务。依次启动相关服务(实在分不清就按端口号由小到大顺序启动)：</p>
<blockquote>
<p>注册中心、服务提供者、服务消费者、实例监控、集群实例监控</p>
</blockquote>
<p>此时注册中心显示如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20200509215209515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>6、查看Hystrix集群</p>
<p>  6.1、访问Hystrix Dashboard：<a href="http://localhost:8501/hystrix" target="_blank" rel="noopener">http://localhost:8501/hystrix</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200509220152855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">6.2、设置好后点击按钮进入监控界面：<br><img src="https://img-blog.csdnimg.cn/20200509220341294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">此时为loading，等待监控信息状态</p>
<p>6.3、调用几次hystrix-orcl-client-service的2个不同端口的接口。再次查看界面，可发现Hystrix实例数量变成了两个：</p>
<blockquote>
<p>例如：<br><a href="http://localhost:8401/hystrix/dept/1" target="_blank" rel="noopener">http://localhost:8401/hystrix/dept/1</a><br>以及<a href="http://localhost:8402/hystrix/dept/1" target="_blank" rel="noopener">http://localhost:8402/hystrix/dept/1</a></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200509220925823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="三、本章示例模块"><a href="#三、本章示例模块" class="headerlink" title="三、本章示例模块"></a>三、本章示例模块</h2><p>springcloud-learning<br>├── eureka-cloud-server – eureka注册中心<br>├── ribbon-orcl-server-service – 服务提供者<br>├── hystrix-orcl-client-service – 服务消费者<br>├── hystrix-dashboard – 展示hystrix实例监控信息的仪表盘<br>└── hystrix-turbine-service – 聚合收集hystrix实例监控信息的服务</p>
<p><strong><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></strong></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>Hystrix</tag>
        <tag>Dashboard</tag>
        <tag>turbine</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（04）之 Hystrix断路器</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8804%EF%BC%89%E4%B9%8B-Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/</url>
    <content><![CDATA[<h2 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h2><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。</p>
<a id="more"></a>
<p>服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</p>
<p>如果下图所示：A作为服务提供者，B为A的服务消费者，C和D是B的服务消费者。A不可用引起了B的不可用，并将不可用像滚雪球一样放大到C和D时，雪崩效应就形成了。</p>
<p><img src="https://img-blog.csdnimg.cn/20200506113254302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h2><p>熔断器的原理很简单，如同电力过载保护器。它可以实现快速失败，如果它在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器，从而防止应用程序不断地尝试执行可能会失败的操作，使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。熔断器也可以使应用程序能够诊断错误是否已经修正，如果已经修正，应用程序会再次尝试调用操作。</p>
<p>熔断器模式就像是那些容易导致错误的操作的一种代理。这种代理能够记录最近调用发生错误的次数，然后决定使用允许操作继续，或者立即返回错误。 熔断器开关相互转换的逻辑如下图：<br><img src="https://img-blog.csdnimg.cn/20200506113439895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>熔断器就是保护服务高可用的最后一道防线。</p>
<h2 id="Hystrix特性"><a href="#Hystrix特性" class="headerlink" title="Hystrix特性"></a>Hystrix特性</h2><p>在微服务架构中，服务与服务之间通过远程调用的方式进行通信，一旦某个被调用的服务发生了故障，其依赖服务也会发生故障，此时就会发生故障的蔓延，最终导致系统瘫痪。Hystrix实现了断路器模式，当某个服务发生故障时，通过断路器的监控，给调用方返回一个错误响应，而不是长时间的等待，这样就不会使得调用方由于长时间得不到响应而占用线程，从而防止故障的蔓延。Hystrix具备服务降级、服务熔断、线程隔离、请求缓存、请求合并及服务监控等强大功能。</p>
<p>1.断路器机制</p>
<p>断路器很好理解, 当Hystrix Command请求后端服务失败数量超过一定比例(默认50%), 断路器会切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务. 断路器保持在开路状态一段时间后(默认5秒), 自动切换到半开路状态(HALF-OPEN). 这时会判断下一次请求的返回情况, 如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). Hystrix的断路器就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力.</p>
<p>2.Fallback</p>
<p>Fallback相当于是降级操作. 对于查询操作, 我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值. fallback方法的返回值一般是设置的默认值或者来自缓存.</p>
<p>3.资源隔离</p>
<p>在Hystrix中, 主要通过线程池来实现资源隔离. 通常在使用的时候我们会根据调用的远程服务划分出多个线程池. 例如调用产品服务的Command放入A线程池, 调用账户服务的Command放入B线程池. 这样做的主要优点是运行环境被隔离开了. 这样就算调用服务的代码存在bug或者由于其他原因导致自己所在线程池被耗尽时, 不会对系统的其他服务造成影响. 但是带来的代价就是维护多个线程池会对系统带来额外的性能开销. 如果是对性能有严格要求而且确信自己调用服务的客户端代码不会出问题的话, 可以使用Hystrix的信号模式(Semaphores)来隔离资源.</p>
<h2 id="demo示例："><a href="#demo示例：" class="headerlink" title="demo示例："></a>demo示例：</h2><blockquote>
<p>技术点：Eureka、Ribbon、Hystrix</p>
</blockquote>
<h2 id="一、基于之前的Eureka注册中心"><a href="#一、基于之前的Eureka注册中心" class="headerlink" title="一、基于之前的Eureka注册中心"></a>一、基于之前的Eureka注册中心</h2><blockquote>
<p>参考第2章</p>
</blockquote>
<h2 id="二、Ribbon负载均衡"><a href="#二、Ribbon负载均衡" class="headerlink" title="二、Ribbon负载均衡"></a>二、Ribbon负载均衡</h2><blockquote>
<p>基于上一章所创建的Ribbon示例，作为服务提供者</p>
</blockquote>
<h2 id="三、Hystrix断路器"><a href="#三、Hystrix断路器" class="headerlink" title="三、Hystrix断路器"></a>三、Hystrix断路器</h2><blockquote>
<p>理论上可在上一章的基础上，对服务消费者模块进行更改整合，此处为加深学习，我们重新创建个模块作为新的消费者</p>
</blockquote>
<p>1、创建 hystrix-orcl-client-service 项目模块<br>2、pom文件中加入hystrix：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、配置文件–同上一章ribbon消费者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8401</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: ribbon-orcl-client-service</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8001/eureka/</span></span><br><span class="line">      </span><br><span class="line">service-url:</span><br><span class="line">   dept-service: http:<span class="comment">//ribbon-orcl-server-service</span></span><br></pre></td></tr></table></figure>

<p>4、添加Ribbon初始化文件–同上一章ribbon消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@LoadBalanced</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、创建一个controller控制层 DeptController</p>
<blockquote>
<p>此处我们稍作调整：控制层去调用业务逻辑层service来实现功能，不再写在一个类中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hystrix"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDeptInfo</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.getDeptOne(deptNo);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、创建一个业务逻辑层 DeptService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;service-url.dept-service&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String deptServiceUrl;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDeptOne</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;deptNo&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、依次启动服务中心、服务提供者、服务消费者</p>
<p>8、页面访问，发现可以正常输出：<br><img src="https://img-blog.csdnimg.cn/20200507000827598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">9、此时我们可做如下模拟测试：</p>
<blockquote>
<p>9.1、输入一个数据库不存在的编号来访问<br>       <a href="http://localhost:8401/hystrix/dept/100" target="_blank" rel="noopener">http://localhost:8401/hystrix/dept/100</a></p>
</blockquote>
<blockquote>
<p>9.2、结束服务提供者的服务</p>
</blockquote>
<p>此时，我们能发现不管是第一种还是第二种测试下，页面在执行之后都会显示错误信息，后端控制台报错，并且服务停止。</p>
<p>那么有没有一种好的机制，当某个服务发生故障时，通过某种方式，给调用方返回一个错误响应，而不是长时间的等待，这样就不会使得调用方由于长时间得不到响应而占用线程，从而防止故障的蔓延呢？Hystrix。</p>
<p>10、更改消费者模块中的代码，使用Hystrix，完成 <strong>服务降级</strong><br>   10.1：改造DeptService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;service-url.dept-service&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String deptServiceUrl;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallbackfail"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDeptOne</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;deptNo&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 注意：声明的参数需要包含controller的声明参数</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> deptNo</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">fallbackfail</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"服务调用失败！"</span>, deptNo);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10.2：启动文件启用Hystrix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EnableCircuitBreaker</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class HystrixOrclClientServiceApplication &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(HystrixOrclClientServiceApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>11、再次启动当前消费者模块<br>重复9.2步骤的测试：<br>11.1 地址栏输入<a href="http://localhost:8401/hystrix/dept/100" target="_blank" rel="noopener">http://localhost:8401/hystrix/dept/100</a> 时候，浏览器响应为：</p>
<p><img src="https://img-blog.csdnimg.cn/20200507002427583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">11.2、再次在地址栏输入一个数据库存在的编号<br><a href="http://localhost:8401/hystrix/dept/1，发现又可以正常响应数据，服务没有宕机" target="_blank" rel="noopener">http://localhost:8401/hystrix/dept/1，发现又可以正常响应数据，服务没有宕机</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200507002638615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">11.3：停止服务提供方服务<br><img src="https://img-blog.csdnimg.cn/20200507002921758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">11.4：再次启动服务提供者服务,发现又可以正常响应数据，服务没有宕机</p>
<p><img src="https://img-blog.csdnimg.cn/20200507003134429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="HystrixCommand详解"><a href="#HystrixCommand详解" class="headerlink" title="@HystrixCommand详解"></a>@HystrixCommand详解</h2><h2 id="1、-HystrixCommand中的常用参数"><a href="#1、-HystrixCommand中的常用参数" class="headerlink" title="1、@HystrixCommand中的常用参数"></a>1、@HystrixCommand中的常用参数</h2><blockquote>
<p>fallbackMethod：指定服务降级处理方法；</p>
</blockquote>
<blockquote>
<p>  ignoreExceptions：忽略某些异常，不发生服务降级；</p>
</blockquote>
<blockquote>
<p>  commandKey：命令名称，用于区分不同的命令；</p>
</blockquote>
<blockquote>
<p>   groupKey：分组名称，Hystrix会根据不同的分组来统计命令的告警及仪<br>   表盘信息；</p>
</blockquote>
<blockquote>
<p>  threadPoolKey：线程池名称，用于划分线程池。</p>
</blockquote>
<p>在DeptService中改造代码实现功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;service-url.dept-service&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String deptServiceUrl;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallbackfail"</span>, </span><br><span class="line">	commandKey = <span class="string">"getUserCommand"</span>, </span><br><span class="line">	groupKey = <span class="string">"getUserGroup"</span>, </span><br><span class="line">	threadPoolKey = <span class="string">"getUserThreadPool"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDeptOne</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;deptNo&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 声明的参数需要包含controller的声明参数</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> deptNo</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">fallbackfail</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"服务调用失败！"</span>, deptNo);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、使用ignoreExceptions忽略某些异常降级"><a href="#2、使用ignoreExceptions忽略某些异常降级" class="headerlink" title="2、使用ignoreExceptions忽略某些异常降级"></a>2、使用ignoreExceptions忽略某些异常降级</h2><p>2.1 DeptController中添加请求方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/exception/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDeptInfoException</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.getDeptInfoException(deptNo);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>2.2：在DeptService中添加实现方法，这里忽略了NullPointerException，当id为100时抛出IndexOutOfBoundsException并服务降级，id为2时抛出NullPointerException忽略，不进行服务降级：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里忽略了NullPointerException，当id为100时抛出IndexOutOfBoundsException，id为2时抛出NullPointerException：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptNo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallbackfailException"</span>, ignoreExceptions = &#123; NullPointerException<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Result</span> <span class="title">getDeptInfoException</span>(<span class="title">Integer</span> <span class="title">deptNo</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (deptNo == <span class="number">100</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (deptNo == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;deptNo&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">fallbackfailException</span><span class="params">(@PathVariable Integer deptNo, Throwable e)</span> </span>&#123;</span><br><span class="line">	LOGGER.error(<span class="string">"id &#123;&#125;,throwable class:&#123;&#125;"</span>, deptNo, e.getClass());</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"服务调用失败"</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.3 浏览器模拟请求 <a href="http://localhost:8401/hystrix/exception/100" target="_blank" rel="noopener">http://localhost:8401/hystrix/exception/100</a><br><img src="https://img-blog.csdnimg.cn/20200507183443919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">2.4 浏览器模拟请求 <a href="http://localhost:8401/hystrix/exception/2，发现服务未降级，异常忽略" target="_blank" rel="noopener">http://localhost:8401/hystrix/exception/2，发现服务未降级，异常忽略</a><br><img src="https://img-blog.csdnimg.cn/20200507183906231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Hystrix缓存"><a href="#Hystrix缓存" class="headerlink" title="Hystrix缓存"></a>Hystrix缓存</h2><blockquote>
<p>当系统并发量越来越大时，可以考虑使用缓存来优化系统，达到减轻并发请求线程数，提高响应速度的效果</p>
</blockquote>
<p>主要使用以下几个注解完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@CacheResult：开启缓存，默认所有参数作为缓存的key，cacheKeyMethod可以通过返回String类型的方法指定key；</span><br><span class="line"></span><br><span class="line">@CacheKey：指定缓存的key，可以指定参数或指定参数中的属性值为缓存key，cacheKeyMethod还可以通过返回String类型的方法指定；</span><br><span class="line"></span><br><span class="line">@CacheRemove：移除缓存，需要指定commandKey。</span><br></pre></td></tr></table></figure>

<p>1、DeptController中添加请求方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 模拟缓存</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> deptNo</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/cache/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDeptInfoByCache</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		HystrixRequestContext.initializeContext();<span class="comment">// 初始化请求上下文</span></span><br><span class="line"></span><br><span class="line">		deptService.getDeptInfoByCache(deptNo);</span><br><span class="line">		deptService.getDeptInfoByCache(deptNo);</span><br><span class="line">		deptService.getDeptInfoByCache(deptNo);</span><br><span class="line">		deptService.getDeptInfoByCache(deptNo);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作成功"</span>, <span class="number">200</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>PS: </p>
<blockquote>
<p>HystrixRequestContext.initializeContext();// 初始化请求上下文</p>
</blockquote>
<p> 这只是测试环境下这样初始化，真正的web项目是在filter中进行初始化的（有两种方式：首先都要要实现filter重写其方法，一种是采用注解的方式@WebFilter，别忘了在启动类上添加@ServletComponentScan注解,另一种是Java代码注册的方式会用到FilterRegistrationBean这个类).</p>
<p>现在上下文初始化好了，不过这里有一个坑:我以为缓存对每次request请求都生效（当然前提是没有清除缓存），我每调用一次controller，下一次你再调用这个controller就会从缓存中取，我理解错了，并不是这样的，因为你每请求一次controller就会走一次filter，上下文又会初始化一次，前面缓存的就失效了，又得重新来。所以你要是想测试缓存，你得在一次controller请求中多次调用那个加了缓存的service或HystrixCommand命令，看来hystrix的请求缓存和redis等存储不一样。所以仔细它的定义：<strong>在同一用户请求的上下文中，相同依赖服务的返回数据始终保持一致。在当次请求内对同一个依赖进行重复调用，只会真实调用一次。在当次请求内数据可以保证一致性</strong>。我还是感觉有点鸡肋。<strong>后面会给出解决方案</strong>，下面先继续这个功能吧。</p>
<p>2、DeptService中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 模拟缓存</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> deptNo</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@CacheResult</span>(cacheKeyMethod = <span class="string">"getCacheKey"</span>)</span><br><span class="line">	<span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallbackfail"</span>, commandKey = <span class="string">"getDeptInfoByCache"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDeptInfoByCache</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		LOGGER.info(<span class="string">"getDeptInfoByCache deptNo:&#123;&#125;"</span>, deptNo);</span><br><span class="line">		<span class="keyword">return</span> restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;deptNo&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 为缓存生成key的方法</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCacheKey</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> String.valueOf(deptNo);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>3、浏览器访问 <a href="http://localhost:8401/hystrix/cache/1：" target="_blank" rel="noopener">http://localhost:8401/hystrix/cache/1：</a></p>
<p><img src="https://img-blog.csdnimg.cn/2020050719325916.png#pic_center" alt="在这里插入图片描述">从控制台中信息可发现：这个接口中调用了四次getDeptInfoByCache方法，但是只打印了一次日志，说明有三次走的是缓存</p>
<h2 id="移除缓存"><a href="#移除缓存" class="headerlink" title="移除缓存"></a>移除缓存</h2><p>1、改造DeptController </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 模拟缓存</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> deptNo</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/cache/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDeptInfoByCache</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		HystrixRequestContext.initializeContext();<span class="comment">// 初始化请求上下文</span></span><br><span class="line"></span><br><span class="line">		deptService.getDeptInfoByCache(deptNo);</span><br><span class="line">		deptService.getDeptInfoByCache(deptNo);</span><br><span class="line">		deptService.removeCache(deptNo);<span class="comment">// 移除缓存</span></span><br><span class="line">		deptService.getDeptInfoByCache(deptNo);</span><br><span class="line">		deptService.getDeptInfoByCache(deptNo);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作成功"</span>, <span class="number">200</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>2、DeptService 添加移除缓存方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line">	<span class="meta">@CacheRemove</span>(commandKey = <span class="string">"getDeptInfoByCache"</span>, cacheKeyMethod = <span class="string">"getCacheKey"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">removeCache</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		LOGGER.info(<span class="string">"removeCache deptNo:&#123;&#125;"</span>, deptNo);</span><br><span class="line">		<span class="keyword">return</span> restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;deptNo&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>3、访问 <a href="http://localhost:8401/hystrix/cache/1" target="_blank" rel="noopener">http://localhost:8401/hystrix/cache/1</a><br><img src="https://img-blog.csdnimg.cn/20200507194143535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="HystrixRequestContext进行初始化和关闭"><a href="#HystrixRequestContext进行初始化和关闭" class="headerlink" title="HystrixRequestContext进行初始化和关闭"></a>HystrixRequestContext进行初始化和关闭</h2><p>1、在缓存使用过程中，我们需要在每次使用缓存的请求前后对HystrixRequestContext进行初始化和关闭，否则会出现如下异常：</p>
<blockquote>
<p>Request caching is not available. Maybe you need to initialize the<br>HystrixRequestContext?</p>
</blockquote>
<p>2、这里我们通过使用过滤器，在每个请求前后初始化和关闭HystrixRequestContext来解决该问题，在模块中添加如下代码，不再使用<strong>HystrixRequestContext.initializeContext();</strong>// 初始化请求上下文：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>, asyncSupported = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixRequestContextFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            context.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="请求合并"><a href="#请求合并" class="headerlink" title="请求合并"></a>请求合并</h2><blockquote>
<p>微服务系统中的服务间通信，需要通过远程调用来实现，随着调用次数越来越多，占用线程资源也会越来越多。<br>Hystrix中提供了@HystrixCollapser用于合并请求，从而达到减少通信消耗及线程数量的效果。</p>
</blockquote>
<p><strong>@HystrixCollapser的常用属性</strong></p>
<blockquote>
<pre><code>batchMethod：用于设置请求合并的方法

collapserProperties：请求合并属性，用于控制实例属性，有很多

timerDelayInMilliseconds：collapserProperties中的属性，用于控制每隔多少时间合并一次请求</code></pre></blockquote>
<p>1、DeptController 新增合并请求方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/queryByCollapser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">queryByCollapser</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">	Future&lt;Dept&gt; future1 = deptService.getDeptInfo(<span class="number">1</span>);</span><br><span class="line">	Future&lt;Dept&gt; future2 = deptService.getDeptInfo(<span class="number">3</span>);</span><br><span class="line">	future1.get();</span><br><span class="line">	future2.get();</span><br><span class="line">	ThreadUtil.safeSleep(<span class="number">200</span>);</span><br><span class="line">	Future&lt;Dept&gt; future3 = deptService.getDeptInfo(<span class="number">6</span>);</span><br><span class="line">	future3.get();</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"操作成功"</span>, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: 使用到的 关键点：<br>1.1、Java中的<strong>Future</strong>  可参考学习 <a href="https://www.jianshu.com/p/b8952f07ee5d" target="_blank" rel="noopener">java中的Future</a></p>
<p>1.2、<strong>ThreadUtil.safeSleep</strong><br>pom文件中引入即可使用：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2、DeptService 中新增方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@HystrixCollapser</span>实现请求合并</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptNo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@HystrixCollapser</span>(batchMethod = <span class="string">"listDeptByDeptNos"</span>, collapserProperties = &#123;</span><br><span class="line">		<span class="meta">@HystrixProperty</span>(name = <span class="string">"timerDelayInMilliseconds"</span>, value = <span class="string">"100"</span>) &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;Dept&gt; <span class="title">getDeptInfo</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;Dept&gt;() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Dept <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			Result result = restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;deptNo&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">			Map data = (Map) result.getData();</span><br><span class="line">			Dept dept = BeanUtil.mapToBean(data, Dept<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line">			LOGGER.info(<span class="string">"getDeptInfo deptName:&#123;&#125;"</span>, dept.getDeptName());</span><br><span class="line">			<span class="keyword">return</span> dept;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">listDeptByDeptNos</span><span class="params">(List&lt;Integer&gt; deptNos)</span> </span>&#123;</span><br><span class="line">	LOGGER.info(<span class="string">"listDeptByDeptNos:&#123;&#125;"</span>, deptNos);</span><br><span class="line">	Result result = restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/queryListByDeptNos?deptNos=&#123;1&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">			CollUtil.join(deptNos, ","));</span><br><span class="line">	<span class="keyword">return</span> (List&lt;Dept&gt;) result.getData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、执行  <a href="http://localhost:8401/hystrix/queryByCollapser后，控制台可发现" target="_blank" rel="noopener">http://localhost:8401/hystrix/queryByCollapser后，控制台可发现</a><br><img src="https://img-blog.csdnimg.cn/20200507233154962.png#pic_center" alt="在这里插入图片描述">由于我们设置了100毫秒进行一次请求合并，前两次被合并，最后一次自己单独合并。</p>
<h2 id="Hystrix的常用配置"><a href="#Hystrix的常用配置" class="headerlink" title="Hystrix的常用配置"></a>Hystrix的常用配置</h2><p>1、全局配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">hystrix:</span><br><span class="line">  command: #用于控制HystrixCommand的行为</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          strategy: THREAD #控制HystrixCommand的隔离策略，THREAD-&gt;线程池隔离策略(默认)，SEMAPHORE-&gt;信号量隔离策略</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: 1000 #配置HystrixCommand执行的超时时间，执行超过该时间会进行服务降级处理</span><br><span class="line">            interruptOnTimeout: true #配置HystrixCommand执行超时的时候是否要中断</span><br><span class="line">            interruptOnCancel: true #配置HystrixCommand执行被取消的时候是否要中断</span><br><span class="line">          timeout:</span><br><span class="line">            enabled: true #配置HystrixCommand的执行是否启用超时时间</span><br><span class="line">          semaphore:</span><br><span class="line">            maxConcurrentRequests: 10 #当使用信号量隔离策略时，用来控制并发量的大小，超过该并发量的请求会被拒绝</span><br><span class="line">      fallback:</span><br><span class="line">        enabled: true #用于控制是否启用服务降级</span><br><span class="line">      circuitBreaker: #用于控制HystrixCircuitBreaker的行为</span><br><span class="line">        enabled: true #用于控制断路器是否跟踪健康状况以及熔断请求</span><br><span class="line">        requestVolumeThreshold: 20 #超过该请求数的请求会被拒绝</span><br><span class="line">        forceOpen: false #强制打开断路器，拒绝所有请求</span><br><span class="line">        forceClosed: false #强制关闭断路器，接收所有请求</span><br><span class="line">      requestCache:</span><br><span class="line">        enabled: true #用于控制是否开启请求缓存</span><br><span class="line">  collapser: #用于控制HystrixCollapser的执行行为</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      maxRequestsInBatch: 100 #控制一次合并请求合并的最大请求数</span><br><span class="line">      timerDelayinMilliseconds: 10 #控制多少毫秒内的请求会被合并成一个</span><br><span class="line">      requestCache:</span><br><span class="line">        enabled: true #控制合并请求是否开启缓存</span><br><span class="line">  threadpool: #用于控制HystrixCommand执行所在线程池的行为</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      coreSize: 10 #线程池的核心线程数</span><br><span class="line">      maximumSize: 10 #线程池的最大线程数，超过该线程数的请求会被拒绝</span><br><span class="line">      maxQueueSize: -1 #用于设置线程池的最大队列大小，-1采用SynchronousQueue，其他正数采用LinkedBlockingQueue</span><br><span class="line">      queueSizeRejectionThreshold: 5 #用于设置线程池队列的拒绝阀值，由于LinkedBlockingQueue不能动态改版大小，使用时需要用该参数来控制线程数</span><br></pre></td></tr></table></figure>

<p>2、实例配置</p>
<blockquote>
<p>实例配置只需要将全局配置中的default换成与之对应的key即可。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    HystrixComandKey: #将default换成HystrixComrnandKey</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          strategy: THREAD</span><br><span class="line">  collapser:</span><br><span class="line">    HystrixCollapserKey: #将default换成HystrixCollapserKey</span><br><span class="line">      maxRequestsInBatch: <span class="number">100</span></span><br><span class="line">  threadpool:</span><br><span class="line">    HystrixThreadPoolKey: #将default换成HystrixThreadPoolKey</span><br><span class="line">      coreSize: <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>3、配置文件中相关key的说明</p>
<ul>
<li>HystrixComandKey对应@HystrixCommand中的commandKey属性；</li>
<li>HystrixCollapserKey对应@HystrixCollapser注解中的collapserKey属性；</li>
<li>HystrixThreadPoolKey对应@HystrixCommand中的threadPoolKey属性。</li>
</ul>
<h2 id="本章模块"><a href="#本章模块" class="headerlink" title="本章模块"></a>本章模块</h2><p>springcloud-learning<br>├── eureka-cloud-server – eureka注册中心<br>├── ribbon-orcl-server-service – 提供Dept对象CRUD接口的服务—提供者<br>└── hystrix-orcl-client-service – hystrix服务调用—-消费者</p>
<p><strong><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></strong></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（06）之 OpenFeign服务消费者</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8806%EF%BC%89%E4%B9%8B-OpenFeign%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85/</url>
    <content><![CDATA[<h2 id="Feign简介"><a href="#Feign简介" class="headerlink" title="Feign简介"></a>Feign简介</h2><p>Spring Cloud OpenFeign 是声明式的服务调用工具，它整合了Ribbon和Hystrix，拥有负载均衡和服务容错功能。</p>
<a id="more"></a>
<p>Feign是声明式的服务调用工具，我们只需创建一个接口并用注解的方式来配置它，就可以实现对某个服务接口的调用，简化了直接使用RestTemplate来调用服务接口的开发量。Feign具备可插拔的注解支持，同时支持Feign注解、JAX-RS注解及SpringMvc注解。当使用Feign时，Spring Cloud集成了Ribbon和Eureka以提供负载均衡的服务调用及基于Hystrix的服务容错保护功能。</p>
<h2 id="模块Demo"><a href="#模块Demo" class="headerlink" title="模块Demo"></a>模块Demo</h2><h2 id="一、创建一个-feign-service-模块"><a href="#一、创建一个-feign-service-模块" class="headerlink" title="一、创建一个 feign-service 模块"></a>一、创建一个 feign-service 模块</h2><blockquote>
<p>通过feign-service模块作为消费者，来调用提供者的接口</p>
</blockquote>
<p>1、pom文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">      &lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、配置文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8701</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: feign-service</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>3、创建一个service接口，通过协议来调用提供者的服务：</p>
<blockquote>
<p>不需要配置文件通过service-url.dept-service: <a href="http://ribbon-orcl-server-service这种形式。" target="_blank" rel="noopener">http://ribbon-orcl-server-service这种形式。</a><br>通过@FeignClient 注解实现了一个Feign客户端，其中的value值为：ribbon-orcl-server-service 表示这是对ribbon-orcl-server-service服务的接口调用。</p>
</blockquote>
<blockquote>
<p>接口代码为调用的提供者的controller控制层代码，只需将其改为接口，保留原来的SpringMvc注解即可，此处需要注意控制层的命名空间，必须加上不然会出现报错异常，访问不到提供者的接口方法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"ribbon-orcl-server-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/insert"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">insert</span><span class="params">(@RequestBody Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function">Result&lt;Dept&gt; <span class="title">getDept</span><span class="params">(@PathVariable Integer deptNo)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/listDept"</span>)</span><br><span class="line">	Result&lt;List&lt;Dept&gt;&gt; listDept();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/queryListByDeptNos"</span>)</span><br><span class="line">	Result&lt;List&lt;Dept&gt;&gt; queryListByDeptNos(<span class="meta">@RequestParam</span> List&lt;Integer&gt; deptNos);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/update"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">update</span><span class="params">(@RequestBody Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/delete/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">delete</span><span class="params">(@PathVariable Integer deptNo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、DeptFeignController 控制层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/feign"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptFeignController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.insert(dept);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;Dept&gt; <span class="title">getDept</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.getDept(deptNo);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/listDept"</span>)</span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; listDept() &#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.listDept();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/queryListByDeptNos"</span>)</span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; queryListByDeptNos(<span class="meta">@RequestParam</span> List&lt;Integer&gt; deptNos) &#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.queryListByDeptNos(deptNos);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.update(dept);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/delete/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.delete(deptNo);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、启动类上添加@EnableFeignClients注解来启用Feign的客户端功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignServiceApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(FeignServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、依次启动注册中心、服务提供者的集群、消费者：</p>
<p><img src="https://img-blog.csdnimg.cn/20200511225619751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">7、负载均衡测试：</p>
<blockquote>
<p>多次调用 localhost:8701/feign/1 进行测试，可以发现运行在8201和8202的提供者服务交替打印如下信息：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200511225914852.png#pic_center" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200511225923144.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>和hystrix一样实现了负载均衡效果</p>
</blockquote>
<h2 id="二、Feign中的实现服务降级"><a href="#二、Feign中的实现服务降级" class="headerlink" title="二、Feign中的实现服务降级"></a>二、Feign中的实现服务降级</h2><blockquote>
<p>Feign中的服务降级使用起来非常方便，只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可，下面我们为DeptService接口添加一个服务降级实现类。</p>
</blockquote>
<p>1、新建类DeptFallbackService：</p>
<blockquote>
<p>此处仅做演示用，因此服务降级信息未做更多考虑</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptFallbackService</span> <span class="keyword">implements</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;Dept&gt; <span class="title">getDept</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; listDept() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; queryListByDeptNos(List&lt;Integer&gt; deptNos) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、更改DeptService类，在@FeignClient注解中添加fallback信息,设置异常情况下服务降级处理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"ribbon-orcl-server-service"</span>, fallback = DeptFallbackService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/insert"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">insert</span><span class="params">(@RequestBody Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function">Result&lt;Dept&gt; <span class="title">getDept</span><span class="params">(@PathVariable Integer deptNo)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/listDept"</span>)</span><br><span class="line">	Result&lt;List&lt;Dept&gt;&gt; listDept();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/queryListByDeptNos"</span>)</span><br><span class="line">	Result&lt;List&lt;Dept&gt;&gt; queryListByDeptNos(<span class="meta">@RequestParam</span> List&lt;Integer&gt; deptNos);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/update"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">update</span><span class="params">(@RequestBody Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/delete/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">delete</span><span class="params">(@PathVariable Integer deptNo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、重启当前模块</p>
<p>4、服务降级测试：</p>
<blockquote>
<p>查询一个数据库不存在的编号信息，或者停止服务提供者服务：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200511231829814.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="三、日志功能"><a href="#三、日志功能" class="headerlink" title="三、日志功能"></a>三、日志功能</h2><blockquote>
<p>Feign提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解Feign中Http请求的细节。</p>
</blockquote>
<p><strong>日志级别</strong></p>
<pre><code>NONE：默认的，不显示任何日志；
BASIC：仅记录请求方法、URL、响应状态码及执行时间；
HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息；
FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。</code></pre><p><strong>通过配置开启更为详细的日志</strong></p>
<p>1、创建一个FeignConfig 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	Logger.<span class="function">Level <span class="title">level</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、配置文件中需要开启日志的Feign客户端：</p>
<blockquote>
<p>配置ribbon-orcl-server-service的日志级别为debug:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    cn.chfsun.service: debug</span><br></pre></td></tr></table></figure>

<p>3、查看日志信息：</p>
<p><img src="https://img-blog.csdnimg.cn/20200511234909519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="四、常用配置"><a href="#四、常用配置" class="headerlink" title="四、常用配置"></a>四、常用配置</h2><p><strong>1、Feign自己的配置：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true #在Feign中开启Hystrix</span><br><span class="line">  compression:</span><br><span class="line">    request:</span><br><span class="line">      enabled: false #是否对请求进行GZIP压缩</span><br><span class="line">      mime-types: text/xml,application/xml,application/json #指定压缩的请求数据类型</span><br><span class="line">      min-request-size: 2048 #超过该大小的请求会被压缩</span><br><span class="line">    response:</span><br><span class="line">      enabled: false #是否对响应进行GZIP压缩</span><br><span class="line">##修改日志级别</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    cn.chfsun.service: debug</span><br></pre></td></tr></table></figure>

<p><strong>2、Feign中的Hystrix配置</strong></p>
<p>在Feign中配置Hystrix可以直接使用Hystrix的配置，具体可以参考spring cloud 之 Hystrix</p>
<p><strong>3、Feign中的Ribbon配置</strong></p>
<p>在Feign中配置Ribbon可以直接使用Ribbon的配置，具体可以参考  spring cloud 之 Ribbon</p>
<h2 id="五、本章模块"><a href="#五、本章模块" class="headerlink" title="五、本章模块"></a>五、本章模块</h2><p>springcloud-learning<br>├── eureka-server – eureka注册中心<br>├── ribbon-orcl-server-service – 服务提供者<br>└── feign-service – 服务消费者</p>
<p><strong><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></strong></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>OpenFeign</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（07）之 Zuul服务网关</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8807%EF%BC%89%E4%B9%8B-Zuul%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h2 id="一、Zuul简介"><a href="#一、Zuul简介" class="headerlink" title="一、Zuul简介"></a>一、Zuul简介</h2><p>Spring Cloud Zuul 是Spring Cloud Netflix 子项目的核心组件之一，可以作为微服务架构中的API网关使用，支持动态路由与过滤功能。</p>
<a id="more"></a>
<p>API网关为微服务架构中的服务提供了统一的访问入口，客户端通过API网关访问相关服务。API网关的定义类似于设计模式中的门面模式，它相当于整个微服务架构中的门面，所有客户端的访问都通过它来进行路由及过滤。它实现了请求路由、负载均衡、校验过滤、服务容错、服务聚合等功能。</p>
<h2 id="二、示例Demo"><a href="#二、示例Demo" class="headerlink" title="二、示例Demo"></a>二、示例Demo</h2><blockquote>
<p>路由功能负责将外部请求转发到具体的服务实例上去，是实现统一访问入口的基础</p>
</blockquote>
<p><strong>1、新建zuul-orcl-proxy模块</strong></p>
<blockquote>
<p>使用当前模块来路由到其它服务提供者或者服务消费者</p>
</blockquote>
<p>2、pom文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、配置文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8801</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: zuul-orcl-proxy</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure>
<p>4、配置文件中路由规则设置：</p>
<blockquote>
<p>路由设置可分为：指定路由规则和默认路由规则：</p>
</blockquote>
<blockquote>
<p>1、指定路由规则<br>我们可以通过修改application.yml中的配置来配置路由规则，这里我们将匹配/hystrixClient/<strong>的请求路由到hystrix-orcl-client-service服务上去，匹配/feignService/</strong>的请求路由到feign-service上去。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  <span class="selector-tag">routes</span>:</span><br><span class="line">    # 给服务配置路由</span><br><span class="line">    <span class="selector-tag">hystrix-orcl-client-service</span>:</span><br><span class="line">      path: /hystrixClient/**</span><br><span class="line">    <span class="selector-tag">feign-service</span>:</span><br><span class="line">      path: /feignService/**</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2、默认路由规则：<br>Zuul和Eureka结合使用，可以实现路由的自动配置，自动配置的路由以服务名称为匹配路径，相当于如下配置</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  <span class="selector-tag">routes</span>:</span><br><span class="line">    # 给服务配置路由</span><br><span class="line">    <span class="selector-tag">hystrix-orcl-client-service</span>:</span><br><span class="line">      path: /hystrix-orcl-client-service/**</span><br><span class="line">    <span class="selector-tag">feign-service</span>:</span><br><span class="line">      path: /feign-service/**</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3、如果不想使用默认的路由规则，可以添加以下配置来忽略默认路由配置：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  #关闭默认路由配置</span><br><span class="line">  <span class="selector-tag">ignored-services</span>: <span class="selector-tag">hystrix-orcl-client-service</span>,<span class="selector-tag">feign-service</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>4、配置访问前缀<br>可以通过以下配置来给网关路径添加前缀，假定添加了/proxy前缀，这样我们需要访问<a href="http://localhost:8801/proxy/hystrix-orcl-client-service/hystrix/dept/1才能访问到hystrix-orcl-client-service中的接口。" target="_blank" rel="noopener">http://localhost:8801/proxy/hystrix-orcl-client-service/hystrix/dept/1才能访问到hystrix-orcl-client-service中的接口。</a></p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  #给网关路由添加前缀</span><br><span class="line">  prefix: /proxy</span><br></pre></td></tr></table></figure>
<blockquote>
<p>5、Header过滤及重定向添加Host:<br>Zuul在请求路由时，默认会过滤掉一些敏感的头信息，以下配置可以防止路由时的Cookie及Authorization的丢失：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  #配置过滤敏感的请求头信息，设置为空就不会过滤</span><br><span class="line">  <span class="selector-tag">sensitive-headers</span>: <span class="selector-tag">Cookie</span>,<span class="selector-tag">Set-Cookie</span>,<span class="selector-tag">Authorization</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>6、Zuul在请求路由时，不会设置最初的host头信息，以下配置可以解决：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  #设置为<span class="selector-tag">true</span>重定向是会添加<span class="selector-tag">host</span>请求头</span><br><span class="line">  <span class="selector-tag">add-host-header</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure>


<p>5、启动类上添加 @EnableZuulProxy 注解来启用Zuul的API网关功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulOrclProxyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ZuulOrclProxyApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、依次启动相关服务后：<br><img src="https://img-blog.csdnimg.cn/20200512194739131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">7、路由测试：</p>
<p>访问<a href="http://localhost:8801/hystrixClient/hystrix/dept/6可以发现请求路由到了hystrix-orcl-client-service上了；" target="_blank" rel="noopener">http://localhost:8801/hystrixClient/hystrix/dept/6可以发现请求路由到了hystrix-orcl-client-service上了；</a></p>
<p>访问<a href="http://localhost:8801/feignService/feign/1可以发现请求路由到了feign-service上了。" target="_blank" rel="noopener">http://localhost:8801/feignService/feign/1可以发现请求路由到了feign-service上了。</a></p>
<p>8、查看Hystrix实例监控信息：<br><img src="https://img-blog.csdnimg.cn/20200512201253322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="三、SpringBoot-Actuator查看路由信息"><a href="#三、SpringBoot-Actuator查看路由信息" class="headerlink" title="三、SpringBoot Actuator查看路由信息"></a>三、SpringBoot Actuator查看路由信息</h2><p>1、pom.xml中添加相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、application.yaml配置文件，开启查看路由的端点：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">management</span>:</span><br><span class="line">  <span class="selector-tag">endpoints</span>:</span><br><span class="line">    <span class="selector-tag">web</span>:</span><br><span class="line">      <span class="selector-tag">exposure</span>:</span><br><span class="line">        include: 'routes'</span><br></pre></td></tr></table></figure>
<p>3、通过访问<a href="http://localhost:8801/actuator/routes查看简单路由信息：" target="_blank" rel="noopener">http://localhost:8801/actuator/routes查看简单路由信息：</a><br><img src="https://img-blog.csdnimg.cn/20200512203402771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">4、通过访问<a href="http://localhost:8801/actuator/routes/details查看详细路由信息：" target="_blank" rel="noopener">http://localhost:8801/actuator/routes/details查看详细路由信息：</a><br><img src="https://img-blog.csdnimg.cn/20200512203513859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="四、Zuul过滤器"><a href="#四、Zuul过滤器" class="headerlink" title="四、Zuul过滤器"></a>四、Zuul过滤器</h2><blockquote>
<p>路由与过滤是Zuul的两大核心功能，路由功能负责将外部请求转发到具体的服务实例上去，是实现统一访问入口的基础，过滤功能负责对请求过程进行额外的处理，是请求校验过滤及服务聚合的基础。</p>
</blockquote>
<p>1、典型的过滤器类型</p>
<blockquote>
<p>   1、pre：在请求被路由到目标服务前执行，比如权限校验、打印日志等功能；</p>
</blockquote>
<blockquote>
<p>  2、 routing：在请求被路由到目标服务时执行，这是使用Apache HttpClient或Netflix Ribbon构建和发送原始HTTP请求的地方；</p>
</blockquote>
<blockquote>
<p>   3、post：在请求被路由到目标服务后执行，比如给目标服务的响应添加头信息，收集统计数据等功能；</p>
</blockquote>
<blockquote>
<p>   4、error：请求在其他阶段发生错误时执行;</p>
</blockquote>
<p>2、过滤器的生命周期：<br><img src="https://img-blog.csdnimg.cn/20200512204913798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>3、自定义过滤器</p>
<p>3.1、 新建一个PreLogFilter类继承ZuulFilter</p>
<blockquote>
<p>这是一个前置过滤器，用于在请求路由到目标服务前打印请求日志</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreLogFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PreLogFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 指定过滤器类型 可选pre、routing、post、error四种。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 过滤器执行顺序，数值越小优先级越高。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否进行过滤，返回true会执行过滤。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 自定义的过滤器逻辑，当shouldFilter()返回true时会执行。 模拟一个登录过滤</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">		RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">		HttpServletRequest request = currentContext.getRequest();</span><br><span class="line"></span><br><span class="line">		String remoteHost = request.getRemoteHost();</span><br><span class="line">		String method = request.getMethod();</span><br><span class="line">		String requestURI = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">		LOGGER.info(<span class="string">"Remote host:&#123;&#125;,method:&#123;&#125;,uri:&#123;&#125;"</span>, remoteHost, method, requestURI);</span><br><span class="line">		String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (StringUtils.isNotEmpty(name) &amp;&amp; name.equals(<span class="string">"chfsun"</span>)) &#123;</span><br><span class="line">			currentContext.setSendZuulResponse(<span class="keyword">true</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			currentContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				HttpServletResponse res = currentContext.getResponse();</span><br><span class="line">				res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">				res.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">				res.getWriter().write(<span class="string">"用户校验不通过！！！"</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>覆盖方法解释：</p>
<p>   filterType：返回过滤器的类型。有pre、route、post、error等几种取值，分别对应上文的几种过滤器。详细可以参考com.netflix.zuul.ZuulFilter.filterType()中的注释。</p>
<p>   filterOrder：返回一个int值来指定过滤器的执行顺序，不同的过滤器允许返回相同的数字。</p>
<p>   shouldFilter：返回一个boolean值来判断该过滤器是否要执行，true表示执行，false表示不执行</p>
<p>   run：过滤器的具体逻辑</p>
<p>3.2、功能测试：</p>
<p>添加过滤器后，我们访问 <a href="http://localhost:8801/hystrixClient/hystrix/dept/6" target="_blank" rel="noopener">http://localhost:8801/hystrixClient/hystrix/dept/6</a>测试下，会打印如下日志信息：</p>
<p><img src="https://img-blog.csdnimg.cn/20200512205811634.png#pic_center" alt="在这里插入图片描述">浏览器中在name验证错误时：<br><img src="https://img-blog.csdnimg.cn/20200513001759643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">输入一个正确name后：<br><img src="https://img-blog.csdnimg.cn/20200513001823829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>4、禁用过滤器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  <span class="selector-tag">filterClassName</span>:</span><br><span class="line">    <span class="selector-tag">filter</span>:</span><br><span class="line">      <span class="selector-tag">disable</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure>

<p>例如：禁用PreLogFilter的示例配置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  <span class="selector-tag">PreLogFilter</span>:</span><br><span class="line">    <span class="selector-tag">pre</span>:</span><br><span class="line">      <span class="selector-tag">disable</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure>

<h2 id="五、Ribbon和Hystrix的支持"><a href="#五、Ribbon和Hystrix的支持" class="headerlink" title="五、Ribbon和Hystrix的支持"></a>五、Ribbon和Hystrix的支持</h2><blockquote>
<p>由于Zuul自动集成了Ribbon和Hystrix，所以Zuul天生就有负载均衡和服务容错能力，我们可以通过Ribbon和Hystrix的配置来配置Zuul中的相应功能。</p>
</blockquote>
<ul>
<li>可以使用Hystrix的配置来设置路由转发时HystrixCommand的执行超时时间：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hystrix</span>:</span><br><span class="line">  # 用于控制<span class="selector-tag">HystrixCommand</span>的行为</span><br><span class="line">  <span class="selector-tag">command</span>:</span><br><span class="line">    <span class="selector-tag">default</span>:</span><br><span class="line">      <span class="selector-tag">execution</span>:</span><br><span class="line">        <span class="selector-tag">isolation</span>:</span><br><span class="line">          <span class="selector-tag">thread</span>:</span><br><span class="line">            # 配置<span class="selector-tag">HystrixCommand</span>执行的超时时间，执行超过该时间会进行服务降级处理</span><br><span class="line">            <span class="selector-tag">timeoutInMilliseconds</span>: 1000</span><br></pre></td></tr></table></figure>


<ul>
<li>可以使用Ribbon的配置来设置路由转发时请求连接及处理的超时时间：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ribbon</span>:</span><br><span class="line">  # 服务请求连接超时时间（毫秒）</span><br><span class="line">  <span class="selector-tag">ConnectTimeout</span>: 1000</span><br><span class="line">  # 服务请求处理超时时间（毫秒）</span><br><span class="line">  <span class="selector-tag">ReadTimeout</span>: 3000</span><br></pre></td></tr></table></figure>

<h2 id="六、Zull常用配置"><a href="#六、Zull常用配置" class="headerlink" title="六、Zull常用配置"></a>六、Zull常用配置</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zuul</span>:</span><br><span class="line">  <span class="selector-tag">routes</span>: #给服务配置路由</span><br><span class="line">    <span class="selector-tag">hystrix-orcl-client-service</span>:</span><br><span class="line">      path: /hystrixClient/**</span><br><span class="line">    <span class="selector-tag">feign-service</span>:</span><br><span class="line">      path: /feignService/**</span><br><span class="line">  <span class="selector-tag">ignored-services</span>: <span class="selector-tag">hystrix-orcl-client-service</span>,<span class="selector-tag">feign-service</span> #关闭默认路由配置</span><br><span class="line">  prefix: /proxy #给网关路由添加前缀</span><br><span class="line">  <span class="selector-tag">sensitive-headers</span>: <span class="selector-tag">Cookie</span>,<span class="selector-tag">Set-Cookie</span>,<span class="selector-tag">Authorization</span> #配置过滤敏感的请求头信息，设置为空就不会过滤</span><br><span class="line">  <span class="selector-tag">add-host-header</span>: <span class="selector-tag">true</span> #设置为<span class="selector-tag">true</span>重定向是会添加<span class="selector-tag">host</span>请求头</span><br><span class="line">  <span class="selector-tag">retryable</span>: <span class="selector-tag">true</span> # 关闭重试机制</span><br><span class="line">  <span class="selector-tag">PreLogFilter</span>:</span><br><span class="line">    <span class="selector-tag">pre</span>:</span><br><span class="line">      <span class="selector-tag">disable</span>: <span class="selector-tag">false</span> #控制是否启用过滤器</span><br></pre></td></tr></table></figure>

<h2 id="七、本章示例使用到的模块"><a href="#七、本章示例使用到的模块" class="headerlink" title="七、本章示例使用到的模块"></a>七、本章示例使用到的模块</h2><p>springcloud-learning<br>├── eureka-server – eureka注册中心<br>├── ribbon-orcl-server-service – 服务提供者<br>├── feign-service – 服务消费者<br>└── zuul-orcl-proxy – 作为路由网关的zuul</p>
<p><strong><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></strong></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（08）之 Config分布式配置中心</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8808%EF%BC%89%E4%B9%8B-Config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h2 id="一、Spring-Cloud-Config-简介"><a href="#一、Spring-Cloud-Config-简介" class="headerlink" title="一、Spring Cloud Config 简介"></a>一、Spring Cloud Config 简介</h2><p>Spring Cloud Config 可以为微服务架构中的应用提供集中化的外部配置支持，它分为服务端和客户端两个部分。</p>
<p>服务端被称为分布式配置中心，它是个独立的应用，可以从配置仓库获取配置信息并提供给客户端使用。</p>
<a id="more"></a>
<p>客户端可以通过配置中心来获取配置信息，在启动时加载配置。</p>
<p>Spring Cloud Config 的配置中心默认采用Git来存储配置信息，所以天然就支持配置信息的版本管理，并且可以使用Git客户端来方便地管理和访问配置信息。</p>
<h2 id="二、准备配置信息"><a href="#二、准备配置信息" class="headerlink" title="二、准备配置信息"></a>二、准备配置信息</h2><blockquote>
<p>因为考虑到网络访问效率及识别度问题，此处我们使用码云gitee作为存储配置信息的Git仓库，配置文件信息仅做测试用例，无需复杂信息，简单即可</p>
</blockquote>
<p>1、仓库目录：<br><img src="https://img-blog.csdnimg.cn/20200513222512630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>1.1、master分支下的配置信息：</strong></p>
<p>config-dev.yml:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">dev</span>(<span class="selector-tag">master</span>)"</span><br></pre></td></tr></table></figure>

<p>config-test.yml:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">test</span>(<span class="selector-tag">master</span>)"</span><br></pre></td></tr></table></figure>

<p>config-prod.yml:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">prod</span>(<span class="selector-tag">master</span>)"</span><br></pre></td></tr></table></figure>

<p><strong>1.2、dev分支下的配置信息</strong><br>config-dev.yml:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">dev</span>(<span class="selector-tag">dev</span>)"</span><br></pre></td></tr></table></figure>

<p>config-test.yml:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">test</span>(<span class="selector-tag">dev</span>)"</span><br></pre></td></tr></table></figure>

<p>config-prod.yml:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">prod</span>(<span class="selector-tag">dev</span>)"</span><br></pre></td></tr></table></figure>

<p>1.3、config子目录下的配置同上，为做区分内容上做下改变：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">config</span> <span class="selector-tag">dir</span> <span class="selector-tag">dev</span>(<span class="selector-tag">master</span>)"</span><br></pre></td></tr></table></figure>
<p>余下部分省略,自行补充……</p>
<h2 id="示例Demo"><a href="#示例Demo" class="headerlink" title="示例Demo"></a>示例Demo</h2><h2 id="三、config-server服务端"><a href="#三、config-server服务端" class="headerlink" title="三、config-server服务端"></a>三、config-server服务端</h2><p>1、创建<strong>config-server</strong>模块</p>
<p>2、pom.xml文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、配置文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8901</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">config-server</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">config</span>:</span><br><span class="line">      <span class="selector-tag">server</span>:</span><br><span class="line">        <span class="selector-tag">git</span>:</span><br><span class="line">          # 配置存储配置信息的<span class="selector-tag">Git</span>仓库</span><br><span class="line">          uri: https://gitee.com/xxx/springcloud-config.git  # 你的gitee仓库地址</span><br><span class="line">          <span class="selector-tag">username</span>: <span class="selector-tag">xxxx</span></span><br><span class="line">          <span class="selector-tag">password</span>: <span class="selector-tag">xxxxxx</span></span><br><span class="line">          # 开启启动时直接从<span class="selector-tag">git</span>获取配置</span><br><span class="line">          <span class="selector-tag">clone-on-start</span>: <span class="selector-tag">true</span></span><br><span class="line">          # 获取子目录下的配置</span><br><span class="line">          #search-paths: '&#123;application&#125;'</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br></pre></td></tr></table></figure>

<p>4、启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ConfigServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、依次启动服务中心、config-server模块</p>
<p>6、测试获取获取配置信息：</p>
<p>6.1、获取配置文件信息的访问格式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 获取配置信息</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;</span><br><span class="line"># 获取配置文件信息</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br></pre></td></tr></table></figure>
<p>占位符相关解释：</p>
<blockquote>
<p>application：代表应用名称，默认为配置文件中的spring.application.name，如果配置了spring.cloud.config.name，则为该名称；</p>
</blockquote>
<blockquote>
<p>label：代表分支名称，对应配置文件中的spring.cloud.config.label；</p>
</blockquote>
<blockquote>
<p>profile：代表环境名称，对应配置文件中的spring.cloud.config.profile</p>
</blockquote>
<p>6.2、访问 <a href="http://localhost:8901/master/config-dev" target="_blank" rel="noopener">http://localhost:8901/master/config-dev</a> 来获取master分支上dev环境的配置信息；<br><img src="https://img-blog.csdnimg.cn/20200513224306379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">6.3、访问 <a href="http://localhost:8901/master/config-dev.yml" target="_blank" rel="noopener">http://localhost:8901/master/config-dev.yml</a> 来获取master分支上dev环境的配置文件信息，对比上面信息，可以看出配置信息和配置文件信息并不是同一个概念，显示如下：<br><img src="https://img-blog.csdnimg.cn/20200513224540720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>6.4、访问<a href="http://localhost:8901/master/config-test.yml来获取master分支上test环境的配置文件信息" target="_blank" rel="noopener">http://localhost:8901/master/config-test.yml来获取master分支上test环境的配置文件信息</a>:<br><img src="https://img-blog.csdnimg.cn/20200513224618818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="四、config-client客户端"><a href="#四、config-client客户端" class="headerlink" title="四、config-client客户端"></a>四、config-client客户端</h2><p>1、创建config-client模块</p>
<p>2、pom文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、配置文件bootstrap.yml：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9001</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">config-client</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    # <span class="selector-tag">config</span>客户端配置</span><br><span class="line">    <span class="selector-tag">config</span>:</span><br><span class="line">      # 分支名称</span><br><span class="line">      <span class="selector-tag">label</span>: <span class="selector-tag">master</span></span><br><span class="line">      # 启用配置后缀名称</span><br><span class="line">      <span class="selector-tag">profile</span>: <span class="selector-tag">dev</span></span><br><span class="line">      # 配置文件名称</span><br><span class="line">      <span class="selector-tag">name</span>: <span class="selector-tag">config</span></span><br><span class="line">      # 配置中心地址</span><br><span class="line">      uri: http://localhost:8901</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br></pre></td></tr></table></figure>

<p>3、新建控制层 ConfigClientController类用于获取配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;config.info&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/configInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、依次启动eureka-server、config-server、config-client服务</p>
<p>5、测试：</p>
<p>5.1、访问<a href="http://localhost:9001/configInfo，可以获取到dev分支下dev环境的配置：" target="_blank" rel="noopener">http://localhost:9001/configInfo，可以获取到dev分支下dev环境的配置：</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config info <span class="keyword">for</span> dev(master)</span><br></pre></td></tr></table></figure>

<p>5.2、获取子目录下的配置</p>
<blockquote>
<p>我们不仅可以把每个项目的配置放在不同的Git仓库存储，也可以在一个Git仓库中存储多个项目的配置，此时就会用到在子目录中搜索配置信息的配置。</p>
</blockquote>
<p>首先我们需要在config-server中添加相关配置，用于搜索子目录中的配置，这里我们用到了application占位符，表示对于不同的应用，我们从对应应用名称的子目录中搜索配置，比如config子目录中的配置对应config应用:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">config</span>:</span><br><span class="line">      <span class="selector-tag">server</span>:</span><br><span class="line">        <span class="selector-tag">git</span>: </span><br><span class="line">          search-paths: '&#123;application&#125;'</span><br></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:9001/configInfo进行测试，可以发现获取的是config子目录下的配置信息" target="_blank" rel="noopener">http://localhost:9001/configInfo进行测试，可以发现获取的是config子目录下的配置信息</a>:<br><img src="https://img-blog.csdnimg.cn/20200513225718992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="五、配置中心添加安全认证"><a href="#五、配置中心添加安全认证" class="headerlink" title="五、配置中心添加安全认证"></a>五、配置中心添加安全认证</h2><blockquote>
<p>以通过整合SpringSecurity来为配置中心添加安全认证</p>
</blockquote>
<p>1、创建config-security-server模块</p>
<p>2、pom文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">      &lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、配置文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8905</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">config-security-server</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">config</span>:</span><br><span class="line">      <span class="selector-tag">server</span>:</span><br><span class="line">        <span class="selector-tag">git</span>:</span><br><span class="line">          uri: https://gitee.com/xxxx/xxxxx.git</span><br><span class="line">          <span class="selector-tag">username</span>: <span class="selector-tag">xxxx</span></span><br><span class="line">          <span class="selector-tag">password</span>: <span class="selector-tag">xxxxxxxx</span></span><br><span class="line">          <span class="selector-tag">clone-on-start</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">security</span>:</span><br><span class="line">    <span class="selector-tag">user</span>:</span><br><span class="line">      # 配置用户名和密码</span><br><span class="line">      <span class="selector-tag">name</span>: <span class="selector-tag">root</span></span><br><span class="line">      <span class="selector-tag">password</span>: 123456</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br></pre></td></tr></table></figure>

<p>4、在config-client中添加一个新的配置文件bootstrap-security.yml:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9002</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">config-client</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    # <span class="selector-tag">config</span>客户端配置</span><br><span class="line">    <span class="selector-tag">config</span>:</span><br><span class="line">      # 分支名称</span><br><span class="line">      <span class="selector-tag">label</span>: <span class="selector-tag">master</span></span><br><span class="line">      # 启用配置后缀名称</span><br><span class="line">      <span class="selector-tag">profile</span>: <span class="selector-tag">dev</span></span><br><span class="line">      # 配置文件名称</span><br><span class="line">      <span class="selector-tag">name</span>: <span class="selector-tag">config</span></span><br><span class="line">      # 配置中心地址</span><br><span class="line">      uri: http://localhost:8905</span><br><span class="line">      <span class="selector-tag">username</span>: <span class="selector-tag">root</span></span><br><span class="line">      <span class="selector-tag">password</span>: 123456</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br></pre></td></tr></table></figure>

<p>5、依次启动项目 eureka-server、config-security-server、config-client服务：</p>
<blockquote>
<p>此时测试可发现，如果账号或密码错误时无法正常启动项目的</p>
</blockquote>
<p>6、测试</p>
<blockquote>
<p>使用bootstrap-security.yml启动config-client服务；</p>
</blockquote>
<p>访问<a href="http://localhost:9002/configInfo进行测试，发现可以获取到配置信息" target="_blank" rel="noopener">http://localhost:9002/configInfo进行测试，发现可以获取到配置信息</a>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config info <span class="keyword">for</span> dev(master)</span><br></pre></td></tr></table></figure>

<h2 id="六、config-sever集群搭建"><a href="#六、config-sever集群搭建" class="headerlink" title="六、config-sever集群搭建"></a>六、config-sever集群搭建</h2><blockquote>
<p>在微服务架构中，所有服务都从配置中心获取配置，配置中心一旦宕机，会发生很严重的问题，下面我们搭建一个双节点的配置中心集群来解决该问题。</p>
</blockquote>
<p>1、启动两个config-server分别运行在8902和8903端口上</p>
<p>2、添加一个新的config-client的配置文件bootstrap-cluster.yml，此处我们使用service-id赋值模块名称的方式，来代替配置中心uri的配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9003</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">config-client</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    # <span class="selector-tag">config</span>客户端配置</span><br><span class="line">    <span class="selector-tag">config</span>:</span><br><span class="line">      # 分支名称</span><br><span class="line">      <span class="selector-tag">label</span>: <span class="selector-tag">master</span></span><br><span class="line">      # 启用配置后缀名称</span><br><span class="line">      <span class="selector-tag">profile</span>: <span class="selector-tag">dev</span></span><br><span class="line">      # 配置文件名称</span><br><span class="line">      <span class="selector-tag">name</span>: <span class="selector-tag">config</span></span><br><span class="line">      # <span class="selector-tag">config-sever</span>集群搭建</span><br><span class="line">      <span class="selector-tag">discovery</span>:</span><br><span class="line">        <span class="selector-tag">enabled</span>: <span class="selector-tag">true</span></span><br><span class="line">        <span class="selector-tag">service-id</span>: <span class="selector-tag">config-server</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br></pre></td></tr></table></figure>

<p>3、以bootstrap-cluster.yml启动config-client服务，访问<a href="http://localhost:9003/configInfo，发现config-client可以获取到配置信息如下：" target="_blank" rel="noopener">http://localhost:9003/configInfo，发现config-client可以获取到配置信息如下：</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config info <span class="keyword">for</span> config dir dev(master)</span><br></pre></td></tr></table></figure>

<h2 id="七、本章用到的模块"><a href="#七、本章用到的模块" class="headerlink" title="七、本章用到的模块"></a>七、本章用到的模块</h2><p>springcloud-learning<br>├── eureka-server – eureka注册中心<br>├── config-server – 配置中心服务<br>├── config-security-server – 带安全认证的配置中心服务<br>└── config-client – 测试获取配置的客户端服务</p>
<p><strong><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></strong></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（09）之 Bus消息总线</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8809%EF%BC%89%E4%B9%8B-Bus%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="一、Spring-Cloud-Bus-简介"><a href="#一、Spring-Cloud-Bus-简介" class="headerlink" title="一、Spring Cloud Bus 简介"></a>一、Spring Cloud Bus 简介</h2><p>Spring Cloud Bus 使用轻量级的消息代理来连接微服务架构中的各个服务，可以将其用于广播状态更改（例如配置中心配置更改）或其他管理指令。</p>
<a id="more"></a>
<p>我们通常会使用消息代理来构建一个主题，然后把微服务架构中的所有服务都连接到这个主题上去，当我们向该主题发送消息时，所有订阅该主题的服务都会收到消息并进行消费。使用 Spring Cloud Bus 可以方便地构建起这套机制，所以 Spring Cloud Bus 又被称为消息总线。Spring Cloud Bus 配合 Spring Cloud Config 使用可以实现配置的动态刷新。</p>
<p>目前 Spring Cloud Bus 支持两种消息代理：RabbitMQ 和 Kafka，kafka我们已经学习过了，下面以 RabbitMQ 为例来演示下使用Spring Cloud Bus 动态刷新配置的功能。</p>
<h2 id="二、安装RabbitMQ"><a href="#二、安装RabbitMQ" class="headerlink" title="二、安装RabbitMQ"></a>二、安装RabbitMQ</h2><p>1、首先需要安装Erlang，下载地址：<a href="http://erlang.org/download/otp_win64_22.2.exe" target="_blank" rel="nofollow noopener">http://erlang.org/download…</a><br>下载好后，直接运行安装到一个不需要智商的磁盘即可。</p>
<p>2、安装RabbitMQ，下载地址：<a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.8.2/rabbitmq-server-3.8.2.exe" target="_blank" rel="nofollow noopener">https://dl.bintray.com/rabbitmq…</a><br>下载好后，直接运行安装到一个不需要智商的磁盘即可。</p>
<p>3、安装完成后，进入RabbitMQ安装目录下的sbin目录：<br><img src="https://img-blog.csdnimg.cn/20200514102852433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">4、使用你的右手cmd到dos命令窗口下，输入以下命令启动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200514103055217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5、打开一个专业点的浏览器，访问 ：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a>   如果你的操作比较专业就能看到下面界面：</p>
<p><img src="https://img-blog.csdnimg.cn/20200514103744109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>输入账号密码并登录：guest guest</p>
</blockquote>
<h2 id="三、动态刷新配置"><a href="#三、动态刷新配置" class="headerlink" title="三、动态刷新配置"></a>三、动态刷新配置</h2><blockquote>
<p>使用 Spring Cloud Bus 动态刷新配置需要配合 Spring Cloud Config 一起使用，我们使用上一节中的config-server、config-client模块来测试下该功能。</p>
</blockquote>
<p>1、给config-server的pom文件添加消息总线支持：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、添加配置文件application-amqp.yml，主要是添加了RabbitMQ的配置及暴露了刷新配置的Actuator端点：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8904</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">config-server</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">config</span>:</span><br><span class="line">      <span class="selector-tag">server</span>:</span><br><span class="line">        <span class="selector-tag">git</span>:</span><br><span class="line">          # 配置存储配置信息的<span class="selector-tag">Git</span>仓库</span><br><span class="line">          uri: https://gitee.com/xxxxx/xxxxx.git</span><br><span class="line">          <span class="selector-tag">username</span>: <span class="selector-tag">xxxxx</span></span><br><span class="line">          <span class="selector-tag">password</span>: <span class="selector-tag">xxxxxxxx</span></span><br><span class="line">          # 开启启动时直接从<span class="selector-tag">git</span>获取配置</span><br><span class="line">          <span class="selector-tag">clone-on-start</span>: <span class="selector-tag">true</span></span><br><span class="line">          # 获取子目录下的配置</span><br><span class="line">          #search-paths: '&#123;application&#125;'</span><br><span class="line">  <span class="selector-id">#rabbitmq</span>相关配置</span><br><span class="line">  <span class="selector-tag">rabbitmq</span>:</span><br><span class="line">    <span class="selector-tag">host</span>: <span class="selector-tag">localhost</span></span><br><span class="line">    <span class="selector-tag">port</span>: 5672</span><br><span class="line">    <span class="selector-tag">username</span>: <span class="selector-tag">guest</span></span><br><span class="line">    <span class="selector-tag">password</span>: <span class="selector-tag">guest</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br><span class="line"></span><br><span class="line"># 暴露<span class="selector-tag">bus</span>刷新配置的端点</span><br><span class="line"><span class="selector-tag">management</span>:</span><br><span class="line">  <span class="selector-tag">endpoints</span>:</span><br><span class="line">    <span class="selector-tag">web</span>:</span><br><span class="line">      <span class="selector-tag">exposure</span>:</span><br><span class="line">        include: 'bus-refresh'</span><br></pre></td></tr></table></figure>

<p>3、config-client添加消息总线支持：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>4、添加配置文件bootstrap-amqp1.yml及bootstrap-amqp2.yml用于启动两个不同的config-client，两个配置文件只有端口号不同：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9004</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">config-client</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    # <span class="selector-tag">config</span>客户端配置</span><br><span class="line">    <span class="selector-tag">config</span>:</span><br><span class="line">      # 分支名称</span><br><span class="line">      <span class="selector-tag">label</span>: <span class="selector-tag">master</span></span><br><span class="line">      # 启用配置后缀名称</span><br><span class="line">      <span class="selector-tag">profile</span>: <span class="selector-tag">dev</span></span><br><span class="line">      # 配置文件名称</span><br><span class="line">      <span class="selector-tag">name</span>: <span class="selector-tag">config</span></span><br><span class="line">      <span class="selector-tag">discovery</span>:</span><br><span class="line">        <span class="selector-tag">enabled</span>: <span class="selector-tag">true</span></span><br><span class="line">        <span class="selector-tag">service-id</span>: <span class="selector-tag">config-server</span></span><br><span class="line">  # <span class="selector-tag">rabbitmq</span>配置</span><br><span class="line">  <span class="selector-tag">rabbitmq</span>:</span><br><span class="line">    <span class="selector-tag">host</span>: <span class="selector-tag">localhost</span></span><br><span class="line">    <span class="selector-tag">port</span>: 5672</span><br><span class="line">    <span class="selector-tag">username</span>: <span class="selector-tag">guest</span></span><br><span class="line">    <span class="selector-tag">password</span>: <span class="selector-tag">guest</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">management</span>:</span><br><span class="line">  <span class="selector-tag">endpoints</span>:</span><br><span class="line">    <span class="selector-tag">web</span>:</span><br><span class="line">      <span class="selector-tag">exposure</span>:</span><br><span class="line">        include: 'refresh'</span><br></pre></td></tr></table></figure>

<p>5、动态刷新配置测试</p>
<p>依次启动模块：eureka-server，以application-amqp.yml为配置启动config-server，以bootstrap-amqp1.yml为配置启动config-client，以bootstrap-amqp2.yml为配置再启动一个config-client，启动后注册中心显示如下</p>
<p><img src="https://img-blog.csdnimg.cn/2020051410571325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">6、此时我们登录RabbitMQ的控制台可以发现 Spring Cloud Bus 创建了一个叫springCloudBus的交换机及三个以 springCloudBus.anonymous开头的队列：</p>
<p><img src="https://img-blog.csdnimg.cn/20200514110041916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200514110138951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">7、调用  <a href="http://localhost:9004/configInfo" target="_blank" rel="noopener">http://localhost:9004/configInfo</a>  ，结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">config info <span class="keyword">for</span> <span class="title">dev</span><span class="params">(master)</span></span></span><br></pre></td></tr></table></figure>

<p>8、修改Gitee仓库中master分支下的config-dev.yml配置文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">修改前信息</span><br><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">dev</span>(<span class="selector-tag">master</span>)"</span><br><span class="line"></span><br><span class="line"># 修改后信息</span><br><span class="line"><span class="selector-tag">config</span>:</span><br><span class="line">  <span class="selector-tag">info</span>: "<span class="selector-tag">update</span> <span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">dev</span>(<span class="selector-tag">master</span>)"</span><br></pre></td></tr></table></figure>

<p>9、在控制层添加刷新的注解后，调用注册中心的接口刷新所有配置：<a href="http://localhost:8904/actuator/bus-refresh" target="_blank" rel="noopener">http://localhost:8904/actuator/bus-refresh</a>  ，此处最好使用专业的测试工具：</p>
<p><img src="https://img-blog.csdnimg.cn/20200514111149950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>10、刷新后再分别调用 <a href="http://localhost:9004/configInfo" target="_blank" rel="noopener">http://localhost:9004/configInfo</a> 和 <a href="http://localhost:9005/configInfo" target="_blank" rel="noopener">http://localhost:9005/configInfo</a> 获取配置信息，发现都已经刷新了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">update</span> <span class="selector-tag">config</span> <span class="selector-tag">info</span> <span class="selector-tag">for</span> <span class="selector-tag">dev</span>(<span class="selector-tag">master</span>)</span><br></pre></td></tr></table></figure>
<p>11、如果只需要刷新指定实例的配置可以使用以下格式进行刷新：<a href="http://localhost:8904/actuator/bus-refresh/{destination}" target="_blank" rel="noopener">http://localhost:8904/actuator/bus-refresh/{destination}</a> ，</p>
<p>例如：这里以刷新运行在9004端口上的config-client为例<a href="http://localhost:8904/actuator/bus-refresh/config-client:9004" target="_blank" rel="noopener">http://localhost:8904/actuator/bus-refresh/config-client:9004</a></p>
<h2 id="四、使用码云的WebHooks"><a href="#四、使用码云的WebHooks" class="headerlink" title="四、使用码云的WebHooks"></a>四、使用码云的WebHooks</h2><blockquote>
<p>WebHooks相当于是一个钩子函数，我们可以配置当向Git仓库push代码时触发这个钩子函数，这里以Gitee为例来介绍下其使用方式，这里当我们向配置仓库push代码时就会自动刷新服务配置了。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200514113027185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="五、本章模块"><a href="#五、本章模块" class="headerlink" title="五、本章模块"></a>五、本章模块</h2><p>springcloud-learning<br>├── eureka-server – eureka注册中心<br>├── config-server – 配置中心服务<br>└── config-client – 获取配置的客户端服务</p>
<p><strong><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></strong></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>bus</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（10）之 Sleuth服务链路跟踪</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8810%EF%BC%89%E4%B9%8B-Sleuth%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/</url>
    <content><![CDATA[<h2 id="一、Spring-Cloud-Sleuth-简介"><a href="#一、Spring-Cloud-Sleuth-简介" class="headerlink" title="一、Spring Cloud Sleuth 简介"></a>一、Spring Cloud Sleuth 简介</h2><p>随着我们的系统越来越庞大，各个服务间的调用关系也变得越来越复杂。当客户端发起一个请求时，这个请求经过多个服务后，最终返回了结果，经过的每一个服务都有可能发生延迟或错误，从而导致请求失败。这时候我们就需要请求链路跟踪工具来帮助我们，理清请求调用的服务链路，解决问题。</p>
<a id="more"></a>
<p>Sleuth 是分布式系统中跟踪服务间调用的工具，它可以直观地展示出一次请求的调用过程。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h2 id="二、整合Zipkin获取及分析日志"><a href="#二、整合Zipkin获取及分析日志" class="headerlink" title="二、整合Zipkin获取及分析日志"></a>二、整合Zipkin获取及分析日志</h2><p>1、为服务添加请求链路跟踪</p>
<blockquote>
<p>在原有项目模块基础上，通过ribbon-orcl-server-service 和 ribbon-orcl-client-service 之间的服务调用来演示该功能，这里我们调用 ribbon-orcl-client-service 的接口时，ribbon-orcl-client-service 会通过RestTemplate来调用ribbon-orcl-server-service 提供的接口。</p>
</blockquote>
<p>为ribbon-orcl-server-service和ribbon-orcl-server-service 添加相关依赖：</p>
<p>pom文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>配置文件配置收集日志的zipkin-server访问地址：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8201</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">ribbon-orcl-server-service</span></span><br><span class="line"><span class="selector-tag">zipkin</span>:</span><br><span class="line">  base-url: http://localhost:9411</span><br><span class="line">   #设置<span class="selector-tag">Sleuth</span>的抽样收集概率</span><br><span class="line">  <span class="selector-tag">sleuth</span>:</span><br><span class="line">    <span class="selector-tag">sampler</span>:</span><br><span class="line">      <span class="selector-tag">probability</span>: 0<span class="selector-class">.1</span></span><br></pre></td></tr></table></figure>

<p>2、整合Zipkin获取及分析日志</p>
<blockquote>
<p>Zipkin是Twitter的一个开源项目，可以用来获取和分析Spring Cloud Sleuth 中产生的请求链路跟踪日志，它提供了Web界面来帮助我们直观地查看请求链路跟踪信息</p>
</blockquote>
<p>SpringBoot 2.0以上版本已经不需要自行搭建zipkin-server，我们可以从该地址下载zipkin-server：<a href="https://repo1.maven.org/maven2/io/zipkin/java/zipkin-server/2.12.9/zipkin-server-2.12.9-exec.jar" target="_blank" rel="nofollow noopener">repo1.maven.org/maven2/io/z…</a></p>
<p>下载完成后使用以下命令运行zipkin-server：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar zipkin-server-<span class="number">2.12</span><span class="number">.9</span>-exec.jar</span><br></pre></td></tr></table></figure>

<p>Zipkin页面访问地址：<a href="http://localhost:9411" target="_blank" rel="noopener">http://localhost:9411</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200517112059843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">3、依次启动模块 启动eureka-sever，ribbon-orcl-server-service，ribbon-orcl-client-service</p>
<p><img src="https://img-blog.csdnimg.cn/2020051711233250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>4、多次调用（Sleuth为抽样收集）ribbon-orcl-client-service<br>的接口 <a href="http://localhost:8301/ribbon/1，调用完后查看Zipkin首页发现已经有请求链路跟踪信息了：" target="_blank" rel="noopener">http://localhost:8301/ribbon/1，调用完后查看Zipkin首页发现已经有请求链路跟踪信息了：</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200517112737606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击查看详情可以直观地看到请求调用链路和通过每个服务的耗时：</p>
<p><img src="https://img-blog.csdnimg.cn/20200517112828927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="三、使用Elasticsearch存储跟踪信息"><a href="#三、使用Elasticsearch存储跟踪信息" class="headerlink" title="三、使用Elasticsearch存储跟踪信息"></a>三、使用Elasticsearch存储跟踪信息</h2><blockquote>
<p>如果我们把zipkin-server重启一下就会发现刚刚的存储的跟踪信息全部丢失了，可见其是存储在内存中的，有时候我们需要将所有信息存储下来，这里以存储到Elasticsearch为例，来演示下该功能:</p>
</blockquote>
<p>1、配置好es、bibana并启动，如果不知道怎么使用可看 <a href="https://chfsun.gitee.io/myblog/spring-cloud/lasticsearch-6-2-2-kibana-6-2-2-windows-x86-64%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">es、kibana使用</a></p>
<p>2、修改Zipkin启动参数将信息存储到Elasticsearch：</p>
<blockquote>
<p>STORAGE_TYPE：表示存储类型 ES_HOSTS：表示ES的访问地址</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar zipkin-server-<span class="number">2.12</span><span class="number">.9</span>-exec.jar --STORAGE_TYPE=elasticsearch --ES_HOSTS=localhost:<span class="number">9200</span></span><br></pre></td></tr></table></figure>
<p>3、重新启动ribbon-orcl-server-service和ribbon-orcl-server-service才能生效，重启后多次调用ribbon-service的接口 <a href="http://localhost:8301/ribbon/1：" target="_blank" rel="noopener">http://localhost:8301/ribbon/1：</a></p>
<p>4、打开 <a href="http://localhost:5601/，可查看到界面信息：" target="_blank" rel="noopener">http://localhost:5601/，可查看到界面信息：</a></p>
<p><img src="https://img-blog.csdnimg.cn/2020051711503599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200517115121447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5、此时即使关闭zipkin，再重新启动，发现数据依然存在</p>
<h2 id="四、本章使用到的模块"><a href="#四、本章使用到的模块" class="headerlink" title="四、本章使用到的模块"></a>四、本章使用到的模块</h2><p>springcloud-learning<br>├── eureka-server – eureka注册中心<br>├── ribbon-orcl-server-service – 服务提供者<br>└── ribbon-orcl-client-service– 服务调用者</p>
<p><strong><a href="https://github.com/chfsun/springcloud-learning" target="_blank" rel="noopener">GitHub项目源码地址</a></strong></p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>sleuth</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（12）之 Gateway服务网关</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8812%EF%BC%89%E4%B9%8B-Gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h2 id="Spring-Cloud-Gateway简介"><a href="#Spring-Cloud-Gateway简介" class="headerlink" title="Spring Cloud Gateway简介"></a>Spring Cloud Gateway简介</h2><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等。</p>
<a id="more"></a>
<p>在SpringCloud微服务体系中，有个很重要的组件就是网关，在1.x版本中都是采用的Zuul网关；但在2.x版本中，zuul的升级一直跳票，SpringCloud最后自己研发了一个网关替代Zuul，那就是SpringCloud Gateway</p>
<p>我们为什么选择Gateway？</p>
<p>一方面因为Zuul已经进入了维护阶段，而且Gateway是SpringCloud团队研发的，是“亲儿子”产品，值得信赖。而且很多功能Zuul都没有；用起来也非常的简单便捷。</p>
<p>网上很多地方都说Zuul是阻塞的，Gateway是非阻塞的，这么说是不严谨的，准确的讲Zuul1.x是阻塞的，而在2.x的版本中，Zuul也是基于Netty，也是非阻塞的，如果一定要说性能，其实这个真没多大差距。</p>
<blockquote>
<p>Gateway是基于异步非阻塞模型上进行开发的，性能方面不需要担心。虽然Netflix 早就发布了最新的 Zuul 2.x，但 Spring Cloud 貌似没有整合计划。而且Netflix相关组件都宣布进入维护期；不知前景如何？</p>
</blockquote>
<p>多方面综合考虑Gateway是很理想的网关选择</p>
<p>Spring Cloud Gateway 具有如下特性：</p>
<ul>
<li>基于Spring Framework 5, Project Reactor 和 Spring Boot 2.0 进行构建；   <ul>
<li>动态路由：能够匹配任何请求属性；   </li>
<li>可以对路由指定 Predicate（断言）和 Filter（过滤器）；   </li>
<li>集成Hystrix的断路器功能；    <ul>
<li>集成 Spring Cloud 服务发现功能；    </li>
</ul>
</li>
<li>易于编写的 Predicate（断言）和 Filter（过滤器）；    </li>
<li>请求限流功能；    <ul>
<li>支持路径重写。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p><img src="https://img-blog.csdnimg.cn/20200517204613100.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上图中是核心的流程图，最主要的就是Route、Predicates 和 Filters 作用于特定路由</p>
<ul>
<li><p>Route（路由）：路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由；</p>
</li>
<li><p>Predicate（断言）：指的是Java 8 的 Function Predicate。 输入类型是Spring框架中的ServerWebExchange。 这使开发人员可以匹配HTTP请求中的所有内容，例如请求头或请求参数。如果请求与断言相匹配，则进行路由；</p>
</li>
<li><p>Filter（过滤器）：指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前后对请求进行修改。</p>
</li>
</ul>
<h2 id="Demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h2><h2 id="一、模块创建"><a href="#一、模块创建" class="headerlink" title="一、模块创建"></a>一、模块创建</h2><p>1、创建gateway-api 模块</p>
<p>2、pom主要文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、application.yml配置文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9201</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">register-with-eureka</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">fetch-registry</span>: <span class="selector-tag">true</span></span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">service-url</span>:</span><br><span class="line">  hystrix-orcl-client-service: http://localhost:8401</span><br><span class="line">  feign-service: http://localhost:8701</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">gateway-api</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">gateway</span>:</span><br><span class="line">      <span class="selector-tag">routes</span>:</span><br><span class="line">          # 路由的<span class="selector-tag">ID</span></span><br><span class="line">        <span class="selector-tag">-</span> <span class="selector-tag">id</span>: <span class="selector-tag">dept_service_route</span></span><br><span class="line">          # 匹配后路由地址</span><br><span class="line">          uri: $&#123;service-url.hystrix-orcl-client-service&#125;/hystrix/*/*</span><br><span class="line">          <span class="selector-tag">predicates</span>:</span><br><span class="line">              # 断言，路径相匹配的进行路由</span><br><span class="line">            - Path=/hystrix/*/*</span><br><span class="line">        <span class="selector-tag">-</span> <span class="selector-tag">id</span>: <span class="selector-tag">feign_service_route</span></span><br><span class="line">          # 匹配后路由地址</span><br><span class="line">          uri: http://localhost:8701/feign/*</span><br><span class="line">          <span class="selector-tag">predicates</span>:</span><br><span class="line">              # 断言，路径相匹配的进行路由</span><br><span class="line">            - Path=/feign/*</span><br></pre></td></tr></table></figure>

<p>4、依次启动 启动eureka-server、ribbon-orcl-server-service、hystrix-orcl-client-service、feign-service 和gateway-api服务，并调用该地址测试：<a href="http://localhost:9201/feign/listDept、http://localhost:9201/hystrix/dept/1" target="_blank" rel="noopener">http://localhost:9201/feign/listDept、http://localhost:9201/hystrix/dept/1</a></p>
<p>我们发现该请求都能被路由到相应的模块请求中，并显示数据：</p>
<p><img src="https://img-blog.csdnimg.cn/20200517210151919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="二、Route-Predicate-的使用"><a href="#二、Route-Predicate-的使用" class="headerlink" title="二、Route Predicate 的使用"></a>二、Route Predicate 的使用</h2><p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。 Spring Cloud Gateway包括许多内置的Route Predicate工厂。 所有这些Predicate都与HTTP请求的不同属性匹配。 多个Route Predicate工厂可以进行组合，下面我们来介绍下一些常用的Route Predicate。</p>
<blockquote>
<p>PS：Predicate中提到的配置都在application-predicate.yml文件中进行修改，并用该配置启动gateway-api服务模块。</p>
</blockquote>
<p><strong>1、After Route Predicate</strong></p>
<blockquote>
<p>在指定时间之后的请求会匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: after_route</span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          predicates:</span><br><span class="line">            - After=2020-05-17T18:30:00+08:00[Asia/Shanghai]</span><br></pre></td></tr></table></figure>

<p><strong>2、Before Route Predicate</strong></p>
<blockquote>
<p>在指定时间之前的请求会匹配该路由。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: before_route</span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Before=2019-12-29T18:30:00+08:00[Asia/Shanghai]</span><br></pre></td></tr></table></figure>

<p><strong>3、Between Route Predicate</strong></p>
<blockquote>
<p>在指定时间区间内的请求会匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: before_route</span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Between=2019-12-29T18:30:00+08:00[Asia/Shanghai], 2019-12-30T18:30:00+08:00[Asia/Shanghai]</span><br></pre></td></tr></table></figure>

<p><strong>4、Cookie Route Predicate</strong></p>
<blockquote>
<p>带有指定Cookie的请求会匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: cookie_route</span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Cookie=username,chfsun</span><br></pre></td></tr></table></figure>

<p>使用curl工具发送带有cookie为username=chfsun的请求可以匹配该路由：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9202/feign/listDept --cookie <span class="string">"username=chfsun"</span></span><br></pre></td></tr></table></figure>
<p><strong>5、Header Route Predicate</strong></p>
<blockquote>
<p>带有指定请求头的请求会匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: header_route</span><br><span class="line">        uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">        predicates:</span><br><span class="line">        - Header=X-Request-Id, \d+</span><br></pre></td></tr></table></figure>
<p>使用curl工具发送带有请求头为X-Request-Id:123的请求可以匹配该路由:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9202/feign/1 -H <span class="string">"X-Request-Id:123"</span></span><br></pre></td></tr></table></figure>

<p><strong>6、Host Route Predicate</strong></p>
<blockquote>
<p>带有指定Host的请求会匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: host_route</span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Host=**.chfsun.com</span><br></pre></td></tr></table></figure>
<p>使用curl工具发送带有请求头为Host:<a href="http://www.chfsun.com的请求可以匹配该路由：">www.chfsun.com的请求可以匹配该路由：</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9202/feign/1 -H <span class="string">"Host:www.chfsun.com"</span></span><br></pre></td></tr></table></figure>


<p><strong>7、Method Route Predicate</strong></p>
<blockquote>
<p>发送指定方法的请求会匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: method_route</span><br><span class="line">        uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">        predicates:</span><br><span class="line">          - Method=GET</span><br></pre></td></tr></table></figure>
<p>7.1、使用curl工具发送GET请求可以匹配该路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9202/feign/1</span><br></pre></td></tr></table></figure>

<p>7.2、使用curl工具发送POST请求无法匹配该路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://localhost:9202/feign/1</span><br></pre></td></tr></table></figure>

<p><strong>8、Path Route Predicate</strong></p>
<blockquote>
<p>发送指定路径的请求会匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: path_route</span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span>/feign/&#123;id&#125;</span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/feign/&#123;id&#125;</span><br></pre></td></tr></table></figure>
<p>8.1、使用curl工具发送/feign/1路径请求可以匹配该路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9201/feign/1</span><br></pre></td></tr></table></figure>

<p>8.2、使用curl工具发送/abc/1路径请求无法匹配该路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9201/abc/1</span><br></pre></td></tr></table></figure>

<p><strong>9、Query Route Predicate</strong></p>
<blockquote>
<p>带指定查询参数的请求可以匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: query_route</span><br><span class="line">        uri: <span class="variable">$&#123;service-url.feign-service&#125;</span>/feign/getByName</span><br><span class="line">        predicates:</span><br><span class="line">        - Query=deptName</span><br></pre></td></tr></table></figure>
<p>9.1、使用curl工具发送带  deptName=开发部  查询参数的请求可以匹配该路由：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9202/feign/getByName?deptName=开发部</span><br></pre></td></tr></table></figure>
<p>9.2、使用curl工具发送带不带查询参数的请求无法匹配该路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9201/feign/getByName</span><br></pre></td></tr></table></figure>

<p><strong>10、RemoteAddr Route Predicate</strong></p>
<blockquote>
<p>从指定远程地址发起的请求可以匹配该路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: remoteaddr_route</span><br><span class="line">        uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">        predicates:</span><br><span class="line">          - RemoteAddr=192.168.1.1/24</span><br></pre></td></tr></table></figure>
<p>使用curl工具从192.168.1.1发起请求可以匹配该路由：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://192.168.1.1:9202/feign/1</span><br></pre></td></tr></table></figure>

<p><strong>11、Weight Route Predicate</strong></p>
<blockquote>
<p>使用权重来路由相应请求，以下表示有80%的请求会被路由到localhost:8201，20%会被路由到localhost:8202</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: weight_high</span><br><span class="line">        uri: http://localhost:8201</span><br><span class="line">        predicates:</span><br><span class="line">        - Weight=group1, 8</span><br><span class="line">      - id: weight_low</span><br><span class="line">        uri: http://localhost:8202</span><br><span class="line">        predicates:</span><br><span class="line">        - Weight=group1, 2</span><br></pre></td></tr></table></figure>

<h2 id="三、Route-Filter-的使用"><a href="#三、Route-Filter-的使用" class="headerlink" title="三、Route Filter 的使用"></a>三、Route Filter 的使用</h2><blockquote>
<p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway 内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生，下面我们介绍下常用路由过滤器的用法</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200519222131726.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>PS：Filter 中提到的配置都在 application-filter.yml  文件中进行修改，并用该配置启动gateway-api服务模块。</p>
</blockquote>
<p><strong>1、AddRequestParameter GatewayFilter</strong></p>
<blockquote>
<p>给请求添加参数的过滤器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: add_request_parameter_route</span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          filters:</span><br><span class="line">            - AddRequestParameter=deptName, <span class="built_in">test</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Method=GET</span><br></pre></td></tr></table></figure>

<p>以上配置会对GET请求添加 deptName=开发部  的请求参数，通过curl工具使用以下命令进行测试:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9203/feign/getByName</span><br></pre></td></tr></table></figure>
<p>相当于发起该请求:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8701/feign/getByName?deptName=<span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><strong>2、StripPrefix GatewayFilter</strong></p>
<blockquote>
<p>对指定数量的路径前缀进行去除的过滤器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway-api</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: feign_service_route</span><br><span class="line">          <span class="comment"># 匹配后路由地址</span></span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=2</span><br><span class="line">          predicates:</span><br><span class="line">            - Method=GET</span><br></pre></td></tr></table></figure>
<p>以上配置会把以/user-service/开头的请求的路径去除两位，通过curl工具使用以下命令进行测试:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9203/hystrix-service/a/feign/1</span><br></pre></td></tr></table></figure>
<p>相当于发起该请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8701/feign/1</span><br></pre></td></tr></table></figure>


<p><strong>3、PrefixPath GatewayFilter</strong></p>
<blockquote>
<p>与StripPrefix过滤器恰好相反，会对原有路径进行增加操作的过滤器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway-api</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">	   routes:</span><br><span class="line">        - id: feign_service_route</span><br><span class="line">          <span class="comment"># 匹配后路由地址</span></span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          filters:</span><br><span class="line">	            - PrefixPath=/feign</span><br><span class="line">          predicates:</span><br><span class="line">            - Method=GET</span><br></pre></td></tr></table></figure>
<p>以上配置会对所有GET请求添加/user路径前缀，通过curl工具使用以下命令进行测试:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9203/1</span><br></pre></td></tr></table></figure>
<p>相当于发起该请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8701/feign/1</span><br></pre></td></tr></table></figure>

<p><strong>4、Hystrix GatewayFilter</strong></p>
<blockquote>
<p>Hystrix 过滤器允许你将断路器功能添加到网关路由中，使你的服务免受级联故障的影响，并提供服务降级处理</p>
</blockquote>
<p>4.1、要开启断路器功能，我们需要在pom.xml中添加Hystrix的相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>4.2、然后添加相关服务降级的处理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/fallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"data"</span>,<span class="keyword">null</span>);</span><br><span class="line">        result.put(<span class="string">"message"</span>,<span class="string">"Get request fallback!"</span>);</span><br><span class="line">        result.put(<span class="string">"code"</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.3、application-filter.yml中添加相关配置，当路由出错时会转发到服务降级处理的控制器上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway-api</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">	   routes:</span><br><span class="line">        - id: feign_service_route</span><br><span class="line">          <span class="comment"># 匹配后路由地址</span></span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Method=GET</span><br><span class="line">          filters:</span><br><span class="line">            - name: Hystrix</span><br><span class="line">              args:</span><br><span class="line">                name: fallbackcmd</span><br><span class="line">                fallback-uri: forward:/fallback</span><br></pre></td></tr></table></figure>

<p>4.4、测试：关闭user-service，调用该地址进行测试：<a href="http://localhost:9201/user/1" target="_blank" rel="noopener">http://localhost:9201/user/1</a> ，发现已经返回了服务降级的处理信息</p>
<p><img src="https://img-blog.csdnimg.cn/20200519202337363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>5、RequestRateLimiter GatewayFilter</strong></p>
<blockquote>
<p>RequestRateLimiter 过滤器可以用于限流，使用RateLimiter实现来确定是否允许当前请求继续进行，如果请求太大默认会返回HTTP 429-过多请求状态</p>
</blockquote>
<p>5.1、pom.xml中添加相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>5.2、添加限流策略的配置类，这里有两种策略一种是根据请求参数中的deptNo进行限流，另一种是根据访问IP进行限流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRateLimiterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">deptKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getQueryParams().getFirst(<span class="string">"deptNo"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.3、测试<br>使用Redis来进行限流，所以需要添加Redis和RequestRateLimiter的配置，这里对所有的GET请求都进行了按IP来限流的操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    password: 123456</span><br><span class="line">    port: 6379</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: requestratelimiter_route</span><br><span class="line">          uri: http://localhost:8201</span><br><span class="line">          filters:</span><br><span class="line">            - name: RequestRateLimiter</span><br><span class="line">              args:</span><br><span class="line">                <span class="comment"># 每秒允许处理的请求数量</span></span><br><span class="line">                redis-rate-limiter.replenishRate: 1</span><br><span class="line">                <span class="comment"># 每秒最大处理的请求数量</span></span><br><span class="line">                redis-rate-limiter.burstCapacity: 2</span><br><span class="line">                <span class="comment"># 限流策略，对应策略的Bean</span></span><br><span class="line">                key-resolver: <span class="string">"#&#123;@ipKeyResolver&#125;"</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Method=GET</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.springframework.cloud.gateway: debug</span><br></pre></td></tr></table></figure>

<p>多次请求该地址：<a href="http://localhost:9203/feign/1" target="_blank" rel="noopener">http://localhost:9203/feign/1</a> ，会返回状态码为429的错误：</p>
<p><img src="https://img-blog.csdnimg.cn/20200519204340175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong>6、Retry GatewayFilter</strong></p>
<blockquote>
<p>对路由请求进行重试的过滤器，可以根据路由请求返回的HTTP状态码来确定是否进行重试</p>
</blockquote>
<blockquote>
<p>有坑，降版本能使用，后续补充</p>
</blockquote>
<p>6.1、修改配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway-api</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">        - id: feign_service_route</span><br><span class="line">          <span class="comment"># 匹配后路由地址</span></span><br><span class="line">          uri: <span class="variable">$&#123;service-url.feign-service&#125;</span></span><br><span class="line">        predicates:</span><br><span class="line">         - Method=GET</span><br><span class="line">        filters:</span><br><span class="line">         - name: Retry</span><br><span class="line">         args:</span><br><span class="line">            retries: 1 <span class="comment">#需要进行重试的次数</span></span><br><span class="line">            statuses: BAD_GATEWAY <span class="comment">#返回哪个状态码需要进行重试，返回状态码为5XX进行重试</span></span><br><span class="line">            backoff:</span><br><span class="line">              firstBackoff: 10ms</span><br><span class="line">              maxBackoff: 50ms</span><br><span class="line">              factor: 2</span><br><span class="line">              basedOnPreviousValue: <span class="literal">false</span></span><br></pre></td></tr></table></figure>






<h2 id="四、结合注册中心使用"><a href="#四、结合注册中心使用" class="headerlink" title="四、结合注册中心使用"></a>四、结合注册中心使用</h2><blockquote>
<p>上次讲到 <strong><em>Spring Cloud之-Zuul 服务网关</em></strong> 结合注册中心进行使用时，默认情况下Zuul会根据注册中心注册的服务列表，以服务名为路径创建动态路由，Gateway同样也实现了该功能。下面我们演示下Gateway结合注册中心如何使用默认的动态路由和过滤器</p>
</blockquote>
<p><strong>1、使用动态路由</strong><br>1.1、pom.xml中添加eureka-client相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>1.2、添加application-eureka.yml配置文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9204</span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">gateway-api</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">gateway</span>:</span><br><span class="line">      <span class="selector-tag">discovery</span>:</span><br><span class="line">        <span class="selector-tag">locator</span>:</span><br><span class="line">          #开启从注册中心动态创建路由的功能</span><br><span class="line">          <span class="selector-tag">enabled</span>: <span class="selector-tag">true</span> </span><br><span class="line">          #使用小写服务名，默认是大写</span><br><span class="line">          <span class="selector-tag">lower-case-service-id</span>: <span class="selector-tag">true</span> </span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br><span class="line"><span class="selector-tag">logging</span>:</span><br><span class="line">  <span class="selector-tag">level</span>:</span><br><span class="line">    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.cloud</span><span class="selector-class">.gateway</span>: <span class="selector-tag">debug</span></span><br></pre></td></tr></table></figure>

<p>测试：使用application-eureka.yml配置文件启动  gateway-api  服务，访问<a href="http://localhost:9204/feign-service/feign/1，可以路由到" target="_blank" rel="noopener">http://localhost:9204/feign-service/feign/1，可以路由到</a> feign-service 的<a href="http://localhost:8701/feign/1处" target="_blank" rel="noopener">http://localhost:8701/feign/1处</a></p>
<p><strong>2、使用过滤器</strong></p>
<blockquote>
<p>在结合注册中心使用过滤器的时候，我们需要注意的是uri的协议为<strong>lb</strong>，这样才能启用Gateway的负载均衡功能</p>
</blockquote>
<p>修改application-eureka.yml文件，使用了PrefixPath过滤器，会为所有GET请求路径添加 /feign 路径并路由:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9204</span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">gateway-api</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">gateway</span>:</span><br><span class="line">      <span class="selector-tag">discovery</span>:</span><br><span class="line">        <span class="selector-tag">locator</span>:</span><br><span class="line">          #开启从注册中心动态创建路由的功能</span><br><span class="line">          <span class="selector-tag">enabled</span>: <span class="selector-tag">true</span> </span><br><span class="line">          #使用小写服务名，默认是大写</span><br><span class="line">          <span class="selector-tag">lower-case-service-id</span>: <span class="selector-tag">true</span> </span><br><span class="line">      <span class="selector-tag">routes</span>:</span><br><span class="line">        <span class="selector-tag">-</span> <span class="selector-tag">id</span>: <span class="selector-tag">prefixpath_route</span></span><br><span class="line">          #此处需要使用<span class="selector-tag">lb</span>协议</span><br><span class="line">          uri: lb://feign-service </span><br><span class="line">          <span class="selector-tag">predicates</span>:</span><br><span class="line">            - Method=GET</span><br><span class="line">          <span class="selector-tag">filters</span>:</span><br><span class="line">            - PrefixPath=/feign</span><br><span class="line"><span class="selector-tag">eureka</span>:</span><br><span class="line">  <span class="selector-tag">client</span>:</span><br><span class="line">    <span class="selector-tag">service-url</span>:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka/</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">logging</span>:</span><br><span class="line">  <span class="selector-tag">level</span>:</span><br><span class="line">    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.cloud</span><span class="selector-class">.gateway</span>: <span class="selector-tag">debug</span></span><br></pre></td></tr></table></figure>

<p>使用application-eureka.yml配置文件启动api-gateway服务，访问<a href="http://localhost:9201/1" target="_blank" rel="noopener">http://localhost:9201/1</a> ，可以路由到feign-service的<a href="http://localhost:8701/feign/1" target="_blank" rel="noopener">http://localhost:8701/feign/1</a> 处</p>
<h2 id="五、使用到的模块"><a href="#五、使用到的模块" class="headerlink" title="五、使用到的模块"></a>五、使用到的模块</h2><p>springcloud-learning<br>├── eureka-server – eureka注册中心<br>├── ribbon-orcl-server-service – 服务提供者<br>├── feign-service – 服务消费者<br>├── hystrix-orcl-client-service – 服务消费者<br>└── gateway-api – gateway作为网关的测试服务</p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（13）之 Oauth2授权的使用</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8814%EF%BC%89%E4%B9%8B-Oauth2%E6%8E%88%E6%9D%83%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="OAuth-2-0-的一个简单认识"><a href="#OAuth-2-0-的一个简单认识" class="headerlink" title="OAuth 2.0 的一个简单认识"></a>OAuth 2.0 的一个简单认识</h1><h2 id="为什么需要-OAuth2"><a href="#为什么需要-OAuth2" class="headerlink" title="为什么需要 OAuth2"></a>为什么需要 OAuth2</h2><p>什么是OAuth2？<br>OAuth 2.0 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p>
<a id="more"></a>
<p>关于我们为什么需要 OAuth2 的问题，网上的文章很多，我们常见的第三方登录就是一个 OAuth2 的典型应用，阮一峰大佬之前有一篇文章非常形象的解释了这个问题。我们先看一个生活中的例子：</p>
<h3 id="一、生活场景—快递员进小区"><a href="#一、生活场景—快递员进小区" class="headerlink" title="一、生活场景—快递员进小区"></a>一、生活场景—快递员进小区</h3><p>我住在一个大型的居民小区中：</p>
<p><img src="https://img-blog.csdnimg.cn/20200520192352632.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>小区有门禁系统：</p>
<p><img src="https://img-blog.csdnimg.cn/2020052019242362.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>进入的时候需要输入密码：</p>
<p><img src="https://img-blog.csdnimg.cn/20200520192442997.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我经常网购和外卖，每天都有快递员来送货。我必须找到一个办法，让快递员通过门禁系统，进入小区，不用我自己每次都跑来跑去：</p>
<p><img src="https://img-blog.csdnimg.cn/20200520192529136.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果我把自己的密码，告诉快递员，他就拥有了与我同样的权限，这样好像不太合适。万一我想取消他进入小区的权力，也很麻烦，我自己的密码也得跟着改了，还得通知其他的快递员。</p>
<p>有没有一种办法，让快递员能够自由进入小区，又不必知道小区居民的密码，而且他的唯一权限就是送货，其他需要密码的场合，他都没有权限？</p>
<h3 id="二、授权机制的设计"><a href="#二、授权机制的设计" class="headerlink" title="二、授权机制的设计"></a>二、授权机制的设计</h3><p>于是，我设计了一套授权机制。</p>
<p>第一步：</p>
<blockquote>
<p>门禁系统的密码输入器下面，增加一个按钮，叫做”获取授权”。快递员需要首先按这个按钮，去申请授权。</p>
</blockquote>
<p>第二步：</p>
<blockquote>
<p>他按下按钮以后，屋主（也就是我）的手机就会跳出对话框：有人正在要求授权。系统还会显示该快递员的姓名、工号和所属的快递公司。</p>
</blockquote>
<blockquote>
<p>我确认请求属实，就点击按钮，告诉门禁系统，我同意给予他进入小区的授权。</p>
</blockquote>
<p>第三步：</p>
<blockquote>
<p>门禁系统得到我的确认以后，向快递员显示一个进入小区的令牌（access<br>token）。令牌就是类似密码的一串数字，只在短期内（比如七天）有效。</p>
</blockquote>
<p>第四步：</p>
<blockquote>
<p>快递员向门禁系统输入令牌，进入小区。</p>
</blockquote>
<p>有人可能会问，为什么不是远程为快递员开门，而要为他单独生成一个令牌？这是因为快递员可能每天都会来送货，第二天他还可以复用这个令牌。另外，有的小区有多重门禁，快递员可以使用同一个令牌通过它们。</p>
<h3 id="三、互联网场景"><a href="#三、互联网场景" class="headerlink" title="三、互联网场景"></a>三、互联网场景</h3><p>我们把上面的例子搬到互联网，就是 OAuth 的设计了。</p>
<p>首先，居民小区就是储存用户数据的网络服务。比如，微信储存了我的好友信息，获取这些信息，就必须经过微信的”门禁系统”。</p>
<p>其次，快递员（或者说快递公司）就是第三方应用，想要穿过门禁系统，进入小区。</p>
<p>最后，我就是用户本人，同意授权第三方应用进入小区，获取我的数据。</p>
<p><strong>简单说，OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用</strong>。</p>
<h3 id="四、令牌与密码"><a href="#四、令牌与密码" class="headerlink" title="四、令牌与密码"></a>四、令牌与密码</h3><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p>
<ol>
<li>令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</li>
<li>令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</li>
<li>令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</li>
</ol>
<p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p>
<p>注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。 这也是为什么令牌的有效期，一般都设置得很短的原因。</p>
<p>OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。</p>
<h2 id="OAuth-2-0-的四种方式"><a href="#OAuth-2-0-的四种方式" class="headerlink" title="OAuth 2.0 的四种方式"></a>OAuth 2.0 的四种方式</h2><h4 id="RFC-6749"><a href="#RFC-6749" class="headerlink" title="RFC 6749"></a>RFC 6749</h4><p>OAuth 2.0 的标准是 RFC 6749 文件。该文件先解释了 OAuth 是什么：</p>
<blockquote>
<p>OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。……资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据</p>
</blockquote>
<p>这段话的意思就是，OAuth 的核心就是向第三方应用颁发令牌。然后，RFC 6749 接着写道：</p>
<blockquote>
<p>（由于互联网有多种场景，）本标准定义了获得令牌的四种授权方式（authorization grant ）</p>
</blockquote>
<p>也就是说，OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。下面就是这四种授权方式:</p>
<blockquote>
<p>1、授权码（authorization-code）<br>2、隐藏式（implicit）<br>3、密码式（password）：<br>4、客户端凭证（client credentials）</p>
</blockquote>
<p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：<strong>客户端 ID（client ID）</strong>和<strong>客户端密钥（client secret）</strong>。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的</p>
<p>下面我们分别讲解下四种授权方式：</p>
<h4 id="第一种授权方式：授权码方式"><a href="#第一种授权方式：授权码方式" class="headerlink" title="第一种授权方式：授权码方式"></a>第一种授权方式：授权码方式</h4><p>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</p>
<p>这种方式是最常用的流程，安全性也最高，它<strong>适用于那些有后端的 Web 应用</strong>。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p>
<p><strong>第一步</strong>，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://b.com/oauth/authorize?</span><br><span class="line">  response_type=code&amp;</span><br><span class="line">  client_id=CLIENT_ID&amp;</span><br><span class="line">  redirect_uri=CALLBACK_URL&amp;</span><br><span class="line">  scope=<span class="built_in">read</span></span><br></pre></td></tr></table></figure>
<p>上面 URL 中：</p>
<p><strong>response_type参数</strong>: 表示要求返回授权码（code）</p>
<p><strong>client_id参数</strong>让 B 知道是谁在请求</p>
<p><strong>redirect_uri参数</strong>是 B 接受或拒绝请求后的跳转网址</p>
<p><strong>scope参数</strong>表示要求的授权范围（这里是只读）。</p>
<p><img src="https://img-blog.csdnimg.cn/20200520200803170.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><strong>第二步</strong>，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回redirect_uri参数指定的网址。跳转时，会传回一个授权码，就像下面这样:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://a.com/callback?code=AUTHORIZATION_CODE</span><br></pre></td></tr></table></figure>

<p>上面 URL 中，code参数就是授权码</p>
<p><img src="https://img-blog.csdnimg.cn/20200520200922296.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>第三步</strong>，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://b.com/oauth/token?</span><br><span class="line"> client_id=CLIENT_ID&amp;</span><br><span class="line"> client_secret=CLIENT_SECRET&amp;</span><br><span class="line"> grant_type=authorization_code&amp;</span><br><span class="line"> code=AUTHORIZATION_CODE&amp;</span><br><span class="line"> redirect_uri=CALLBACK_URL</span><br></pre></td></tr></table></figure>
<p>上面 URL 中:<br><strong>client_id</strong>参数和<strong>client_secret</strong>参数用来让 B 确认 A 的身份（client_secret参数是保密的，因此只能在后端发请求）</p>
<p><strong>grant_type</strong>参数的值是AUTHORIZATION_CODE，表示采用的授权方式是授权码</p>
<p><strong>code</strong>参数是上一步拿到的授权码</p>
<p><strong>redirect_uri</strong>参数是令牌颁发后的回调网址</p>
<p><img src="https://img-blog.csdnimg.cn/20200520201143677.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><strong>第四步</strong>，B 网站收到请求以后，就会颁发令牌。具体做法是向redirect_uri指定的网址，发送一段 JSON 数据:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">  <span class="string">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>,</span><br><span class="line">  <span class="string">"token_type"</span>:<span class="string">"bearer"</span>,</span><br><span class="line">  <span class="string">"expires_in"</span>:2592000,</span><br><span class="line">  <span class="string">"refresh_token"</span>:<span class="string">"REFRESH_TOKEN"</span>,</span><br><span class="line">  <span class="string">"scope"</span>:<span class="string">"read"</span>,</span><br><span class="line">  <span class="string">"uid"</span>:100101,</span><br><span class="line">  <span class="string">"info"</span>:&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面 JSON 数据中，<strong>access_token</strong>字段就是令牌，A 网站在后端拿到了</p>
<p><img src="https://img-blog.csdnimg.cn/20200520201318397.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="第二种方式：隐藏式"><a href="#第二种方式：隐藏式" class="headerlink" title="第二种方式：隐藏式"></a>第二种方式：隐藏式</h4><p>有些 Web 应用是<strong>纯前端应用</strong>，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）”隐藏式”（implicit）。</p>
<p><strong>第一步</strong>，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://b.com/oauth/authorize?</span><br><span class="line">  response_type=token&amp;</span><br><span class="line">  client_id=CLIENT_ID&amp;</span><br><span class="line">  redirect_uri=CALLBACK_URL&amp;</span><br><span class="line">  scope=<span class="built_in">read</span></span><br></pre></td></tr></table></figure>
<p><strong>上面 URL 中：</strong>response_type参数为token，表示要求直接返回令牌。</p>
<p><strong>第二步</strong>，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回redirect_uri参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://a.com/callback<span class="comment">#token=ACCESS_TOKEN</span></span><br></pre></td></tr></table></figure>

<p>上面 URL 中：<strong>token</strong>参数就是令牌，A 网站因此直接在前端拿到令牌。</p>
<p>注意，<strong>令牌的位置是 URL 锚点（fragment），而不是查询字符串</strong>（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在”中间人攻击”的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p>
<p><img src="https://img-blog.csdnimg.cn/20200520201655751.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">这种方式把令牌直接传给前端，<strong>是很不安全</strong>的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p>
<h4 id="第三种方式：密码式"><a href="#第三种方式：密码式" class="headerlink" title="第三种方式：密码式"></a>第三种方式：密码式</h4><p>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为”密码式”（password）。</p>
<p><strong>第一步</strong>，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://oauth.b.com/token?</span><br><span class="line">  grant_type=password&amp;</span><br><span class="line">  username=USERNAME&amp;</span><br><span class="line">  password=PASSWORD&amp;</span><br><span class="line">  client_id=CLIENT_ID</span><br></pre></td></tr></table></figure>

<p>上面 URL 中：<br><strong>grant_type</strong>参数是授权方式，这里的<strong>password</strong>表示”密码式”，<strong>username</strong>和<strong>password</strong>是 B 的用户名和密码。</p>
<p><strong>第二步</strong>，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p>
<p>这种方式需要用户给出自己的用户名/密码，显然<strong>风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用</strong>。</p>
<h4 id="第四种方式：凭证式"><a href="#第四种方式：凭证式" class="headerlink" title="第四种方式：凭证式"></a>第四种方式：凭证式</h4><p>凭证式（client credentials），<strong>适用于没有前端的命令行应用，即在命令行下请求令牌</strong>。</p>
<p><strong>第一步</strong>，A 应用在命令行向 B 发出请求。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://oauth.b.com/token?</span><br><span class="line">    grant_type=client_credentials&amp;</span><br><span class="line">    client_id=CLIENT_ID&amp;</span><br><span class="line">    client_secret=CLIENT_SECRET</span><br></pre></td></tr></table></figure>

<p>上面 URL 中：<br><strong>grant_type</strong>参数等于client_credentials表示采用凭证式，</p>
<p><strong>client_id</strong>和<strong>client_secret</strong>用来让 B 确认 A 的身份。</p>
<p><strong>第二步</strong>，B 网站验证通过以后，直接返回令牌。</p>
<p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即<strong>有可能多个用户共享同一个令牌</strong>。</p>
<h2 id="令牌的使用"><a href="#令牌的使用" class="headerlink" title="令牌的使用"></a>令牌的使用</h2><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p>
<p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个Authorization字段，令牌就放在这个字段里面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">"Authorization: Bearer ACCESS_TOKEN"</span> \</span><br><span class="line"> <span class="string">"https://api.b.com"</span></span><br></pre></td></tr></table></figure>

<p>上面命令中，<strong>ACCESS_TOKEN</strong>就是拿到的令牌。</p>
<h2 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h2><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p>
<p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://b.com/oauth/token?</span><br><span class="line">     grant_type=refresh_token&amp;</span><br><span class="line">     client_id=CLIENT_ID&amp;</span><br><span class="line">     client_secret=CLIENT_SECRET&amp;</span><br><span class="line">     refresh_token=REFRESH_TOKEN</span><br></pre></td></tr></table></figure>

<p>上面 URL 中：</p>
<p><strong>grant_type参数</strong>为refresh_token表示要求更新令牌</p>
<p><strong>client_id参数</strong>和<strong>client_secret参数</strong>用于确认身份</p>
<p><strong>refresh_token参数</strong>就是用于更新令牌的令牌</p>
<p>B 网站验证通过以后，就会颁发新的令牌。</p>
<h2 id="简化版demo"><a href="#简化版demo" class="headerlink" title="简化版demo"></a>简化版demo</h2><h5 id="1、创建oauth2-server模块"><a href="#1、创建oauth2-server模块" class="headerlink" title="1、创建oauth2-server模块"></a>1、创建oauth2-server模块</h5><blockquote>
<p>仅作为授权服务器来使用</p>
</blockquote>
<h5 id="2、pom文件"><a href="#2、pom文件" class="headerlink" title="2、pom文件"></a>2、pom文件</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3、application-yml配置文件："><a href="#3、application-yml配置文件：" class="headerlink" title="3、application.yml配置文件："></a>3、application.yml配置文件：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">9401</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: oauth2-server</span><br></pre></td></tr></table></figure>
<p>4、实体类User：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5427258497676274736L</span>;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password, List&lt;GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">		<span class="keyword">this</span>.authorities = authorities;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">		<span class="keyword">return</span> authorities;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、新建一个UserService实现UserDetailsService接口，用于加载用户信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String password = passwordEncoder.encode(<span class="string">"123456"</span>);</span><br><span class="line">        userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"chfsun"</span>,password, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">"admin"</span>)));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"andy"</span>,password, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">"client"</span>)));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"mark"</span>,password, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">"client"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        List&lt;User&gt; findUserList = userList.stream().filter(user -&gt; user.getUsername().equals(username)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(findUserList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> findUserList.get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、添加授权服务器配置，使用@EnableAuthorizationServer注解开启：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用密码模式需要配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .userDetailsService(userService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// 配置client_id</span></span><br><span class="line">                .withClient(<span class="string">"admin"</span>)</span><br><span class="line">                <span class="comment">// 配置client_secret</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">"admin123456"</span>))</span><br><span class="line">                <span class="comment">// 配置访问token的有效期</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">3600</span>)</span><br><span class="line">                <span class="comment">// 配置刷新token的有效期</span></span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">864000</span>)</span><br><span class="line">                <span class="comment">// 配置redirect_uri,用于授权成功后的跳转</span></span><br><span class="line">                .redirectUris(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">                <span class="comment">// 配置申请的权限范围</span></span><br><span class="line">                .scopes(<span class="string">"all"</span>)</span><br><span class="line">                <span class="comment">// 配置grant_type,表示授权类型</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">"authorization_code"</span>, <span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、添加资源服务器配置，使用@EnableResourceServer注解开启：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .requestMatchers()</span><br><span class="line">                <span class="comment">// 配置需要保护的资源路径</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8、添加SpringSecurity配置，允许授权相关路径的访问及表单登录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf()</span><br><span class="line">                .disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/oauth/**"</span>, <span class="string">"/login/**"</span>, <span class="string">"logout/**"</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9、添加需要登录的接口用于测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getCurrentUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authentication.getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="授权码模式使用"><a href="#授权码模式使用" class="headerlink" title="授权码模式使用"></a>授权码模式使用</h3><p>启动oauth2-server服务；</p>
<p>1、在浏览器访问该地址进行登录授权，你也可以换成页面的超链接：</p>
<p><a href="http://localhost:9401/oauth/authorize?response_type=code&client_id=admin&redirect_uri=http://www.baidu.com&scope=all&state=normal" target="_blank" rel="noopener">http://localhost:9401/oauth/authorize?response_type=code&amp;client_id=admin&amp;redirect_uri=http://www.baidu.com&amp;scope=all&amp;state=normal</a></p>
<p>2、输入账号密码进行登录操作：<br><img src="https://img-blog.csdnimg.cn/20200521010506973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">3、登录后进行授权操作：<br><img src="https://img-blog.csdnimg.cn/20200521010642201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">4、之后会浏览器会带着授权码跳转到我们指定的路径：<br><img src="https://img-blog.csdnimg.cn/2020052101075654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5、使用授权码请求该地址获取访问令牌：<a href="http://localhost:9401/oauth/token" target="_blank" rel="noopener">http://localhost:9401/oauth/token</a><br>主要是使用Basic授权通过client_id和client_secret构造一个Authorization头信息：<br><img src="https://img-blog.csdnimg.cn/20200521011000292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>6、在body中添加以下参数信息，注意code的值，通过POST请求获取访问令牌：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">grant_type</span><span class="selector-pseudo">:authorization_code</span></span><br><span class="line"><span class="selector-tag">code</span><span class="selector-pseudo">:0AYFyy</span></span><br><span class="line"><span class="selector-tag">client_id</span><span class="selector-pseudo">:admin</span></span><br><span class="line">redirect_uri:http://www.baidu.com</span><br><span class="line"><span class="selector-tag">scope</span><span class="selector-pseudo">:all</span></span><br></pre></td></tr></table></figure>

<p>6.1、<br><img src="https://img-blog.csdnimg.cn/20200521011213140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">6.2、点击send后：<br><img src="https://img-blog.csdnimg.cn/20200521011352888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">7、在请求头中添加访问令牌，访问需要登录授权的接口进行测试，发现已经可以成功访问：<a href="http://localhost:9401/user/getCurrentUser" target="_blank" rel="noopener">http://localhost:9401/user/getCurrentUser</a><br><img src="https://img-blog.csdnimg.cn/20200521154927769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h2><p>使用密码请求该地址获取访问令牌：<a href="http://localhost:9401/oauth/token" target="_blank" rel="noopener">http://localhost:9401/oauth/token</a></p>
<p>1、使用Basic授权通过client_id和client_secret构造一个Authorization头信息<br><img src="https://img-blog.csdnimg.cn/20200521011953550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">2、在body中添加以下参数信息，通过POST请求获取访问令牌：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">grant_type</span><span class="selector-pseudo">:password</span></span><br><span class="line"><span class="selector-tag">username</span><span class="selector-pseudo">:chfsun</span></span><br><span class="line"><span class="selector-tag">password</span><span class="selector-pseudo">:123456</span></span><br><span class="line"><span class="selector-tag">scope</span><span class="selector-pseudo">:all</span></span><br></pre></td></tr></table></figure>
<p>3、换取后的令牌<br><img src="https://img-blog.csdnimg.cn/2020052101221360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">使用到的模块</p>
<p>springcloud-learning<br>└── oauth2-server – oauth2授权测试服务</p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>OAuth2</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（16）之 Oauth2授权之基于JWT完成单点登录</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8816%EF%BC%89%E4%B9%8B-Oauth2%E6%8E%88%E6%9D%83%E4%B9%8B%E5%9F%BA%E4%BA%8EJWT%E5%AE%8C%E6%88%90%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="单点登录简介"><a href="#单点登录简介" class="headerlink" title="单点登录简介"></a>单点登录简介</h2><p>单点登录(SingleSign-On，SSO)，就是通过用户的一次性鉴别登录。当用户在身份认证服务器上登录一次以后，即可获得访问单点登录系统中其他关联系统和应用软件的权限，同时这种实现是不需要管理员对用户的登录状态或其他信息进行修改的，这意味着在多个应用系统中，用户只需一次登录就可以访问所有相互信任的应用系统。这种方式减少了由登录产生的时间消耗，辅助了用户管理，是目前比较流行的</p>
<a id="more"></a>
<p>在日常生活中，很多人由于忘记某些网站的登录密码而烦恼，因为大多数用户都要记忆不少于10个用户名和相应密码。</p>
<p>为了便于记忆，很多人都在不同的站点使用相同的用户名和密码，虽然这样可以减少负担，但是同时也降低了安全性，而且使用不同的站点同样要进行多次登录。</p>
<p>同时，随着信息化飞速发展，大型企业和政府部门等都开始使用电子系统进行办公，而且整个办公系统由多个不同的子系统构成，如办公自动化(OA)系统，财务管理系统，档案管理系统，信息查询系统等。如果每个系统都使用独立的登录和验证机制，那么每天工作人员都要登录不同的系统进行办公。用户登录的频繁操作，降低了员工的工作效率，造成工作成本的浪费。</p>
<p>而大量的密码和用户名的记忆时间长了也会出现问题，忘记密码或者混淆密码都会造成很大的麻烦。基于以上原因，为用户提供一个畅通的登录通道变得十分重要。</p>
<p>单点登录(SingleSign-On，SSO)是一种帮助用户快捷访问网络中多个站点的安全通信技术。单点登录系统基于一种安全的通信协议，该协议通过多个系统之间的用户身份信息的交换来实现单点登录。使用单点登录系统时，用户只需要登录一次，就可以访问多个系统，不需要记忆多个口令密码。单点登录使用户可以快速访问网络，从而提高工作效率，同时也能帮助提高系统的安全性。</p>
<p>当然，我们这里主要讨论的是Web系统，确切地讲，应该叫Web SSO。</p>
<h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>我们可以看下阿里生态：</p>
<p>阿里目前给用户提供的服务很庞大，种类也很繁多，我们看几个典型系统应用：淘宝应用、 天猫应用、阿里旅游。这些应用，当用户访问时，都需要登录。</p>
<p>显然，对用户来说，他不希望每个子应用分别登录，因为这都是阿里服务，在用户看来，就相当于一个大系统。</p>
<p>当我在一个应用如淘宝上登录后，再访问阿里旅游、天猫等其它系统，我们发现，系统都显示已登录状态。</p>
<p>当在任意一系统退出登录后，再刷新访问其它系统，均已显示登出状态。</p>
<p>可以看出，阿里实现了SSO。实际上，几乎所有提供复杂服务的互联网公司，都实现了SSO，如阿里、百度、新浪、网易、腾讯、58…</p>
<p><strong>SSO问题，是大中型Web应用经常碰到的问题，</strong><strong>是Java架构师需要掌握的必备技能之一</strong>。中高级以上Web工程师都应对它有个了解。</p>
<p><strong>应用缺点</strong><br>1）不利于重构</p>
<blockquote>
<p>因为涉及到的系统很多，要重构必须要兼容所有的系统，可能很耗时</p>
</blockquote>
<p>2） 无人看守桌面</p>
<blockquote>
<p>因为只需要登录一次，所有的授权的应用系统都可以访问，可能导致一些很重要的信息泄露。</p>
</blockquote>
<h2 id="Demo-示例"><a href="#Demo-示例" class="headerlink" title="Demo 示例"></a>Demo 示例</h2><p>这里我们创建一个oauth2-client服务作为需要登录的客户端服务，使用上一节中的oauth2-jwt-server服务作为授权服务，当我们在oauth2-jwt-server服务上登录以后，就可以直接访问oauth2-client需要登录的接口，来演示下SSO功能</p>
<p>1、创建模块 oauth2-client </p>
<p>2、pom.xml中添加相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure>
<p>3、application.yml中配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9501</span><br><span class="line">  <span class="selector-tag">servlet</span>:</span><br><span class="line">    <span class="selector-tag">session</span>:</span><br><span class="line">      <span class="selector-tag">cookie</span>:</span><br><span class="line">        # 防止<span class="selector-tag">cookie</span>冲突，冲突会导致登录验证不通过</span><br><span class="line">        <span class="selector-tag">name</span>: <span class="selector-tag">OAUTH2-CLIENT-SESSIONID</span></span><br><span class="line"></span><br><span class="line">oauth2-jwt-server-url: http://localhost:9401</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">oauth2-client</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">security</span>:</span><br><span class="line">  # 与<span class="selector-tag">oauth2-server</span>对应的配置</span><br><span class="line">  <span class="selector-tag">oauth2</span>:</span><br><span class="line">    <span class="selector-tag">client</span>:</span><br><span class="line">      <span class="selector-tag">client-id</span>: <span class="selector-tag">admin</span></span><br><span class="line">      <span class="selector-tag">client-secret</span>: <span class="selector-tag">admin123456</span></span><br><span class="line">      user-authorization-uri: $&#123;oauth2-jwt-server-url&#125;/oauth/authorize</span><br><span class="line">      access-token-uri: $&#123;oauth2-jwt-server-url&#125;/oauth/token</span><br><span class="line">    <span class="selector-tag">resource</span>:</span><br><span class="line">      <span class="selector-tag">jwt</span>:</span><br><span class="line">        key-uri: $&#123;oauth2-jwt-server-url&#125;/oauth/token_key</span><br></pre></td></tr></table></figure>

<p>4、新建接口用于获取当前登录用户信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/getCurrentUser"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> authentication;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、修改授权服务器配置：</p>
<blockquote>
<p>修改oauth2-jwt-server模块中的AuthorizationServerConfig类，将绑定的跳转路径为<a href="http://localhost:9501/login，并添加获取秘钥时的身份认证" target="_blank" rel="noopener">http://localhost:9501/login，并添加获取秘钥时的身份认证</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//以上省略一堆代码...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// 配置client_id</span></span><br><span class="line">                .withClient(<span class="string">"admin"</span>)</span><br><span class="line">                <span class="comment">// 配置client_secret</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">"admin123456"</span>))</span><br><span class="line">                <span class="comment">// 配置访问token的有效期</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">3600</span>)</span><br><span class="line">                <span class="comment">// 配置刷新token的有效期</span></span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">864000</span>)</span><br><span class="line">                <span class="comment">// 配置redirect_uri,用于授权成功后的跳转</span></span><br><span class="line">                <span class="comment">// .redirectUris("http://www.baidu.com")</span></span><br><span class="line">                <span class="comment">// 单点登录时配置</span></span><br><span class="line">                .redirectUris(<span class="string">"http://localhost:9501/login"</span>)</span><br><span class="line">                <span class="comment">// 配置申请的权限范围</span></span><br><span class="line">                .scopes(<span class="string">"all"</span>)</span><br><span class="line">                <span class="comment">// 配置grant_type,表示授权类型</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">"authorization_code"</span>, <span class="string">"password"</span>, <span class="string">"refresh_token"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取密钥需要身份认证，使用单点登录时必须配置</span></span><br><span class="line">        security.tokenKeyAccess(<span class="string">"isAuthenticated()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、在启动类上添加@EnableOAuth2Sso注解来启用单点登录功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableOAuth</span>2Sso</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oauth2ClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Oauth2ClientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、网页单点登录测试：</p>
<p>启动oauth2-jwt-server服务和oauth2-client服务：</p>
<p>访问客户端需要授权的接口  <a href="http://localhost:9501/user/getCurrentUser" target="_blank" rel="noopener">http://localhost:9501/user/getCurrentUser</a> 会跳转到授权服务的登录界面</p>
<p><img src="https://img-blog.csdnimg.cn/20200524220551769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200524220636614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)PS:如果需要跳过授权操作进行自动授权可以添加autoApprove(true)配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	clients.inMemory()</span><br><span class="line">			<span class="comment">// 配置client_id</span></span><br><span class="line">			.withClient(<span class="string">"admin"</span>)</span><br><span class="line">			<span class="comment">// 配置client_secret</span></span><br><span class="line">			.secret(passwordEncoder.encode(<span class="string">"admin123456"</span>))</span><br><span class="line">			<span class="comment">// 配置访问token的有效期</span></span><br><span class="line">			.accessTokenValiditySeconds(<span class="number">3600</span>)</span><br><span class="line">			<span class="comment">// 配置刷新token的有效期</span></span><br><span class="line">			.refreshTokenValiditySeconds(<span class="number">864000</span>)</span><br><span class="line">			<span class="comment">// 配置redirect_uri,用于授权成功后的跳转</span></span><br><span class="line">			<span class="comment">// .redirectUris("http://www.baidu.com")</span></span><br><span class="line">			.redirectUris(<span class="string">"http://localhost:9501/login"</span>)</span><br><span class="line">			<span class="comment">// 自动授权配置</span></span><br><span class="line">			.autoApprove(<span class="keyword">true</span>)</span><br><span class="line">			<span class="comment">// 配置申请的权限范围</span></span><br><span class="line">			.scopes(<span class="string">"all"</span>)</span><br><span class="line">			<span class="comment">// 配置grant_type,表示授权类型</span></span><br><span class="line">			.authorizedGrantTypes(<span class="string">"authorization_code"</span>, <span class="string">"password"</span>, <span class="string">"refresh_token"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="调用接口单点登录演示"><a href="#调用接口单点登录演示" class="headerlink" title="调用接口单点登录演示"></a>调用接口单点登录演示</h5><p>访问客户端需要登录的接口：<a href="http://localhost:9501/user/getCurrentUser" target="_blank" rel="noopener">http://localhost:9501/user/getCurrentUser</a></p>
<blockquote>
<p>这里我们使用postman，当然也可以使用postwoman</p>
</blockquote>
<p>使用Oauth2认证方式获取访问令牌：<br>1、<br><img src="https://img-blog.csdnimg.cn/20200524221423434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">2、<br><img src="https://img-blog.csdnimg.cn/20200524221922173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>3、<br><img src="https://img-blog.csdnimg.cn/20200524221824740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">4、登录并且成功后：<br><img src="https://img-blog.csdnimg.cn/20200524222107617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5、最后请求接口可以获取到如下信息：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "authorities": [</span><br><span class="line">        &#123;</span><br><span class="line">            "authority": "admin"</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "<span class="selector-tag">details</span>": &#123;</span><br><span class="line">        "remoteAddress": "0:0:0:0:0:0:0:1",</span><br><span class="line">        "<span class="selector-tag">sessionId</span>": "5<span class="selector-tag">E09C9C71104B13454AAF495B797DF98</span>",</span><br><span class="line">        "<span class="selector-tag">tokenValue</span>": "<span class="selector-tag">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span class="selector-class">.eyJ1c2VyX25hbWUiOiJjaGZzdW4iLCJzY29wZSI6WyJhbGwiXSwiZXhwIjoxNTkwMzMzNzk0LCJhcHBfaWQiOiIxMjM0NTYiLCJhdXRob3JpdGllcyI6WyJhZG1pbiJdLCJqdGkiOiI3MTdjYzgzMC0wMThkLTRhOGItYmE2ZC00MGQ3YmExYzVmYTgiLCJjbGllbnRfaWQiOiJhZG1pbiJ9</span><span class="selector-class">.w-HuqHioMrB-ynKzggDw7g9rNZ5FYdZfAG5JwcG71B0</span>",</span><br><span class="line">        "<span class="selector-tag">tokenType</span>": "<span class="selector-tag">bearer</span>",</span><br><span class="line">        "<span class="selector-tag">decodedDetails</span>": <span class="selector-tag">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    "<span class="selector-tag">authenticated</span>": <span class="selector-tag">true</span>,</span><br><span class="line">    "<span class="selector-tag">userAuthentication</span>": &#123;</span><br><span class="line">        "authorities": [</span><br><span class="line">            &#123;</span><br><span class="line">                "authority": "admin"</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        "<span class="selector-tag">details</span>": <span class="selector-tag">null</span>,</span><br><span class="line">        "<span class="selector-tag">authenticated</span>": <span class="selector-tag">true</span>,</span><br><span class="line">        "<span class="selector-tag">principal</span>": "<span class="selector-tag">chfsun</span>",</span><br><span class="line">        "credentials": "N/A",</span><br><span class="line">        "<span class="selector-tag">name</span>": "<span class="selector-tag">chfsun</span>"</span><br><span class="line">    &#125;,</span><br><span class="line">    "<span class="selector-tag">principal</span>": "<span class="selector-tag">chfsun</span>",</span><br><span class="line">    "<span class="selector-tag">credentials</span>": "",</span><br><span class="line">    "<span class="selector-tag">clientOnly</span>": <span class="selector-tag">false</span>,</span><br><span class="line">    "<span class="selector-tag">oauth2Request</span>": &#123;</span><br><span class="line">        "clientId": "admin",</span><br><span class="line">        "scope": [</span><br><span class="line">            "<span class="selector-tag">all</span>"</span><br><span class="line">        ],</span><br><span class="line">        "<span class="selector-tag">requestParameters</span>": &#123;</span><br><span class="line">            "client_id": "admin"</span><br><span class="line">        &#125;,</span><br><span class="line">        "<span class="selector-tag">resourceIds</span>": <span class="selector-attr">[]</span>,</span><br><span class="line">        "<span class="selector-tag">authorities</span>": <span class="selector-attr">[]</span>,</span><br><span class="line">        "<span class="selector-tag">approved</span>": <span class="selector-tag">true</span>,</span><br><span class="line">        "<span class="selector-tag">refresh</span>": <span class="selector-tag">false</span>,</span><br><span class="line">        "<span class="selector-tag">redirectUri</span>": <span class="selector-tag">null</span>,</span><br><span class="line">        "<span class="selector-tag">responseTypes</span>": <span class="selector-attr">[]</span>,</span><br><span class="line">        "<span class="selector-tag">extensions</span>": &#123;&#125;,</span><br><span class="line">        "<span class="selector-tag">grantType</span>": <span class="selector-tag">null</span>,</span><br><span class="line">        "<span class="selector-tag">refreshTokenRequest</span>": <span class="selector-tag">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    "<span class="selector-tag">name</span>": "<span class="selector-tag">chfsun</span>"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="oauth2-client添加权限校验"><a href="#oauth2-client添加权限校验" class="headerlink" title="oauth2-client添加权限校验"></a>oauth2-client添加权限校验</h5><p>1、添加配置开启基于方法的权限校验：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Order</span>(<span class="number">101</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在UserController中添加需要admin权限的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/getCurrentUser"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> authentication;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PreAuthorize</span>(<span class="string">"hasAuthority('admin')"</span>)</span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/auth/admin"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">adminAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Has admin auth!"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、测试：<br>3.1 访问具有 admin 权限的接口：<a href="http://localhost:9501/user/auth/admin" target="_blank" rel="noopener">http://localhost:9501/user/auth/admin</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200524223943156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">3.2、使用没有admin权限的帐号，比如andy:123456获取令牌后访问该接口，会发现没有权限访问：</p>
<p><img src="https://img-blog.csdnimg.cn/2020052423080655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="补充-CAS原理"><a href="#补充-CAS原理" class="headerlink" title="补充 CAS原理"></a>补充 CAS原理</h2><p>说到单点登录，就肯定会见到这个名词：CAS （Central Authentication Service），下面说说CAS是怎么搞的。</p>
<p>如果已经将登录单独抽取成系统出来，我们还能这样做。现在我们有两个系统，分别是<a href="http://www.1.com和www.2.com，一个SSO" target="_blank" rel="noopener">www.1.com和www.2.com，一个SSO</a> <a href="http://www.sso.com" target="_blank" rel="noopener">www.sso.com</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200524234331122.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>首先，用户想要访问系统A  <a href="http://www.1.com受限的资源(比如说购物车功能，购物车功能需要登录后才能访问)，系统A" target="_blank" rel="noopener">www.1.com受限的资源(比如说购物车功能，购物车功能需要登录后才能访问)，系统A</a> <a href="http://www.1.com发现用户并没有登录，于是重定向到sso认证中心，并将自己的地址作为参数。请求的地址如下：">www.1.com发现用户并没有登录，于是重定向到sso认证中心，并将自己的地址作为参数。请求的地址如下：</a></p>
<pre><code>www.sso.com?service=www.1.com</code></pre><p>sso认证中心发现用户未登录，将用户引导至登录页面，用户进行输入用户名和密码进行登录，用户与认证中心建立全局会话（生成一份Token，写到Cookie中，保存在浏览器上）</p>
<p><img src="https://img-blog.csdnimg.cn/20200524234352603.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>随后，认证中心重定向回系统A，并把Token携带过去给系统A，重定向的地址如下：</p>
<pre><code>www.1.com?token=xxxxxxx</code></pre><p>接着，系统A去sso认证中心验证这个Token是否正确，如果正确，则系统A和用户建立局部会话（创建Session）。到此，系统A和用户已经是登录状态了。</p>
<p><img src="https://img-blog.csdnimg.cn/20200524234414526.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>此时，用户想要访问系统B <a href="http://www.2.com受限的资源(比如说订单功能，订单功能需要登录后才能访问)，系统B" target="_blank" rel="noopener">www.2.com受限的资源(比如说订单功能，订单功能需要登录后才能访问)，系统B</a> <a href="http://www.2.com发现用户并没有登录，于是重定向到sso认证中心，并将自己的地址作为参数。请求的地址如下：">www.2.com发现用户并没有登录，于是重定向到sso认证中心，并将自己的地址作为参数。请求的地址如下：</a></p>
<pre><code>www.sso.com?service=www.java4y.com</code></pre><p>注意，因为之前用户与认证中心<a href="http://www.sso.com已经建立了全局会话（当时已经把Cookie保存到浏览器上了），所以这次系统B重定向到认证中心www.sso.com是可以带上Cookie的。" target="_blank" rel="noopener">www.sso.com已经建立了全局会话（当时已经把Cookie保存到浏览器上了），所以这次系统B重定向到认证中心www.sso.com是可以带上Cookie的。</a></p>
<p>认证中心根据带过来的Cookie发现已经与用户建立了全局会话了，认证中心重定向回系统B，并把Token携带过去给系统B，重定向的地址如下：</p>
<pre><code>www.2.com?token=xxxxxxx</code></pre><p>接着，系统B去sso认证中心验证这个Token是否正确，如果正确，则系统B和用户建立局部会话（创建Session）。到此，系统B和用户已经是登录状态了。</p>
<p><img src="https://img-blog.csdnimg.cn/20200524234431613.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>看到这里，其实SSO认证中心就类似一个中转站。</p>
<h2 id="使用到的模块"><a href="#使用到的模块" class="headerlink" title="使用到的模块"></a>使用到的模块</h2><p>springcloud-learning<br>├── oauth2-jwt-server – 使用jwt的oauth2认证测试服务<br>└── oauth2-client – SSO的oauth2客户端服务</p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>SSO</tag>
        <tag>oauth2</tag>
        <tag>CAS</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（15）之 Oauth2授权之JWT集成</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8815%EF%BC%89%E4%B9%8B-Oauth2%E6%8E%88%E6%9D%83%E4%B9%8BJWT%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<h2 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h2><blockquote>
<p>JWT是JSON WEB TOKEN的缩写，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了数字签名，所以是可信任和安全的。</p>
</blockquote>
<p>简单地说，基于JWT的用户验证方案一般都会采用Oauth2的简化方式。通常是认证服务器签发accesstoken，客户端持有accesstoken后就能向资源服务器发起申请。这个做法好处在于无论是认证服务器还是资源服务器都不需要存储用户Token，假设JWT用的算法是对称加密如，那么资源服务器端和认证服务器端持有同样的key即可。</p>
<a id="more"></a>
<p>这种场景非常适合微服务的场景下，将鉴权部分抽象出来作为基础模块，这样每次创建一个新的业务服务时只要调用这个鉴权算法并且持有与认证服务器相同的key即可。这样做的好处在于你JWT可以通过cookie或者是header，完全避免了跨域问题和客户端平台问题。另外一方面这种做法的不足之处持有key的客户端可以无穷端登录或者狂刷你的接口，所以如果使用JWT想要避免这些问题的话也要去做接口防刷与多端登录的方案，如再增加一个redis查询token的环节。</p>
<h4 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h4><p>JWT token的格式：header+payload+signature</p>
<h6 id="header-中用于存放签名的生成算法："><a href="#header-中用于存放签名的生成算法：" class="headerlink" title="header 中用于存放签名的生成算法："></a><strong>header</strong> 中用于存放签名的生成算法：</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "alg": "HS256",</span><br><span class="line">  "<span class="selector-tag">typ</span>": "<span class="selector-tag">JWT</span>"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="payload-中用于存放数据，比如过期时间、用户名、用户所拥有的权限等："><a href="#payload-中用于存放数据，比如过期时间、用户名、用户所拥有的权限等：" class="headerlink" title="payload 中用于存放数据，比如过期时间、用户名、用户所拥有的权限等："></a><strong>payload</strong> 中用于存放数据，比如过期时间、用户名、用户所拥有的权限等：</h6><p>{<br>  “user_name”: “chfsun”,<br>  “scope”: [<br>    “all”<br>  ],<br>  “exp”: 1577678449,<br>  “authorities”: [<br>    “admin”<br>  ],<br>  “jti”: “618cda6a-dfce-4966-b0df-00607f693ab5”,<br>  “client_id”: “admin”<br>}</p>
<h6 id="signature-为以header和payload生成的签名，一旦header和payload被篡改，验证将失败"><a href="#signature-为以header和payload生成的签名，一旦header和payload被篡改，验证将失败" class="headerlink" title="signature 为以header和payload生成的签名，一旦header和payload被篡改，验证将失败"></a><strong>signature</strong> 为以header和payload生成的签名，一旦header和payload被篡改，验证将失败</h6><h3 id="oauth2中存储令牌的方式"><a href="#oauth2中存储令牌的方式" class="headerlink" title="oauth2中存储令牌的方式:"></a>oauth2中存储令牌的方式:</h3><blockquote>
<p>在上一节中我们都是把令牌存储在内存中的，这样如果部署多个服务，就会导致无法使用令牌的问题。 Spring Cloud Security中有两种存储令牌的方式可用于解决该问题，一种是使用Redis来存储，另一种是使用JWT来存储。</p>
</blockquote>
<p><strong>1、JWT</strong>: 生成并发给客户端之后，后台是不用存储，客户端访问时会验证其签名、过期时间等再取出里面的信息（如username），再使用该信息直接查询用户信息完成登录验证。jwt自带签名、过期等校验，后台不用存储，缺陷是一旦下发，服务后台无法拒绝携带该jwt的请求（如踢除用户）</p>
<p><strong>理论上jwt可以应用在庞大的系统 或者 各自独立的系统 或者 不同人开发的系统；</strong></p>
<p><strong>2、token+redis</strong>： 是自己生成个32位的key，value为用户信息，访问时判断redis里是否有该token，如果有，则加载该用户信息完成登录。服务需要存储下发的每个token及对应的value，维持其过期时间，好处是随时可以删除某个token，阻断该token继续使用</p>
<p><strong>理论上token+redis可以应用在中小的系统里 或者 各系统连系紧密 或者 同一批人开发的系统</strong></p>
<h2 id="示例Demo"><a href="#示例Demo" class="headerlink" title="示例Demo"></a>示例Demo</h2><blockquote>
<p>该模块只是对oauth2-server模块的扩展，直接复制过来在原有基础上扩展下即可</p>
</blockquote>
<h3 id="使用Redis存储令牌"><a href="#使用Redis存储令牌" class="headerlink" title="使用Redis存储令牌"></a>使用Redis存储令牌</h3><p>1、pom.xml中添加Redis相关依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、配置文件设置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 9401</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">oauth2-jwt-server</span></span><br><span class="line">  <span class="selector-tag">redis</span>:</span><br><span class="line">    # <span class="selector-tag">redis</span>相关配置</span><br><span class="line">    <span class="selector-tag">host</span>: <span class="selector-tag">localhost</span></span><br><span class="line">    <span class="selector-tag">database</span>: 0</span><br><span class="line">    <span class="selector-tag">port</span>: 6379</span><br></pre></td></tr></table></figure>

<p>3、添加在Redis中存储令牌的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTokenStoreConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> TokenStore <span class="title">redisTokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、在授权服务器配置中指定令牌的存储策略为Redis：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="meta">@Qualifier</span>(<span class="string">"redisTokenStore"</span>)</span><br><span class="line">	<span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 使用密码模式需要配置</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">		endpoints.authenticationManager(authenticationManager).userDetailsService(userService)</span><br><span class="line">				<span class="comment">// 配置令牌存储策略</span></span><br><span class="line">				.tokenStore(tokenStore);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//省略代码..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、测试：<br>运行项目后使用最简单的密码模式来获取令牌，访问如下地址：<a href="http://localhost:9401/oauth/token" target="_blank" rel="noopener">http://localhost:9401/oauth/token</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200522154732515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>6、打开ridis，可以发现令牌已经被存储到Redis中：</p>
<p><img src="https://img-blog.csdnimg.cn/20200522154911344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="使用JWT存储令牌"><a href="#使用JWT存储令牌" class="headerlink" title="使用JWT存储令牌"></a>使用JWT存储令牌</h3><p>1、添加使用JWT存储令牌的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenStoreConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@Primary</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> TokenStore <span class="title">jwtTokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		JwtAccessTokenConverter jwtAccessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">		<span class="comment">// 配置jwt使用的密钥</span></span><br><span class="line">		jwtAccessTokenConverter.setSigningKey(<span class="string">"test_key"</span>);</span><br><span class="line">		<span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在授权服务器配置中指定令牌的存储策略为JWT：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * @Autowired</span></span><br><span class="line"><span class="comment">	 * @Qualifier("redisTokenStore") </span></span><br><span class="line"><span class="comment">	 * private TokenStore tokenStore;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="meta">@Qualifier</span>(<span class="string">"jwtTokenStore"</span>)</span><br><span class="line">	<span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 使用密码模式需要配置</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">		endpoints.authenticationManager(authenticationManager).userDetailsService(userService)</span><br><span class="line">				<span class="comment">// 配置令牌存储策略</span></span><br><span class="line">				.tokenStore(tokenStore)</span><br><span class="line">				.accessTokenConverter(jwtAccessTokenConverter);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//省略代码..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、运行项目后使用密码模式来获取令牌，访问如下地址：<a href="http://localhost:9401/oauth/token" target="_blank" rel="noopener">http://localhost:9401/oauth/token</a>：</p>
<p><img src="https://img-blog.csdnimg.cn/20200522162850936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>4、发现获取到的令牌已经变成了JWT令牌，将access_token拿到<a href="http://jwt.calebb.net/" target="_blank" rel="noopener">http://jwt.calebb.net/</a> 或者 <a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a>  网站上去解析下可以获得其中内容：</p>
<p><img src="https://img-blog.csdnimg.cn/20200522163128620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="JWT中存储内容的扩展"><a href="#JWT中存储内容的扩展" class="headerlink" title="JWT中存储内容的扩展"></a>JWT中存储内容的扩展</h3><blockquote>
<p>有时候我们需要扩展JWT中存储的内容，这里我们在JWT中扩展一个key为app_id，value为 123456 的数据</p>
</blockquote>
<p>1、继承TokenEnhancer实现一个JWT内容增强器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenEnhancer</span> <span class="keyword">implements</span> <span class="title">TokenEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">enhance</span><span class="params">(OAuth2AccessToken oAuth2AccessToken, OAuth2Authentication oAuth2Authentication)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; info = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		info.put(<span class="string">"app_id"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">		((DefaultOAuth2AccessToken) oAuth2AccessToken).setAdditionalInformation(info);</span><br><span class="line">		<span class="keyword">return</span> oAuth2AccessToken;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、添加一个JwtTokenEnhancer实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenStoreConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtTokenEnhancer <span class="title">jwtTokenEnhancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenEnhancer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、在授权服务器配置中配置JWT的内容增强器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"jwtTokenStore"</span>)</span><br><span class="line">    <span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenEnhancer jwtTokenEnhancer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用密码模式需要配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TokenEnhancerChain tokenEnhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">        List&lt;TokenEnhancer&gt; delegates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 配置jwt内容增强器</span></span><br><span class="line">        delegates.add(jwtTokenEnhancer);</span><br><span class="line">        delegates.add(jwtAccessTokenConverter);</span><br><span class="line">        tokenEnhancerChain.setTokenEnhancers(delegates);</span><br><span class="line"></span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .userDetailsService(userService)</span><br><span class="line">                <span class="comment">// 配置令牌存储策略</span></span><br><span class="line">                .tokenStore(tokenStore)</span><br><span class="line">                .accessTokenConverter(jwtAccessTokenConverter)</span><br><span class="line">                .tokenEnhancer(tokenEnhancerChain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、运行项目后使用密码模式来获取令牌，之后对令牌进行解析，发现已经包含扩展的内容：</p>
<p><img src="https://img-blog.csdnimg.cn/20200522170343596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Java中解析JWT中的内容"><a href="#Java中解析JWT中的内容" class="headerlink" title="Java中解析JWT中的内容"></a>Java中解析JWT中的内容</h2><blockquote>
<p>如果我们需要获取JWT中的信息，可以使用一个叫jjwt的工具包</p>
</blockquote>
<p>1、pom.xml中添加相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--解析JWT中的内容--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;0.9.1&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--工具包--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;5.1.0&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、修改UserController类，使用jjwt工具类来解析Authorization头中存储的JWT内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getCurrentUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">(Authentication authentication, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String header = request.getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">        String token = StrUtil.subAfter(header, <span class="string">"bearer"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(<span class="string">"test_key"</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、将令牌放入Authorization头中，访问如下地址获取信息：<a href="http://localhost:9401/user/getCurrentUser：" target="_blank" rel="noopener">http://localhost:9401/user/getCurrentUser：</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200522171138757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="刷新令牌"><a href="#刷新令牌" class="headerlink" title="刷新令牌"></a>刷新令牌</h2><blockquote>
<p>在Spring Cloud Security 中使用oauth2时，如果令牌失效了，可以使用刷新令牌通过refresh_token的授权模式再次获取access_token</p>
</blockquote>
<p>1、只需修改授权服务器的配置，添加refresh_token的授权模式即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略代码</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	clients.inMemory()</span><br><span class="line">			<span class="comment">// 配置client_id</span></span><br><span class="line">			.withClient(<span class="string">"admin"</span>)</span><br><span class="line">			<span class="comment">// 配置client_secret</span></span><br><span class="line">			.secret(passwordEncoder.encode(<span class="string">"admin123456"</span>))</span><br><span class="line">			<span class="comment">// 配置访问token的有效期</span></span><br><span class="line">			.accessTokenValiditySeconds(<span class="number">3600</span>)</span><br><span class="line">			<span class="comment">// 配置刷新token的有效期</span></span><br><span class="line">			.refreshTokenValiditySeconds(<span class="number">864000</span>)</span><br><span class="line">			<span class="comment">// 配置redirect_uri,用于授权成功后的跳转</span></span><br><span class="line">			.redirectUris(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">			<span class="comment">// 自动授权配置</span></span><br><span class="line">			.autoApprove(<span class="keyword">true</span>)</span><br><span class="line">			<span class="comment">// 配置申请的权限范围</span></span><br><span class="line">			.scopes(<span class="string">"all"</span>)</span><br><span class="line">			<span class="comment">// 配置grant_type,表示授权类型</span></span><br><span class="line">			.authorizedGrantTypes(<span class="string">"authorization_code"</span>, <span class="string">"password"</span>, <span class="string">"refresh_token"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略代码</span></span><br></pre></td></tr></table></figure>


<p>2、使用刷新令牌模式来获取新的令牌，访问如下地址：<a href="http://localhost:9401/oauth/token：" target="_blank" rel="noopener">http://localhost:9401/oauth/token：</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200522173211893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>执行后可发现新的令牌已经更新</p>
<h2 id="使用到的模块"><a href="#使用到的模块" class="headerlink" title="使用到的模块"></a>使用到的模块</h2><p>springcloud-learning<br>└── oauth2-jwt-server – 使用jwt的oauth2授权测试服务</p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>oauth2</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud入门（17）之 Nacos实现注册和配置中心</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8817%EF%BC%89%E4%B9%8B-Nacos%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案，Nacos 作为其核心组件之一，可以作为注册中心和配置中心使用，Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p>
<a id="more"></a>
<p>参考：<a href="http://dubbo.apache.org/zh-cn/docs/user/references/registry/nacos.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/references/registry/nacos.html</a></p>
<h6 id="Nacos-具有如下特性"><a href="#Nacos-具有如下特性" class="headerlink" title="Nacos 具有如下特性:"></a>Nacos 具有如下特性:</h6><ul>
<li>服务发现和服务健康监测：支持基于DNS和基于RPC的服务发现，支持对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求；</li>
<li>动态配置服务：动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置；</li>
<li>动态 DNS 服务：动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务；</li>
<li>服务及其元数据管理：支持从微服务平台建设的视角管理数据中心的所有服务及元数据</li>
</ul>
<h3 id="使用Nacos作为注册中心"><a href="#使用Nacos作为注册中心" class="headerlink" title="使用Nacos作为注册中心"></a>使用Nacos作为注册中心</h3><h4 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h4><p>1、安装并运行Nacos<br>从官网下载Nacos，这里下载的是最新版本 nacos-server-1.2.1.zip 文件，下载地址：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p>
<p>注意：<em>首先要保证你已经配置好JAVA_HOME环境变量，不配置会导致无法运行Nacos；</em></p>
<p>2、解压安装包，直接运行bin目录下的startup.cmd；</p>
<p>运行成功后，访问  <a href="http://localhost:8848/nacos" target="_blank" rel="noopener">http://localhost:8848/nacos</a>  可以查看Nacos的主页，默认账号密码都是nacos</p>
<p><img src="https://img-blog.csdnimg.cn/20200525212728199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h5 id="二、创建应用注册到Nacos"><a href="#二、创建应用注册到Nacos" class="headerlink" title="二、创建应用注册到Nacos"></a>二、创建应用注册到Nacos</h5><p>1、创建 nacos-orcl-service 模块和 nacos-orcl-robbon-service 模块</p>
<p>2、pom文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  &lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>注意：如果要使用Spring Cloud Alibaba 的组件都需要在pom.xml中添加有如下的配置，STS一般会自动生成：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">dependencyManagement</span>&gt;</span><br><span class="line">		&lt;<span class="selector-tag">dependencies</span>&gt;</span><br><span class="line">			&lt;<span class="selector-tag">dependency</span>&gt;</span><br><span class="line">				&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">				&lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;/version&gt;</span><br><span class="line">				&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">				&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">			&lt;/dependency&gt;</span><br><span class="line">		&lt;/dependencies&gt;</span><br><span class="line">	&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>

<p>3、配置文件：</p>
<blockquote>
<p>这一步，只是演示注册中心，两个模块只要端口不同即可，如服务提供者端口为8206、8207，服务消费者端口为8308</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8206</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">nacos-orcl-service</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">nacos</span>:</span><br><span class="line">      <span class="selector-tag">discovery</span>:</span><br><span class="line">        # 配置<span class="selector-tag">Nacos</span>地址</span><br><span class="line">        server-addr: http://localhost:8848</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">management</span>:</span><br><span class="line">  <span class="selector-tag">endpoints</span>:</span><br><span class="line">    <span class="selector-tag">web</span>:</span><br><span class="line">      <span class="selector-tag">exposure</span>:</span><br><span class="line">        include: '*'</span><br></pre></td></tr></table></figure>

<p>4、分别启动两个模块，在Nacos页面上的服务列表中可以看到如下信息：</p>
<p><img src="https://img-blog.csdnimg.cn/20200525221243898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>4.1、点击右侧的详情：</p>
<p><img src="https://img-blog.csdnimg.cn/20200525221431888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h5 id="三、负载均衡功能"><a href="#三、负载均衡功能" class="headerlink" title="三、负载均衡功能"></a>三、负载均衡功能</h5><blockquote>
<p>参考之前的模块 ribbon-orcl-server-service ，完善后启动服务提供者的服务集群</p>
</blockquote>
<blockquote>
<p>参考之前的模块 ribbon-orcl-client-service ，完善后启动服务消费者</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200525223221481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h6 id="负载均衡功能测试："><a href="#负载均衡功能测试：" class="headerlink" title="负载均衡功能测试："></a>负载均衡功能测试：</h6><p>多次调用接口：<a href="http://localhost:8308/ribbon/1" target="_blank" rel="noopener">http://localhost:8308/ribbon/1</a> ，可以发现两个nacos-orcl-service 的控制台交替打印如下信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cn.chfsun.controller.DeptController      : 当前端口为:<span class="number">8207</span>，根据deptNo获取部门信息，部门名称为：开发部</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cn.chfsun.controller.DeptController      : 当前端口为:<span class="number">8206</span>，根据deptNo获取部门信息，部门名称为：开发部</span><br></pre></td></tr></table></figure>


<h5 id="四、使用Nacos作为配置中心"><a href="#四、使用Nacos作为配置中心" class="headerlink" title="四、使用Nacos作为配置中心"></a>四、使用Nacos作为配置中心</h5><p>参考链接：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config</a></p>
<blockquote>
<p>创建nacos-config-client模块，并在Nacos页面中添加配置信息来演示下配置管理的功能</p>
</blockquote>
<p>1、创建nacos-config-client模块</p>
<p>2、pom.xml中相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>3、添加配置文件application.yml，启用的是dev环境的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure>

<p>4、添加配置文件bootstrap.yml，主要是对Nacos的作为配置中心的功能进行配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">9101</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: nacos-config-client</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        # Nacos地址</span><br><span class="line">        server-addr: http:<span class="comment">//localhost:8848</span></span><br><span class="line">      config:</span><br><span class="line">        # Nacos地址</span><br><span class="line">        server-addr: http:<span class="comment">//localhost:8848</span></span><br><span class="line">        # 这里我们获取的yaml格式的配置</span><br><span class="line">        file-extension: yaml</span><br></pre></td></tr></table></figure>

<p>5、新建ConfigClientController，从Nacos配置中心中获取配置信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;config.info&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/configInfo"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> configInfo;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、在Nacos中添加配置<br> 6.1、我们先来讲下Nacos中的dataid的组成格式及与SpringBoot配置文件中的属性对应关系：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure>

<p>比如说我们现在要获取应用名称为nacos-config-client的应用在dev环境下的yaml配置，dataid如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nacos-config-client-dev.yaml</span><br></pre></td></tr></table></figure>
<p>按照以上dataid添加如下配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">config:</span><br><span class="line">  info: <span class="string">"config info for dev"</span></span><br></pre></td></tr></table></figure>

<p>6.2、填写配置示意图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200525225404417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">6.3、</p>
<p><img src="https://img-blog.csdnimg.cn/20200525225421511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">7、启动nacos-config-client，调用接口查看配置信息：<a href="http://localhost:9101/configInfo" target="_blank" rel="noopener">http://localhost:9101/configInfo</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">config info <span class="keyword">for</span> dev</span><br></pre></td></tr></table></figure>

<h5 id="Nacos的动态刷新配置"><a href="#Nacos的动态刷新配置" class="headerlink" title="Nacos的动态刷新配置"></a>Nacos的动态刷新配置</h5><p>我们只要修改下Nacos中的配置信息，再次调用查看配置的接口，就会发现配置已经刷新，Nacos和Consul一样都支持动态刷新配置。当我们在Nacos页面上修改配置并发布后，应用会刷新配置并打印如下信息：</p>
<p><img src="https://img-blog.csdnimg.cn/20200525225753561.png#pic_center" alt="在这里插入图片描述"><br>参考链接：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/wiki</a></p>
<h4 id="本章示例使用到的模块"><a href="#本章示例使用到的模块" class="headerlink" title="本章示例使用到的模块"></a>本章示例使用到的模块</h4><p>springcloud-learning<br>├── nacos-config-client – 用于演示nacos作为配置中心的nacos客户端<br>├── nacos-orcl-service – 注册到nacos的服务提供者<br>└── nacos-orcl-robbon-service – 注册到nacos的ribbon服务消费者</p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>nacos</tag>
        <tag>注册中心</tag>
        <tag>配置中心</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud（18）之 Sentinel实现服务限流、熔断与降级</title>
    <url>/myblog/spring-cloud/Spring-Cloud%EF%BC%8818%EF%BC%89%E4%B9%8B-Sentinel%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81%E3%80%81%E7%86%94%E6%96%AD%E4%B8%8E%E9%99%8D%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="Sentinel是什么"><a href="#Sentinel是什么" class="headerlink" title="Sentinel是什么"></a>Sentinel是什么</h2><p>Sentinel的官方标题是：分布式系统的流量防卫兵。</p>
<a id="more"></a>
<p>从名字上来看，很容易就能猜到它是用来作服务稳定性保障的。对于服务稳定性保障组件，如果熟悉Spring Cloud的用户，第一反应应该就是Hystrix。但是比较可惜的是Netflix已经宣布对Hystrix停止更新。那么，在未来我们还有什么更好的选择呢？除了Spring Cloud官方推荐的resilience4j之外，目前Spring Cloud Alibaba下整合的Sentinel也是用户可以重点考察和选型的目标。</p>
<p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案，Sentinel 作为其核心组件之一，以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p>Sentinel具有如下特性:</p>
<ul>
<li><p>丰富的应用场景：承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀，可以实时熔断下游不可用应用；</p>
</li>
<li><p>完备的实时监控：同时提供实时的监控功能。可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况；</p>
</li>
<li><p>广泛的开源生态：提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合；</p>
</li>
<li><p>完善的 SPI 扩展点：提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。</p>
</li>
</ul>
<h3 id="安装Sentinel控制台"><a href="#安装Sentinel控制台" class="headerlink" title="安装Sentinel控制台"></a>安装Sentinel控制台</h3><blockquote>
<p>Sentinel控制台是一个轻量级的控制台应用，它可用于实时查看单机资源监控及集群资源汇总，并提供了一系列的规则管理功能，如流控规则、降级规则、热点规则等。</p>
</blockquote>
<p>官网下载Sentinel，本示例下载的是sentinel-dashboard-1.7.1.jar文件，下载地址：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a></p>
<p>下载完成后在命令行输入如下命令运行Sentinel控制台：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar sentinel-dashboard-<span class="number">1.7</span><span class="number">.1</span>.jar</span><br></pre></td></tr></table></figure>

<p>Sentinel控制台默认运行在8080端口上，登录账号密码均为sentinel，通过如下地址可以进行访问：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200526171113223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="示例Demo"><a href="#示例Demo" class="headerlink" title="示例Demo"></a>示例Demo</h3><p>1、创建sentinel-service模块</p>
<blockquote>
<p>创建一个sentinel-service模块，用于演示Sentinel的熔断与限流功能</p>
</blockquote>
<p>2、pom文件依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、application.yml中相关配置，主要是配置了Nacos和Sentinel控制台的地址：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8401</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">sentinel-service</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">nacos</span>:</span><br><span class="line">      # 配置<span class="selector-tag">Nacos</span>地址</span><br><span class="line">      server-addr: http://localhost:8848</span><br><span class="line">    <span class="selector-tag">sentinel</span>:</span><br><span class="line">      <span class="selector-tag">transport</span>:</span><br><span class="line">        # 配置<span class="selector-tag">Sentinel</span> <span class="selector-tag">dashborad</span>地址</span><br><span class="line">        dashboard: http://localhost:8080</span><br><span class="line">        <span class="selector-tag">port</span>: 8719</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">service-url</span>:</span><br><span class="line">  dept-service: http://nacos-orcl-service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">management</span>:</span><br><span class="line">  <span class="selector-tag">endpoints</span>:</span><br><span class="line">    <span class="selector-tag">web</span>:</span><br><span class="line">      <span class="selector-tag">exposure</span>:</span><br><span class="line">        include: '*'</span><br></pre></td></tr></table></figure>

<h4 id="限流功能"><a href="#限流功能" class="headerlink" title="限流功能"></a>限流功能</h4><blockquote>
<p>Sentinel Starter 默认为所有的 HTTP 服务提供了限流埋点，我们也可以通过使用@SentinelResource来自定义一些限流行为</p>
</blockquote>
<p>@SentinelResource注解的属性：</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">作用</th>
<th style="text-align:left">是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">value</td>
<td style="text-align:left">资源名称</td>
<td style="text-align:left">是</td>
</tr>
<tr>
<td style="text-align:left">entryType</td>
<td style="text-align:left">entry类型，标记流量的方向，取值IN/OUT，默认是OUT</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">blockHandler</td>
<td style="text-align:left">处理BlockException的函数名称</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">blockHandlerClass</td>
<td style="text-align:left">存放blockHandler的类。对应的处理函数必须static修饰，否则无法解析，其他要求：同blockHandler</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">fallback</td>
<td style="text-align:left">用于在抛出异常的时候提供fallback处理逻辑。fallback函数可以针对所有类型的异常（除了<code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">fallbackClass【1.6支持】</td>
<td style="text-align:left">存放fallback的类。对应的处理函数必须static修饰，否则无法解析，其他要求：同fallback</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">defaultFallback【1.6支持】</td>
<td style="text-align:left">用于通用的 fallback 逻辑。默认fallback函数可以针对所有类型的异常（除了<code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，以fallback为准</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">exceptionsToIgnore【1.6支持】</td>
<td style="text-align:left">指定排除掉哪些异常。排除的异常不会计入异常统计，也不会进入fallback逻辑，而是原样抛出</td>
<td style="text-align:left">否</td>
</tr>
<tr>
<td style="text-align:left">exceptionsToTrace</td>
<td style="text-align:left">需要trace的异常</td>
<td style="text-align:left"><code>Throwable</code></td>
</tr>
</tbody>
</table>

<p>blockHandler，处理BlockException函数的要求：</p>
<pre><code>必须是public
返回类型与原方法一致
参数类型需要和原方法相匹配，并在最后加BlockException类型的参数
默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 blockHandlerClass ，并指定blockHandlerClass里面的方法</code></pre><p>fallback函数要求：</p>
<pre><code>返回类型与原方法一致
参数类型需要和原方法相匹配，Sentinel 1.6开始，也可在方法最后加Throwable类型的参数
默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定fallbackClass里面的方法</code></pre><p>defaultFallback函数要求：</p>
<pre><code>返回类型与原方法一致
方法参数列表为空，或者有一个Throwable类型的参数
默认需要和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定 fallbackClass 里面的方法</code></pre><p>参考链接：<a href="https://github.com/alibaba/Sentinel/blob/1.6.2/sentinel-extension/sentinel-annotation-aspectj/src/test/java/com/alibaba/csp/sentinel/annotation/aspectj/integration/service/FooService.java" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/blob/1.6.2/sentinel-extension/sentinel-annotation-aspectj/src/test/java/com/alibaba/csp/sentinel/annotation/aspectj/integration/service/FooService.java</a></p>
<p>3、创建RateLimitController类，用于测试熔断和限流功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rateLimit"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按资源名称限流，需要指定限流处理逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/byResource"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"byResource"</span>, blockHandler = <span class="string">"handleException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">byResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"按资源名称限流"</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按url限流，有默认的限流处理逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"byUrl"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"byUrl"</span>, blockHandler = <span class="string">"handleException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">byUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"按url限流"</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">handleException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(exception.getClass().getCanonicalName(), <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h4 id="根据资源名称限流"><a href="#根据资源名称限流" class="headerlink" title="根据资源名称限流"></a>根据资源名称限流</h4><blockquote>
<p>我们可以根据@SentinelResource注解中定义的value（资源名称）来进行限流操作，但是需要指定限流处理逻辑</p>
</blockquote>
<p>流控规则可以在Sentinel控制台进行配置，由于我们使用了Nacos注册中心，我们先启动Nacos和sentinel-service</p>
<p>由于Sentinel采用的懒加载规则，需要我们先访问下接口，Sentinel控制台中才会有对应服务信息，我们先访问下该接口：<a href="http://localhost:8401/rateLimit/byResource" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byResource</a></p>
<p>在Sentinel控制台配置流控规则，根据@SentinelResource注解的value值：</p>
<p><img src="https://img-blog.csdnimg.cn/20200526180354685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h6 id="限流测试"><a href="#限流测试" class="headerlink" title="限流测试"></a>限流测试</h6><p>快速访问上面的接口，可以发现返回了自己定义的限流处理信息：</p>
<p><img src="https://img-blog.csdnimg.cn/20200526180557947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="根据URL限流"><a href="#根据URL限流" class="headerlink" title="根据URL限流"></a>根据URL限流</h4><blockquote>
<p>我们还可以通过访问的URL来限流，会返回默认的限流处理信息</p>
</blockquote>
<p>1、在Sentinel控制台配置流控规则，使用访问的URL：</p>
<p><img src="https://img-blog.csdnimg.cn/20200526181039435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">2、测试，多次访问该接口，会返回默认的限流处理结果：<a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a> </p>
<p><img src="https://img-blog.csdnimg.cn/20200526181113951.png#pic_center" alt="在这里插入图片描述"></p>
<h4 id="自定义限流处理逻辑"><a href="#自定义限流处理逻辑" class="headerlink" title="自定义限流处理逻辑"></a>自定义限流处理逻辑</h4><blockquote>
<p>我们可以自定义通用的限流处理逻辑，然后在@SentinelResource中指定</p>
</blockquote>
<p>1、新建CustomBlockHandler类用于自定义限流处理逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBlockHandler</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">handleException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"自定义限流信息"</span>, <span class="number">200</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、在RateLimitController中使用自定义限流处理逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略代码</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 自定义通用的限流处理逻辑</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/customBlockHandler"</span>)</span><br><span class="line">	<span class="meta">@SentinelResource</span>(value = <span class="string">"customBlockHandler"</span>, blockHandler = <span class="string">"handleException"</span>, blockHandlerClass = CustomBlockHandler<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">Result</span> <span class="title">customBlockHandler</span>() </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"限流成功"</span>, <span class="number">200</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略代码</span></span><br></pre></td></tr></table></figure>
<p>3、在Sentinel控制台配置流控规则，测试结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200526185501154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="熔断功能"><a href="#熔断功能" class="headerlink" title="熔断功能"></a>熔断功能</h4><blockquote>
<p>Sentinel 支持对服务间调用进行保护，对故障应用进行熔断操作，这里我们使用RestTemplate来调用nacos-user-service服务所提供的接口来演示下该功能</p>
</blockquote>
<blockquote>
<p>可参考 模块 ribbon-orcl-client-service</p>
</blockquote>
<p>1、使用@SentinelRestTemplate来包装下RestTemplate实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@LoadBalanced</span></span><br><span class="line">	<span class="meta">@SentinelRestTemplate</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、新建控制层DeptController ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/breaker"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DeptController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;service-url.dept-service&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String deptServiceUrl;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/fallback/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="meta">@SentinelResource</span>(value = <span class="string">"fallback"</span>, fallback = <span class="string">"handleFallback"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">getDept</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		Result forObject = restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;1&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">		System.out.println(forObject);</span><br><span class="line">		<span class="keyword">return</span> forObject;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/fallbackException/&#123;id&#125;"</span>)</span><br><span class="line">	<span class="meta">@SentinelResource</span>(value = <span class="string">"fallbackException"</span>, fallback = <span class="string">"handleFallback2"</span>, exceptionsToIgnore = &#123;</span><br><span class="line">			NullPointerException<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">Result</span> <span class="title">fallbackException</span>(@<span class="title">PathVariable</span> <span class="title">Integer</span> <span class="title">deptNo</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (deptNo == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (deptNo == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> restTemplate.getForObject(deptServiceUrl + <span class="string">"/dept/&#123;1&#125;"</span>, Result<span class="class">.<span class="keyword">class</span>, <span class="title">deptNo</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">handleFallback</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"服务降级返回"</span>, <span class="number">200</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">handleFallback2</span><span class="params">(Integer deptNo, Throwable e)</span> </span>&#123;</span><br><span class="line">		LOGGER.error(<span class="string">"handleFallback2 id:&#123;&#125;,throwable class:&#123;&#125;"</span>, deptNo, e.getClass());</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"服务降级返回"</span>, <span class="number">200</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、依次启动 nacos-orcl-service、sentinel-service 模块，测试如下：</p>
<p>3.1、浏览器访问 <a href="http://localhost:8401/breaker/fallback/1：" target="_blank" rel="noopener">http://localhost:8401/breaker/fallback/1：</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;Result&gt;</span><br><span class="line">&lt;data&gt;</span><br><span class="line">&lt;deptNo&gt;1&lt;/deptNo&gt;</span><br><span class="line">&lt;deptName&gt;开发部&lt;/deptName&gt;</span><br><span class="line">&lt;localtion&gt;西区&lt;/localtion&gt;</span><br><span class="line">&lt;/data&gt;</span><br><span class="line">&lt;message&gt;操作成功&lt;/message&gt;</span><br><span class="line">&lt;code&gt;200&lt;/code&gt;</span><br><span class="line">&lt;/Result&gt;</span><br></pre></td></tr></table></figure>
<p>3.2、浏览器访问 <a href="http://localhost:8401/breaker/fallback/2" target="_blank" rel="noopener">http://localhost:8401/breaker/fallback/2</a>  ：<br>因为数据库并没有2这个编号的数据，因此：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;Result&gt;</span><br><span class="line">&lt;data/&gt;</span><br><span class="line">&lt;message&gt;服务降级返回&lt;/message&gt;</span><br><span class="line">&lt;code&gt;200&lt;/code&gt;</span><br><span class="line">&lt;/Result&gt;</span><br></pre></td></tr></table></figure>
<p>3.3、浏览器访问 <a href="http://localhost:8401/breaker/fallbackException/2" target="_blank" rel="noopener">http://localhost:8401/breaker/fallbackException/2</a><br>由于我们使用了exceptionsToIgnore参数忽略了NullPointerException，所以我们访问接口报空指针时不会发生服务降级，会直接显示：<br><img src="https://img-blog.csdnimg.cn/20200526222044993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h4 id="与Feign结合使用"><a href="#与Feign结合使用" class="headerlink" title="与Feign结合使用"></a>与Feign结合使用</h4><blockquote>
<p>Sentinel也适配了Feign组件，我们使用Feign来进行服务间调用时，也可以使用它来进行熔断</p>
</blockquote>
<blockquote>
<p>可参考 feign-service 模块</p>
</blockquote>
<p>1、pom.xml中添加Feign相关依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2、application.yml中添加Sentinel对Feign的支持：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 打开sentinel对feign的支持</span><br><span class="line">feign:</span><br><span class="line">  sentinel:</span><br><span class="line">    enabled: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>3、创建一个DeptService接口，用于定义对nacos-orcl-service服务提供者的调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"nacos-orcl-service"</span>, fallback = DeptFallbackService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/insert"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">insert</span><span class="params">(@RequestBody Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function">Result&lt;Dept&gt; <span class="title">getDept</span><span class="params">(@PathVariable Integer deptNo)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/getByName"</span>)</span><br><span class="line">	<span class="function">Result&lt;Dept&gt; <span class="title">getByName</span><span class="params">(@RequestParam String deptName)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/listDept"</span>)</span><br><span class="line">	Result&lt;List&lt;Dept&gt;&gt; listDept();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/dept/queryListByDeptNos"</span>)</span><br><span class="line">	Result&lt;List&lt;Dept&gt;&gt; queryListByDeptNos(<span class="meta">@RequestParam</span> List&lt;Integer&gt; deptNos);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/update"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">update</span><span class="params">(@RequestBody Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/dept/delete/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function">Result <span class="title">delete</span><span class="params">(@PathVariable Integer deptNo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、创建DeptFallbackService类实现UserService接口，用于处理服务降级逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptFallbackService</span> <span class="keyword">implements</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;Dept&gt; <span class="title">getDept</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; listDept() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; queryListByDeptNos(List&lt;Integer&gt; deptNos) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;Dept&gt; <span class="title">getByName</span><span class="params">(String deptName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"调用失败，服务被降级"</span>, <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、新建DeptFeignController类，使用DeptService通过Feign调用nacos-orcl-service服务中的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/feign"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptFeignController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.insert(dept);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result&lt;Dept&gt; <span class="title">getDept</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.getDept(deptNo);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/getByName"</span>)</span><br><span class="line">	<span class="function">Result&lt;Dept&gt; <span class="title">getByName</span><span class="params">(@RequestParam String deptName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.getByName(deptName);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/listDept"</span>)</span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; listDept() &#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.listDept();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/queryListByDeptNos"</span>)</span><br><span class="line">	<span class="keyword">public</span> Result&lt;List&lt;Dept&gt;&gt; queryListByDeptNos(<span class="meta">@RequestParam</span> List&lt;Integer&gt; deptNos) &#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.queryListByDeptNos(deptNos);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(@RequestBody Dept dept)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.update(dept);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/delete/&#123;deptNo&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(@PathVariable Integer deptNo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptService.delete(deptNo);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、在启动类SentinelServiceApplication添加@EnableFeignClients注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelServiceApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SentinelServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、测试<br>调用如下接口会发生服务降级，返回服务降级处理信息：<a href="http://localhost:8401/feign/2" target="_blank" rel="noopener">http://localhost:8401/feign/2</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;Result&gt;</span><br><span class="line">&lt;data/&gt;</span><br><span class="line">&lt;message&gt;调用失败，服务被降级&lt;/message&gt;</span><br><span class="line">&lt;code&gt;500&lt;/code&gt;</span><br><span class="line">&lt;/Result&gt;</span><br></pre></td></tr></table></figure>


<h4 id="使用Nacos存储规则"><a href="#使用Nacos存储规则" class="headerlink" title="使用Nacos存储规则"></a>使用Nacos存储规则</h4><blockquote>
<p>默认情况下，当我们在Sentinel控制台中配置规则时，控制台推送规则方式是通过API将规则推送至客户端并直接更新到内存中。一旦我们重启应用，规则将消失。下面我们介绍下如何将配置规则进行持久化，以存储到Nacos为例</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200526223848210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首先我们直接在配置中心创建规则，配置中心将规则推送到客户端；</p>
<p>Sentinel控制台也从配置中心去获取配置信息。</p>
<h6 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h6><p>1、pom文件添加依赖：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2、application.yml配置文件，添加Nacos数据源配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">server</span>:</span><br><span class="line">  <span class="selector-tag">port</span>: 8401</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">application</span>:</span><br><span class="line">    <span class="selector-tag">name</span>: <span class="selector-tag">sentinel-service</span></span><br><span class="line">  <span class="selector-tag">cloud</span>:</span><br><span class="line">    <span class="selector-tag">nacos</span>:</span><br><span class="line">      # 配置<span class="selector-tag">Nacos</span>地址</span><br><span class="line">      server-addr: http://localhost:8848</span><br><span class="line">    <span class="selector-tag">sentinel</span>:</span><br><span class="line">      <span class="selector-tag">transport</span>:</span><br><span class="line">        # 配置<span class="selector-tag">Sentinel</span> <span class="selector-tag">dashborad</span>地址</span><br><span class="line">        dashboard: http://localhost:8080</span><br><span class="line">        <span class="selector-tag">port</span>: 8719</span><br><span class="line">      # 添加<span class="selector-tag">Nacos</span>数据源配置</span><br><span class="line">      <span class="selector-tag">datasource</span>:</span><br><span class="line">        <span class="selector-tag">ds1</span>:</span><br><span class="line">          <span class="selector-tag">nacos</span>:</span><br><span class="line">            <span class="selector-tag">server-addr</span>: <span class="selector-tag">localhost</span><span class="selector-pseudo">:8848</span></span><br><span class="line">            dataId: $&#123;spring.application.name&#125;-sentinel</span><br><span class="line">            <span class="selector-tag">groupId</span>: <span class="selector-tag">DEFAULT_GROUP</span></span><br><span class="line">            <span class="selector-tag">data-type</span>: <span class="selector-tag">json</span></span><br><span class="line">            <span class="selector-tag">rule-type</span>: <span class="selector-tag">flow</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">service-url</span>:</span><br><span class="line">  dept-service: http://nacos-orcl-service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 打开<span class="selector-tag">sentinel</span>对<span class="selector-tag">feign</span>的支持</span><br><span class="line"><span class="selector-tag">feign</span>:</span><br><span class="line">  <span class="selector-tag">sentinel</span>:</span><br><span class="line">    <span class="selector-tag">enabled</span>: <span class="selector-tag">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">management</span>:</span><br><span class="line">  <span class="selector-tag">endpoints</span>:</span><br><span class="line">    <span class="selector-tag">web</span>:</span><br><span class="line">      <span class="selector-tag">exposure</span>:</span><br><span class="line">        include: '*'</span><br></pre></td></tr></table></figure>

<p>3、在Nacos中添加配置：</p>
<p><img src="https://img-blog.csdnimg.cn/20200526224535896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>3.1、信息如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "resource": "/rateLimit/byUrl",</span><br><span class="line">        "<span class="selector-tag">limitApp</span>": "<span class="selector-tag">default</span>",</span><br><span class="line">        "<span class="selector-tag">grade</span>": 1,</span><br><span class="line">        "<span class="selector-tag">count</span>": 1,</span><br><span class="line">        "<span class="selector-tag">strategy</span>": 0,</span><br><span class="line">        "<span class="selector-tag">controlBehavior</span>": 0,</span><br><span class="line">        "<span class="selector-tag">clusterMode</span>": <span class="selector-tag">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong><em>相关参数解释：</em></strong></p>
<ul>
<li><p>resource：资源名称；</p>
</li>
<li><p>limitApp：来源应用；</p>
</li>
<li><p>grade：阈值类型，0表示线程数，1表示QPS；</p>
</li>
<li><p>count：单机阈值；</p>
</li>
<li><p>strategy：流控模式，0表示直接，1表示关联，2表示链路；</p>
</li>
<li><p>controlBehavior：流控效果，0表示快速失败，1表示Warm Up，2表示排队等待；</p>
</li>
<li><p>clusterMode：是否集群。</p>
</li>
</ul>
<p>发现Sentinel控制台已经有了如下限流规则：</p>
<p><img src="https://img-blog.csdnimg.cn/20200526225356433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>浏览器快速访问 <a href="http://localhost:8401/rateLimit/byUrl" target="_blank" rel="noopener">http://localhost:8401/rateLimit/byUrl</a><br><img src="https://img-blog.csdnimg.cn/20200526225620512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)参考资料链接：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/wiki</a></p>
<h4 id="本章示例使用到的模块"><a href="#本章示例使用到的模块" class="headerlink" title="本章示例使用到的模块"></a>本章示例使用到的模块</h4><p>springcloud-learning<br>├── nacos-orcl-service – 注册到nacos的服务提供者<br>└── sentinel-service – 注册到nacos的sentinel功能测试服务消费者</p>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>Sentinel</tag>
        <tag>限流</tag>
        <tag>熔断</tag>
        <tag>降级</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 应用跨域访问解决方案</title>
    <url>/myblog/spring-boot/SpringBoot-%E5%BA%94%E7%94%A8%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<div id="cnblogs_post_body" class="blogpost-body ">
    <h2 id="一什么是跨域访问">一、什么是跨域访问</h2>
    <a id="more"></a>
<p>说到跨域访问，必须先解释一个名词：同源策略。所谓同源策略就是在浏览器端出于安全考量，向服务端发起请求必须满足：协议相同、Host(ip)相同、端口相同的条件，否则访问将被禁止，该访问也就被称为跨域访问。<br>虽然跨域访问被禁止之后，可以在一定程度上提高了应用的安全性，但也为开发带来了一定的麻烦。比如：我们开发一个前后端分离的易用，页面及js部署在一个主机的nginx服务中，后端接口部署在一个tomcat应用容器中，当前端向后端发起请求的时候一定是不符合同源策略的，也就无法访问。那么我们如何解决这个问题？就是本文需要向大家说明的内容。</p>
<h2 id="二跨域访问的解决方案有哪些">二、跨域访问的解决方案有哪些？</h2>
<h3 id="第一类方案前端解决方案">2.1.第一类方案：前端解决方案</h3>
<p>虽然浏览器对于不符合同源策略的访问是禁止的，但是仍然存在例外的情况，如以下资源引用的标签不受同源策略的限制：</p>

<blockquote>
<ul> <li>html的script标签</li> <li>html的link标签</li> <li>html的img标签</li>
<li>html的iframe标签：对于使用jsp、freemarker开发的项目，这是实现跨域访问最常见的方法，</li>

</ul>
</blockquote>
<p>除了基于HTML本身的特性实现跨域访问，我们还可以使用jsonp、window的postMessage实现跨域访问。这些都是前端实现跨域访问的方式。</p>
<h3 id="第二类方案使用代理">2.2.第二类方案：使用代理</h3>
<p>实际上对跨域访问的支持在服务端实现起来更加容易，最常用的方法就是通过代理的方式，如：</p>

<blockquote>
<ul> <li>nginx代理跨域</li> <li>haproxy代理跨域</li> <li>nodejs中间件代理跨域</li>
</ul>
</blockquote>
<p>其实实现代理跨域的逻辑非常简单，就是在不同的资源服务：js资源、html资源、css资源、接口数据资源服务的前端搭建一个中间层，所有的浏览器及客户端访问都通过代理转发。所以在浏览器、客户端看来，它们访问的都是同一个ip、同一个端口的资源，从而符合同源策略实现跨域访问。</p>
<p><img src="https://img2018.cnblogs.com/blog/1815316/201911/1815316-20191111082300677-447204491.png" alt></p>
<h3 id="第三类方案cors">2.3 第三类方案：CORS</h3>
<p>跨域资源共享（CORS）：通过修改Http协议header的方式，实现跨域。说的简单点就是，通过设置HTTP的响应头信息，告知浏览器哪些情况在不符合同源策略的条件下也可以跨域访问，浏览器通过解析Http协议中的Header执行具体判断。具体的Header如下：</p>
<p><strong>CROS跨域常用header</strong></p>
<ul>
<li>Access-Control-Allow-Origin: 允许哪些ip或域名可以跨域访问</li>
<li>Access-Control-Max-Age: 表示在多少秒之内不需要重复校验该请求的跨域访问权限</li>
<li>Access-Control-Allow-Methods: 表示允许跨域请求的HTTP方法，如：GET,POST,PUT,DELETE</li>
<li>Access-Control-Allow-Headers: 表示访问请求中允许携带哪些Header信息，如：<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Content-Type</code></li>

</ul>
<h2 id="三springboot下实现cors的四种方式">三、SpringBoot下实现CORS的四种方式</h2>
<p>为大家介绍四种实现CORS的方法，两种是全局配置，两种是局部接口生效的配置。一般来说，SpringBoot项目采用其中一种方式实现CORS即可。</p>
<h3 id="使用corsfilter进行全局跨域配置">3.1.使用CorsFilter进行全局跨域配置</h3>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">         CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">         <span class="comment">//开放哪些ip、端口、域名的访问权限，星号表示开放所有域</span></span><br><span class="line">         config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">         <span class="comment">//是否允许发送Cookie信息</span></span><br><span class="line">         config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">         <span class="comment">//开放哪些Http方法，允许跨域访问</span></span><br><span class="line">         config.addAllowedMethod(<span class="string">"GET"</span>,<span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>);</span><br><span class="line">         <span class="comment">//允许HTTP请求中的携带哪些Header信息</span></span><br><span class="line">         config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">         <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">         config.addExposedHeader(<span class="string">"*"</span>);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//添加映射路径，“/**”表示对所有的路径实行全局跨域访问权限的设置</span></span><br><span class="line">         UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">         configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="重写webmvcconfigurer的addcorsmappings方法全局跨域配置">3.2. 重写WebMvcConfigurer的addCorsMappings方法（全局跨域配置）</h3>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                    registry.addMapping(<span class="string">"/**"</span>)    <span class="comment">//添加映射路径，“/**”表示对所有的路径实行全局跨域访问权限的设置</span></span><br><span class="line">                            .allowedOrigins(<span class="string">"*"</span>)    <span class="comment">//开放哪些ip、端口、域名的访问权限</span></span><br><span class="line">                            .allowCredentials(<span class="keyword">true</span>)  <span class="comment">//是否允许发送Cookie信息 </span></span><br><span class="line">                            .allowedMethods(<span class="string">"GET"</span>,<span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>)     <span class="comment">//开放哪些Http方法，允许跨域访问</span></span><br><span class="line">                            .allowedHeaders(<span class="string">"*"</span>)     <span class="comment">//允许HTTP请求中的携带哪些Header信息</span></span><br><span class="line">                            .exposedHeaders(<span class="string">"*"</span>);   <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用crossorigin注解局部跨域配置">3.3.使用CrossOrigin注解（局部跨域配置）</h3>

<blockquote>
<ul>
<li>将CrossOrigin注解加在Controller层的方法上，该方法定义的RequestMapping端点将支持跨域访问</li>
<li>将CrossOrigin注解加在Controller层的类定义处，整个类所有的方法对应的RequestMapping端点都将支持跨域访问</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cors"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://localhost:8080"</span>, maxAge = <span class="number">3600</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cors</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"cors"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者简洁的全局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(DeptController <span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用httpservletresponse设置响应头局部跨域配置">3.4 使用HttpServletResponse设置响应头(局部跨域配置)</h3>

<blockquote>
<p>这种方式不建议在SpringBoot项目中使用,纯粹是找事做</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cors"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cors</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用HttpServletResponse定义HTTP请求头，最原始的方法也是最通用的方法</span></span><br><span class="line">    response.addHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:8080"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"cors"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四实现与测试">四、实现与测试</h2>
<p>在SpringBoot<strong>项目外</strong>随便定义一个web项目，发送一个web请求，具体技术可以使用jquery的ajax、fetch、axios等。以下是以Jquery封装的ajax为例请求验证的核心代码：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">     url: <span class="string">'http://localhost:8090/cors'</span>,</span><br><span class="line">     type: <span class="string">"POST"</span>,</span><br><span class="line">     xhrFields: &#123;</span><br><span class="line">        withCredentials: <span class="keyword">true</span>    <span class="comment">//允许发送Cookie信息</span></span><br><span class="line">     &#125;,</span><br><span class="line">     success: function (data) &#123;</span><br><span class="line">         alert(<span class="string">"跨域请求配置成功"</span>)</span><br><span class="line">     &#125;,</span><br><span class="line">     error: function (data) &#123;</span><br><span class="line">         alert(<span class="string">"跨域请求配置失败"</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>测试可以发现：<br>在没有进行跨域请求时会出现网络请求200,同时能查看到数据：<br><img src="https://img-blog.csdnimg.cn/20200419154311331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">控制台有错误信息：<br><img src="https://img-blog.csdnimg.cn/20200419154408906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">)设置好跨域请求后，控制台不报错同时页面也能正确加载出信息：<img src="https://img-blog.csdnimg.cn/20200419154951283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>本文转载自<a href="https://www.cnblogs.com/zimug/p/11832737.html" target="_blank" rel="noopener">https://www.cnblogs.com/zimug/p/11832737.html</a>并调整</li>
</ul></div>]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.0集成Shiro（二）</title>
    <url>/myblog/spring-boot/SpringBoot2-0%E9%9B%86%E6%88%90Shir%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>Shiro这个Java安全框架我一直都想学会怎么去使用，但每次依照着别人的博客尝试把它配置到自己的项目中，总是出现各种问题，导致一直没有成功。经过不懈努力，这一次终于成功了！从零搭建整个项目，并通过一个简单的用户登录功能来进行说明！</p>
<a id="more"></a>
<p><strong>源码github地址</strong>：<a href="https://github.com/Rhine404/shirodemo" target="_blank" rel="noopener">https://github.com/Rhine404/shirodemo</a></p>
<h2><a name="t2"></a><a name="t2"></a><a id="1__7"></a>1 简介</h2>
<p>推荐阅读<a href="https://www.infoq.com/articles/apache-shiro" target="_blank" rel="nofollow noopener">官方文档</a>去认识Shiro，虽然不是中文的，但绝对是比看各种博客里重复度高、零零散散的资料好。</p>
<p>官方的简介如下：</p>
<blockquote>
<p><strong>Apache Shiro™</strong> is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p>
</blockquote>
<p>Shiro是一款强大易用的Java安全框架，主要功能是进行认证、授权、加密、会话管理等。与Spring Security相比的话，Shiro是会更加轻量。</p>
<h2><a name="t3"></a><a name="t3"></a><a id="2__17"></a>2 环境搭建</h2>
<h3><a name="t4"></a><a name="t4"></a><a id="21__19"></a>2.1 开发环境</h3>
<ul>
<li>
<p>IDEA或者eclipse</p>
</li>
<li>
<p>HTML/CSS/JavaScript + FreeMarker</p>
</li>
<li>
<p>JDK8 + Maven + Spring Boot + Shiro</p>
</li>
<li>
<p>druid + mybatis + Navicat或者SQLyog + MySQL5.X</p>
</li>
</ul>
<p>这里需要你有预备知识：</p>
<ul>
<li>
<p>熟练使用IDEA或eclipse</p>
</li>
<li>
<p>了解Maven，知道如何配置settings.xml与maven仓库</p>
</li>
<li>
<p>了解Spring Boot，并会使用它搭建Web项目</p>
</li>
<li>
<p>了解FreeMarker/thymeleaf、yaml语法</p>
</li>
</ul>
<p>虽然都是通过Maven构建项目，不过Spring Boot不再使用.xml文件对项目进行配置，所以Shiro的配置类ShiroConfig不太容易理解，对于刚开始接触Spring Boot的同学来说这是一个难点。</p>
<h3><a name="t5"></a><a name="t5"></a><a id="22__38"></a>2.2 创建项目</h3>
<p>这里使用IDEA通过Spring Initializr创建项目（当然也可以通过Maven自己添加所有依赖）。<br>
<img src="https://img-blog.csdnimg.cn/20181211180430453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODAyNDE2,size_16,color_FFFFFF,t_70" alt="选择依赖" width="700"><br>
我们下面要通过这个项目来搭建一个简单的用户系统，系统有两类用户——普通用户和VIP用户，通过shiro来完成登录、登出、权限验证功能，主要在于展示前后端的交互、后端与数据库的交互。</p>
<h3><a name="t6"></a><a name="t6"></a><a id="23__44"></a>2.3 项目文件结构</h3>
<p><img src="https://img-blog.csdnimg.cn/20181211180458263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODAyNDE2,size_16,color_FFFFFF,t_70" alt="项目结构"><br>
<img src="https://img-blog.csdnimg.cn/2018121118051235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODAyNDE2,size_16,color_FFFFFF,t_70" alt="项目结构2"></p>
<h3><a name="t7"></a><a name="t7"></a><a id="24_pomxml_47"></a>2.4 pom.xml</h3>
<p>新建的项目还需要再手动增加三个依赖项：druid数据库连接池，shiro依赖，log4j依赖</p>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.rhine.blog&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shirodemo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;name&gt;shirodemo&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Spring Boot with Shiro&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Shiro --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- log4j --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>




<h3><a name="t8"></a><a name="t8"></a><a id="25_applicationyml_135"></a>2.5 application.yml</h3>
<p>druid的配置会稍微多些，所以也附上了详细的注释，属性和值之间必须要有":"号。</p>
<pre class="prettyprint"><code class="prism language-yaml has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/lastpass<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;useJDBCCompliantTimezoneShift</span>=true<span class="token important">&amp;useLegacyDatetimeCode</span>=false<span class="token important">&amp;serverTimezone</span>=UTC
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> abc123456
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token comment"># 初始化时建立物理连接连接的个数</span>
        <span class="token key atrule">initialSize</span><span class="token punctuation">:</span> <span class="token number">5</span>
        <span class="token comment"># 最小连接池数量</span>
        <span class="token key atrule">minIdle</span><span class="token punctuation">:</span> <span class="token number">5</span>
        <span class="token comment"># 最大连接池数量</span>
        <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">20</span>
        <span class="token comment"># 获取连接时最大等待时间(ms)，即60s</span>
        <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>
        <span class="token comment"># 1.Destroy线程会检测连接的间隔时间；2.testWhileIdle的判断依据</span>
        <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>
        <span class="token comment"># 最小生存时间ms</span>
        <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">600000</span>
        <span class="token key atrule"># maxEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">900000</span>
        <span class="token comment"># 用来检测连接是否有效的sql</span>
        <span class="token key atrule">validationQuery</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL
        <span class="token comment"># 申请连接时执行validationQuery检测连接是否有效，启用会降低性能</span>
        <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
        <span class="token comment"># 归还连接时执行validationQuery检测连接是否有效，启用会降低性能</span>
        <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
        <span class="token comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，</span>
        <span class="token comment"># 执行validationQuery检测连接是否有效，不会降低性能</span>
        <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token comment"># 是否缓存preparedStatement，mysql建议关闭</span>
        <span class="token key atrule">poolPreparedStatements</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
        <span class="token comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span>
        <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall<span class="token punctuation">,</span>log4j
    <span class="token key atrule">freemarker</span><span class="token punctuation">:</span>
        <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .html
        <span class="token key atrule">charset</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>
    <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
        <span class="token comment"># 配置静态资源映射路径，/public、/resources路径失效</span>
        <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /static/**
<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mappers/*.xml
    <span class="token comment"># 虽然可以配置这项来进行pojo包扫描，但其实我更倾向于在mapper.xml写全类名</span>
    <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.rhine.blog.po

<h2><a name="t9"></a><a name="t9"></a><a id="3__185"></a>3 数据库</h2>
<p>因为我们不仅仅要使用Shiro来进行认证，还要进行授权、加密等操作，所以我们要建立用户表以及权限管理表。</p>
<h3><a name="t10"></a><a name="t10"></a><a id="31__189"></a>3.1 数据库设计</h3>
<p>数据库有用户（user）、角色（role）、权限（permission）三个实体，除了实体表以外，为了实现表间用户与角色、角色与权限多对多的表间关系，所以产生了user_role、role_permission两张关系表。在下图中，使用红线将表的外键标记了出来，但为了方便并没有在表中创建外键，我们手动进行维护。<br>
<img src="https://img-blog.csdnimg.cn/20181211180530621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODAyNDE2,size_16,color_FFFFFF,t_70" alt="表间关系" width="700"></p>
<h3><a name="t11"></a><a name="t11"></a><a id="32__193"></a>3.2 数据库字段</h3>
<p>再简单介绍下数据库字段，user表中name是用户名，password是密码；role表中name是角色名（如user、vip）；permission表中，name是权限名（如会员中心），url是实际的权限字段（user:vip）</p>
<h2><a name="t12"></a><a name="t12"></a><a id="4__197"></a>4 类</h2>
<h3><a name="t13"></a><a name="t13"></a><a id="41_po_199"></a>4.1 po</h3>
<p><strong>Userbean.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.po;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;RoleBean&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 省略setter、getter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>RoleBean.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.po;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;PermissionBean&gt; permissions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略setter、getter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>PermissionBean.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.po;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略setter、getter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3><a name="t14"></a><a name="t14"></a><a id="42_mapper_250"></a>4.2 mapper</h3>
<p><strong>UserMapper.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户信息</span></span><br><span class="line">    <span class="function">UserBean <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">   	<span class="comment">// 查询用户信息、角色、权限</span></span><br><span class="line">    <span class="function">UserBean <span class="title">findById</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>UserMapper.xml</strong></p>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.rhine.blog.mapper.UserMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">"userMap"</span> type=<span class="string">"UserBean"</span>&gt;</span><br><span class="line">        &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"name"</span> column=<span class="string">"name"</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">"password"</span> column=<span class="string">"password"</span>/&gt;</span><br><span class="line">        &lt;collection property=<span class="string">"roles"</span> ofType=<span class="string">"RoleBean"</span>&gt;</span><br><span class="line">            &lt;id property=<span class="string">"id"</span> column=<span class="string">"roleId"</span>/&gt;</span><br><span class="line">            &lt;result property=<span class="string">"name"</span> column=<span class="string">"roleName"</span>/&gt;</span><br><span class="line">            &lt;collection property=<span class="string">"permissions"</span> ofType=<span class="string">"PermissionBean"</span>&gt;</span><br><span class="line">                &lt;id property=<span class="string">"id"</span> column=<span class="string">"permissionId"</span>/&gt;</span><br><span class="line">                &lt;result property=<span class="string">"name"</span> column=<span class="string">"permissionName"</span>/&gt;</span><br><span class="line">                &lt;result property=<span class="string">"url"</span> column=<span class="string">"permissionUrl"</span>/&gt;</span><br><span class="line">            &lt;/collection&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findByName"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"UserBean"</span>&gt;</span><br><span class="line">      SELECT id, name, password</span><br><span class="line">        FROM user</span><br><span class="line">          WHERE NAME = #&#123;name&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findById"</span> parameterType=<span class="string">"String"</span> resultMap=<span class="string">"userMap"</span>&gt;</span><br><span class="line">      SELECT user.id, user.name, user.password,</span><br><span class="line">			role.id as roleId, role.name as roleName,</span><br><span class="line">			permission.id as permissionId, </span><br><span class="line">            permission.name as permissionName, </span><br><span class="line">            permission.url as permissionUrl</span><br><span class="line">        FROM user, user_role, role, role_permission, permission</span><br><span class="line">          WHERE user.id = #&#123;id&#125;</span><br><span class="line">            AND user.id = user_role.user_id</span><br><span class="line">            AND user_role.role_id = role.id</span><br><span class="line">            AND role.id = role_permission.role_id</span><br><span class="line">            AND role_permission.permission_id = permission.id</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>


<p>因为在application.yml中配置了 type-aliases-package: com.rhine.blog.po，所以resultType可以不用写全类名。添加新的查询时，一定要区分清楚resultMap和resultType，否则出错不容易发现。</p>
<h3><a name="t15"></a><a name="t15"></a><a id="43_config_313"></a>4.3 config</h3>
<p><strong>DruidConfig.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.config;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod=<span class="string">"close"</span>, initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  配置监控服务器</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">            <span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// druid后台管理员用户</span></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">// 是否能够重置数据</span></span><br><span class="line">        initParams.put(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  配置web监控的过滤器</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(</span><br><span class="line">            <span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        <span class="comment">// 添加过滤规则</span></span><br><span class="line">        bean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 忽略过滤格式</span></span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,*.icon,*.png,*.jpg,/druid/*"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ShiroConfig.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.config;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"hashedCredentialsMatcher"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = </span><br><span class="line">            <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">//指定加密方式为MD5</span></span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">        <span class="comment">//加密次数</span></span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        credentialsMatcher.setStoredCredentialsHexEncoded(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> credentialsMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"userRealm"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">(@Qualifier(<span class="string">"hashedCredentialsMatcher"</span>)</span> </span></span><br><span class="line"><span class="function">                               HashedCredentialsMatcher matcher) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        UserRealm userRealm = <span class="keyword">new</span> UserRealm();</span><br><span class="line">        userRealm.setCredentialsMatcher(matcher);</span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(@Qualifier(<span class="string">"securityManager"</span>)</span></span></span><br><span class="line"><span class="function">                               DefaultWebSecurityManager securityManager) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">// 设置 SecurityManager</span></span><br><span class="line">        bean.setSecurityManager(securityManager);</span><br><span class="line">		<span class="comment">// 设置登录成功跳转Url</span></span><br><span class="line">        bean.setSuccessUrl(<span class="string">"/main"</span>);</span><br><span class="line">        <span class="comment">// 设置登录跳转Url</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/toLogin"</span>);</span><br><span class="line">        <span class="comment">// 设置未授权提示Url</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/error/unAuth"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * anon：匿名用户可访问</span></span><br><span class="line"><span class="comment">         * authc：认证用户可访问</span></span><br><span class="line"><span class="comment">         * user：使用rememberMe可访问</span></span><br><span class="line"><span class="comment">         * perms：对应权限可访问</span></span><br><span class="line"><span class="comment">         * role：对应角色权限可访问</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">"/login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/user/index"</span>,<span class="string">"authc"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/vip/index"</span>,<span class="string">"roles[vip]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/druid/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/static/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">"/**"</span>,<span class="string">"authc"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 securityManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        HashedCredentialsMatcher hashedCredentialsMatcher)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        DefaultWebSecurityManager securityManager = </span><br><span class="line">            <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">// 关联realm.</span></span><br><span class="line">        securityManager.setRealm(userRealm(hashedCredentialsMatcher));</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3><a name="t16"></a><a name="t16"></a><a id="44_realm_449"></a>4.4 realm</h3>
<h3>UserRealm.java</h3>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.realm;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm，实现授权与认证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户授权</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"===执行授权==="</span>);</span><br><span class="line"></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UserBean user = (UserBean)subject.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">            <span class="comment">// 角色与权限字符串集合</span></span><br><span class="line">            Collection&lt;String&gt; rolesCollection = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            Collection&lt;String&gt; premissionCollection = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">			<span class="comment">// 读取并赋值用户角色与权限</span></span><br><span class="line">            Set&lt;RoleBean&gt; roles = user.getRole();</span><br><span class="line">            <span class="keyword">for</span>(RoleBean role : roles)&#123;</span><br><span class="line">                rolesCollection.add(role.getName());</span><br><span class="line">                Set&lt;PermissionBean&gt; permissions = role.getPermissions();</span><br><span class="line">                <span class="keyword">for</span> (PermissionBean permission : permissions)&#123;</span><br><span class="line">                    premissionCollection.add(permission.getUrl());</span><br><span class="line">                &#125;</span><br><span class="line">                info.addStringPermissions(premissionCollection);</span><br><span class="line">            &#125;</span><br><span class="line">            info.addRoles(rolesCollection);</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户认证</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"===执行认证==="</span>);</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken)authenticationToken;</span><br><span class="line">        UserBean bean = userService.findByName(token.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(bean == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ByteSource credentialsSalt = ByteSource.Util.bytes(bean.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(bean, bean.getPassword(),</span><br><span class="line">                credentialsSalt, getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟Shiro用户加密，假设用户密码为123456</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 用户名</span></span><br><span class="line">        String username = <span class="string">"rhine"</span>;</span><br><span class="line">        <span class="comment">// 用户密码</span></span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line">        <span class="comment">// 加密方式</span></span><br><span class="line">        String hashAlgorithName = <span class="string">"MD5"</span>;</span><br><span class="line">        <span class="comment">// 加密次数</span></span><br><span class="line">        <span class="keyword">int</span> hashIterations = <span class="number">1024</span>;</span><br><span class="line">        ByteSource credentialsSalt = ByteSource.Util.bytes(username);</span><br><span class="line">        Object obj = <span class="keyword">new</span> SimpleHash(hashAlgorithName, password, </span><br><span class="line">                                    credentialsSalt, hashIterations);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><a name="t17"></a><a name="t17"></a><a id="45_service_536"></a>4.5 service</h3>
<p><strong>UserService.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.service;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserService抽象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">UserBean <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3>接口实现</h3>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserBean <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 查询用户是否存在</span></span><br><span class="line">		UserBean bean = userMapper.findByName(name);</span><br><span class="line">		<span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// 查询用户信息、角色、权限</span></span><br><span class="line">			bean = userMapper.findById(bean.getId());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><a name="t18"></a><a name="t18"></a><a id="46_controller_577"></a>4.6 controller</h3>
<p><strong>MainController.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录、登出、错误页面跳转控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/main"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">"root"</span>, request.getContextPath());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">"root"</span>, request.getContextPath());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setHeader(<span class="string">"root"</span>, request.getContextPath());</span><br><span class="line">        String userName = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取Subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 2.封装用户数据</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(userName, password);</span><br><span class="line">        <span class="comment">// 3.执行登录方法</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/main"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"用户名不存在！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"密码错误！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">if</span> (subject != <span class="keyword">null</span>) &#123;</span><br><span class="line">            subject.logout();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/main"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/error/unAuth"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">unAuth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error/unAuth"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>UserController.java</strong></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rhine.blog.controller;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户页面跳转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 	 * 个人中心，需认证可访问</span></span><br><span class="line"><span class="comment"> 	 */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        UserBean bean = (UserBean) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line">        request.setAttribute(<span class="string">"userName"</span>, bean.getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/user/index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 	 * 会员中心，需认证且角色为vip可访问</span></span><br><span class="line"><span class="comment"> 	 */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/vip/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/vip/index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><a name="t19"></a><a name="t19"></a><a id="5__672"></a>5 页面</h2>
<p><strong>login.html——登录页面</strong></p>
<pre class="prettyprint"><code class="prism language-html has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>用户登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>from<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${root!}/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入账户名<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${msg!}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

<p><strong>index.html——首页</strong></p>
<pre class="prettyprint"><code class="prism language-html has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user/index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip/index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>会员中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

<p><strong>/user/index.html——用户中心</strong></p>
<pre class="prettyprint"><code class="prism language-html has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>用户中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>用户中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>欢迎${userName!},这里是用户中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

<p><strong>/vip/index.html——会员中心</strong></p>
<pre class="prettyprint"><code class="prism language-html has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>会员中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>会员中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>欢迎来到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>会员中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

<p><strong>/error/unAuth.html——未授权提示页面</strong></p>
<pre class="prettyprint"><code class="prism language-html has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>未授权提示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>您还不是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>会员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>，没有权限访问这个页面！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

<h2><a name="t20"></a><a name="t20"></a><a id="6__783"></a>6 测试运行</h2>
<h3><a name="t21"></a><a name="t21"></a><a id="61__785"></a>6.1 普通用户登录</h3>
<p><img src="https://img-blog.csdnimg.cn/20181211180559596.gif" alt="普通会员登录" width="600"></p>
<h3><a name="t22"></a><a name="t22"></a><a id="62__787"></a>6.2 会员用户登录</h3>
<p><img src="https://img-blog.csdnimg.cn/20181211180613541.gif" alt="会员用户登录" width="600"></p>
原创 我是你妹她哥


<p>原文链接：<a href="https://blog.csdn.net/bicheng4769/article/details/86668209" target="_blank" rel="noopener">https://blog.csdn.net/bicheng4769/article/details/86668209</a></p>
</code></pre></code></pre></code></pre></code></pre></code></pre></code></pre>]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>boot Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome</title>
    <url>/myblog/uncategorized/Welcome/</url>
    <content><![CDATA[<img src="http://chfsun.gitee.io/cdn/bg_music.jpg">
<a id="more"></a>]]></content>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/myblog/tool/it%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p>1、初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>2、添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>3、备注</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">'add'</span></span><br></pre></td></tr></table></figure>
<p>4、推送到仓库,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS:此处是推送到master分支下</p>
</blockquote>
<h2 id="创建分支并切换"><a href="#创建分支并切换" class="headerlink" title="创建分支并切换"></a>创建分支并切换</h2><p>1）新建分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">git branch <span class="title">xxx</span> <span class="params">(xxx填写你的分支名称)</span></span></span><br></pre></td></tr></table></figure>
<p>2）查看所有分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p>3）切换到某一分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">git checkout <span class="title">xxx</span> <span class="params">(xxx填写要切换的分支名称）</span></span></span><br></pre></td></tr></table></figure>
<p>4）添加修改代码到缓存（注意最后的”.”前面有个空格</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p>5）添加提交代码的备注</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"xxx"</span> （xxx为本次提交代码的备注）</span><br></pre></td></tr></table></figure>
<p>6）提交代码到指定分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git push origin xxx （xxx为要提交代码的分支名称）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka入门及spring boot下简单整合</title>
    <url>/myblog/spring-boot/kafka%E5%85%A5%E9%97%A8%E5%8F%8Aspring-boot%E4%B8%8B%E7%AE%80%E5%8D%95%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h2 id="win10下安装kafka"><a href="#win10下安装kafka" class="headerlink" title="win10下安装kafka"></a>win10下安装kafka</h2><p>注：kafka依赖于zookeeper，官网下载的kafka内置了zookeeper依赖。</p>
<h3>1. 下载Kafka</h3>
网址：http://kafka.apache.org/
<a id="more"></a>
<br>
<p>解压缩：<br>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC0zYzQ3M2MwNDc1MmFmZWZkLnBuZw?x-oss-process=image/format,png" alt><br>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC1jMWQ1Mzk2ZWNhMGM1N2RjLnBuZw?x-oss-process=image/format,png" alt></p>
<h3><a name="t1"></a><a name="t1"></a><a id="2__8"></a>2. 修改配置文件</h3>
<p>进入到config目录，修改service.properties：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC0zNWZhZjQ5YWVmNjUzODQyLnBuZw?x-oss-process=image/format,png" alt>
broker.id设置：https://cloud.tencent.com/developer/news/378568

<br>
更改为自行创建的文件夹
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC1hNGY2ZTNiMmU1ZGYyNzk2LnBuZw?x-oss-process=image/format,png" alt></p>
<h3><a name="t2"></a><a name="t2"></a><a id="3__15"></a>3. 进行单机实例测试简单使用</h3>
<h5><a name="t3"></a><a name="t3"></a><a id="1_kafkazookeeper_17"></a>(1) 启动kafka内置的zookeeper</h5>
<p>运行cmd命令：<br>
.\bin\windows\zookeeper-server-start.bat  .\config\zookeeper.properties</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC0yNmU3ODc0NzQ0NTllMWVmLnBuZw?x-oss-process=image/format,png" alt="启动kafka内置zookeeper"></p>
<p>不关闭当前窗口。</p>
<h5><a name="t4"></a><a name="t4"></a><a id="2_kafka_26"></a>(2) 启动kafka服务</h5>
<p>运行cmd命令：<br>
.\bin\windows\kafka-server-start.bat .\config\server.properties</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC0xM2FjYWRiMDdmZGRiYTAzLnBuZw?x-oss-process=image/format,png" alt="启动kafka服务"></p>
<p>不关闭当前窗口。</p>
<h5><a name="t5"></a><a name="t5"></a><a id="3_test1topickafka_35"></a>(3) 创建一个名为test1的topic测试主题kafka</h5>
<p>运行cmd命令：<br>
.\bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test1</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC02ZTVlMmIxYzZjMTNiY2JjLnBuZw?x-oss-process=image/format,png" alt="创建kafka测试主题test1"></p>
<p>该窗口可关闭。</p>
<h5><a name="t6"></a><a name="t6"></a><a id="4__44"></a>(4) 创建消息生产者生产消息</h5>
<p>运行cmd命令：<br>
.\bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic test1</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC1hMWI0MmQ2N2UwNTg5MmRiLnBuZw?x-oss-process=image/format,png" alt="创建消息生产者"></p>
<p>不关闭当前窗口。</p>
<h5><a name="t7"></a><a name="t7"></a><a id="5__53"></a>(5) 创建消息消费者接收消息</h5>
<p>运行cmd命令：<br>
.\bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test1 --from-beginning</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC04NTM1MzZjNmYwNzRmZWY5LnBuZw?x-oss-process=image/format,png" alt="创建消息消费者"></p>
<p>不关闭当前窗口。</p>
<h5><a name="t8"></a><a name="t8"></a><a id="6__62"></a>(6) 测试消息发送和接收</h5>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNTEwODI5OC1kNmZkMjUyOTBiNzFkMmZlLnBuZw?x-oss-process=image/format,png" alt="测试"></p>
<p>测试成功。</p>
<br>
## 常用命令：

<h3>删除topic：</h3>

<p>彻底删除Kafka中的topic</p>
<p>1、删除kafka存储目录（server.properties文件log.dirs配置，默认为”/tmp/kafka-logs”）相关topic目录</p>
<p>2、Kafka 删除topic的命令是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kafka-topics  --delete --zookeeper 【zookeeper server】  --topic 【topic name】</span><br></pre></td></tr></table></figure>

<p>   如果kafaka启动时加载的配置文件中server.properties没有配置delete.topic.enable=true，那么此时的删除并不是真正的删除，而是把topic标记为：marked for deletion</p>
<p>   你可以通过命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\bin\windows\kafka-topics.bat --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>

<p>   来查看所有topic</p>
<p>   此时你若想真正删除它，可以如下操作：</p>
<pre><code>（1）登录zookeeper客户端：命令：./bin/zookeeper-client

（2）找到topic所在的目录：ls /brokers/topics

（3）找到要删除的topic，执行命令：rmr /brokers/topics/【topic name】即可，此时topic被彻底删除。</code></pre><p>   另外被标记为marked for deletion的topic你可以在zookeeper客户端中通过命令获得：ls /admin/delete_topics/【topic name】，</p>
<p>   如果你删除了此处的topic，那么marked for deletion 标记消失</p>
<p>   zookeeper 的config中也有有关topic的信息： ls /config/topics/【topic name】暂时不知道有什么用</p>
<h3>总结：</h3>

<p>彻底删除topic：</p>
<p> 1、删除kafka存储目录（server.properties文件log.dirs配置，默认为”/tmp/kafka-logs”）相关topic目录</p>
<p> 2、如果配置了delete.topic.enable=true直接通过命令删除，如果命令删除不掉，直接通过zookeeper-client 删除掉broker下的topic即可。<br><br></p>
<h2 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h2><ul>
<li>kafka是伪集群，因为虚拟机有限，zookeeper也是集群</li>
</ul>
<ul>
<li>dubbo是微服务，微小的服务，如果并发量不是太高，上千万，上亿级别的或者想要返回结果的可以用dubbo</li>
</ul>
<ul>
<li>kafka是消息队列，如果想提高吞吐量，不要返回结果(返回结果可以放在redis里)就可以用它</li>
</ul>
<ul>
<li>不过上面的两种一般都有，当进行服务降级或者服务熔断时消息队列就大有用处</li>
</ul>
<p>Kafka是一个分布式的消息存储系统,提供了四大核心接口：</p>
<blockquote>
<p>1.Producer API允许了应用可以向Kafka中的topics发布消息；<br>2.Consumer API允许了应用可以订阅Kafka中的topics,并消费消息；<br>3.Streams API允许应用可以作为消息流的处理者，比如可以从topicA中消费消息，处理的结果发布到topicB中；<br>4.Connector API提供Kafka与现有的应用或系统适配功能，比如与数据库连接器可以捕获表结构的变化；</p>
</blockquote>
<br>

<blockquote>
<p>Topic —&gt; 每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic. Producer —&gt; 负责发布消息到Kafka<br>broker. Consumer —&gt; 消息消费者，向Kafka broker读取消息的客户端.<br><br></p>
</blockquote>
<p>更多请查看官网：<a href="http://kafka.apachecn.org/" target="_blank" rel="noopener">http://kafka.apachecn.org/</a></p>
<h2 id="spring-boot整合kafka"><a href="#spring-boot整合kafka" class="headerlink" title="spring boot整合kafka"></a>spring boot整合kafka</h2><p><em>PS:当前demo是基于注解实现</em></p>
<p>1、请保持zookeeper、kafka服务启动中</p>
<p>2、eclipse中新建项目<br><img src="https://img-blog.csdnimg.cn/20200425093407252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">3、pom文件如下：</p>
<pre><code> &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;
    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><p>4、配置文件application.yml如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 127.0.0.1:9092 #指定kafka server的地址，集群配多个，中间，逗号隔开</span><br><span class="line">    producer:</span><br><span class="line">      key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">      value-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: default_consumer_group #群组ID</span><br><span class="line">      enable-auto-commit: <span class="keyword">true</span></span><br><span class="line">      auto-commit-interval: <span class="number">1000</span></span><br><span class="line">      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8500</span></span><br></pre></td></tr></table></figure>

<p>5、项目结构<br><img src="https://img-blog.csdnimg.cn/20200425093823667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">6、生产者代码参考：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"message/send"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">		kafkaTemplate.send(<span class="string">"test1"</span>, msg); <span class="comment">// 使用kafka模板发送信息</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、消费者代码参考：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听服务器上的kafka是否有相关的消息发过来</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DELL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义此消费者接收topics = "test1"的消息，与controller中的topic对应上即可</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> record 变量代表消息本身，可以通过ConsumerRecord&lt;?,?&gt;类型的record变量来打印接收的消息的各种信息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@KafkaListener</span>(topics = <span class="string">"test1"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ConsumerRecord&lt;?, ?&gt; record)</span> </span>&#123;</span><br><span class="line">		System.out.printf(<span class="string">"topic is %s, offset is %d, value is %s \n"</span>, record.topic(), record.offset(), record.value());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8、启动项目，页面访问生产者方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8500/message/send?msg=<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>9、查看控制台能看到消费者信息<br><img src="https://img-blog.csdnimg.cn/20200425094817918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">查看cmd窗口信息：<br><img src="https://img-blog.csdnimg.cn/20200425094916450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Spring-Boot项目整合ELK、Kafka"><a href="#Spring-Boot项目整合ELK、Kafka" class="headerlink" title="Spring Boot项目整合ELK、Kafka"></a>Spring Boot项目整合ELK、Kafka</h2><p>使用Spring Boot整合log4j，配合ELK（Elasticsearch , Logstash, Kibana）整合Kafka完成日志收集，应用场景比较多的是分布式项目，这样可以直接收集各个节点的日志到一起，便于错误日志查看和分析业务。</p>
<p>整个流程如下：</p>
<p>使用log4j的appender发送数据到kafka到topic，topic再发送到logstash，然后经过elasticsearch分析处理后到kibana页面做查询展示。</p>
<p>环境准备：</p>
<p>1、安装ELK</p>
<p>2、安装kafka</p>
<p>3、Spring Boot项目搭建</p>
<p>简要步骤：</p>
<p>①、修改logj配置文件</p>
<p>②、加入日志打印代码</p>
<p>③、启动项目访问页面</p>
<p>④、使用kafka查看消费者打印</p>
<p>⑤、使用kibana建立日志索引</p>
<p>⑥、使用kibana查询日志、es语法查询</p>
<p>参考1：<a href="https://blog.csdn.net/w7239/article/details/104265601" target="_blank" rel="noopener">https://blog.csdn.net/w7239/article/details/104265601</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>boot kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch-6.2.2 + kibana-6.2.2-windows-x86_64安装配置</title>
    <url>/myblog/tool/lasticsearch-6-2-2-kibana-6-2-2-windows-x86-64%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一、使用版本"><a href="#一、使用版本" class="headerlink" title="一、使用版本"></a>一、使用版本</h2><p>es和kibana的版本都是6.2.2</p>
<pre><code>elasticsearch-6.2.2 + kibana-6.2.2-windows-x86_64</code></pre><a id="more"></a>
<h2 id="二、es配置"><a href="#二、es配置" class="headerlink" title="二、es配置"></a>二、es配置</h2><p>1、先安装es，下载下来解压， config目录下修改  elasticsearch.yml 配置文件</p>
<pre><code>#把以下配置的注释放开，并修改成自己想要的配置

cluster.name: es_cluster

node.name: node-1

path.data: F:\MYDATA\elasticsearch-6.2.2\\data

path.logs: F:\MYDATA\elasticsearch-6.2.2\\logs

network.host: 0.0.0.0

http.port: 9200</code></pre><p>2、保存修改，去bin目录下，运行  elasticsearch.bat 后，cmd窗口无异常，可进行下一步</p>
<p>3、浏览器访问 <a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200/</a>   ，能看到以下信息则搭建正常</p>
<pre><code>    {

  &quot;name&quot; : &quot;node-1&quot;,
  &quot;cluster_name&quot; : &quot;es_cluster&quot;,
  &quot;cluster_uuid&quot; : &quot;fzx_I1tuSy2r9vzPZOVfVQ&quot;,
  &quot;version&quot; : {
    &quot;number&quot; : &quot;6.2.4&quot;,
    &quot;build_hash&quot; : &quot;ccec39f&quot;,
    &quot;build_date&quot; : &quot;2018-04-12T20:37:28.497551Z&quot;,
    &quot;build_snapshot&quot; : false,
    &quot;lucene_version&quot; : &quot;7.2.1&quot;,
    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,
    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;
  },
  &quot;tagline&quot; : &quot;You Know, for Search&quot;
}</code></pre><h2 id="三、kibana配置"><a href="#三、kibana配置" class="headerlink" title="三、kibana配置"></a>三、kibana配置</h2><p>1、安装kibana，解压包，进到config，修改kibana.yml文件</p>
<pre><code>server.port: 5601

server.host: &quot;localhost&quot;

elasticsearch.url: &quot;http://localhost:9200&quot;

kibana.index: &quot;.kibana&quot;</code></pre><p>2、进到bin目录，运行   kibana.bat 后，cmd窗口无异常，可进行下一步</p>
<p>3、进浏览器访问   <a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a>  能打开则配置正常</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>cloud</tag>
        <tag>es</tag>
        <tag>kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot 使用Nginx及其基本概念、安装、配置</title>
    <url>/myblog/spring-boot/spring-boot-%E4%BD%BF%E7%94%A8Nginx%E5%8F%8A%E5%85%B6%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E3%80%81%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<div class="item-wrap"><div class="article is-firefox" id="article" data-islow-browser="0"><div class="article-content"><p><span class="bjh-p">想必大家一定听说过 Nginx，若没听说过它，那么一定听过它的"同行"Apache 吧！</span></p><p><span class="bjh-p">

<h2 id="Nginx-的产生"><a href="#Nginx-的产生" class="headerlink" title="Nginx 的产生"></a>Nginx 的产生</h2><a id="more"></a>
<p></p></span></p><p><span class="bjh-p">Nginx 同 Apache 一样都是一种 Web 服务器。基于 REST 架构风格，以统一资源描述符（Uniform Resources Identifier）URI 或者统一资源定位符（Uniform Resources Locator）URL 作为沟通依据，通过 HTTP 协议提供各种网络服务。</span></p><p><span class="bjh-p">然而，这些服务器在设计之初受到当时环境的局限，例如当时的用户规模，网络带宽，产品特点等局限并且各自的定位和发展都不尽相同。这也使得各个 Web 服务器有着各自鲜明的特点。</span></p><p><span class="bjh-p">Apache 的发展时期很长，而且是毫无争议的世界第一大服务器。它有着很多优点：稳定、开源、跨平台等等。</span></p><p><span class="bjh-p">它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个重量级的。</span></p><p><span class="bjh-p">它不支持高并发的服务器。在 Apache 上运行数以万计的并发访问，会导致服务器消耗大量内存。</span></p><p><span class="bjh-p">操作系统对其进行进程或线程间的切换也消耗了大量的 CPU 资源，导致 HTTP 请求的平均响应速度降低。</span></p><p><span class="bjh-p">这些都决定了 Apache 不可能成为高性能 Web 服务器，轻量级高并发服务器 Nginx 就应运而生了。</span></p><p><span class="bjh-p">俄罗斯的工程师 Igor Sysoev，他在为 Rambler Media 工作期间，使用 C 语言开发了 Nginx。</span></p><p><span class="bjh-p">Nginx 作为 Web 服务器一直为 Rambler Media 提供出色而又稳定的服务。然后呢，Igor Sysoev 将 Nginx 代码开源，并且赋予自由软件许可证。</span></p><p><span class="bjh-h3">由于以下这几点，所以，Nginx 火了：</span></p><p><span class="bjh-p">Nginx 使用基于事件驱动架构，使得其可以支持数以百万级别的 TCP 连接。高度的模块化和自由软件许可证使得第三方模块层出不穷（这是个开源的时代啊）。Nginx 是一个跨平台服务器，可以运行在 Linux、Windows、FreeBSD、Solaris、AIX、Mac OS 等操作系统上。这些优秀的设计带来的极大的稳定性。</span></p><p><span class="bjh-p">Nginx 的用武之地</span></p><p><span class="bjh-p">Nginx 是一款自由的、开源的、高性能的 HTTP 服务器和反向代理服务器；同时也是一个 IMAP、POP3、SMTP 代理服务器。</span></p><p><span class="bjh-p">Nginx 可以作为一个 HTTP 服务器进行网站的发布处理，另外 Nginx 可以作为反向代理进行负载均衡的实现。</span></p><p><span class="bjh-h3"></span></p>
<h2 id="关于代理"><a href="#关于代理" class="headerlink" title="关于代理"></a>关于代理</h2><p></p><p><span class="bjh-p">说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；此时就涉及到两个角色，一个是被代理角色，一个是目标角色。</span></p><p><span class="bjh-p">被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；如同生活中的专卖店，客人到 adidas 专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是 adidas 厂家，目标角色就是用户。</span></p><p><span class="bjh-h3"></span></p>
<h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p></p><p><span class="bjh-p">说反向代理之前，我们先看看正向代理，正向代理也是大家最常接触到的代理模式，我们会从两个方面来说关于正向代理的处理模式，分别从软件方面和生活方面来解释一下什么叫正向代理。</span></p><p><span class="bjh-p">在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的。</span></p><p><span class="bjh-p">此时大家可能都会用一个操作 FQ 进行访问，FQ 的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！</span></p><p><span class="bjh-p">上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</span></p><p><span class="bjh-p">来看个示意图（我把客户端和正向代理框在一块，同属于一个环境，后面我有介绍）：<br><img src="https://img-blog.csdnimg.cn/20200419222449270.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的 IP 地址，还有代理程序的端口。</span></p><p><span class="bjh-p">如下图：<br><img src="https://img-blog.csdnimg.cn/20200419222749783.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>总结来说：正向代理，”它代理的是客户端”，是一个位于客户端和原始服务器（Origin Server）之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器）。</span></p><p><span class="bjh-p">然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</span></p><p><span class="bjh-p">正向代理的用途：</span></p><p><span class="bjh-p">访问原来无法访问的资源，如 Google。可以做缓存，加速访问资源。对客户端访问授权，上网进行认证。代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息。</span></p><p><span class="bjh-h3">反向代理</span></p><p><span class="bjh-p">明白了什么是正向代理，我们继续看关于反向代理的处理方式，举例如我国的某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了。</span></p><p><span class="bjh-p">此时就出现了一个大家耳熟能详的名词：分布式部署；也就是通过部署多台服务器来解决访问人数限制的问题。</span></p><p><span class="bjh-p">某宝网站中大部分功能也是直接使用 Nginx 进行反向代理实现的，并且通过封装 Nginx 和其他的组件之后起了个高大上的名字：Tengine。</span></p><p><span class="bjh-p">有兴趣的童鞋可以访问 Tengine 的官网查看具体的信息：<a href="http://tengine.taobao.org/" target="_blank" rel="noopener">http://tengine.taobao.org/</a></span></p><p><span class="bjh-p">那么反向代理具体是通过什么样的方式实现的分布式的集群操作呢，我们先看一个示意图（我把服务器和反向代理框在一块，同属于一个环境，后面我有介绍）：<br><img src="https://img-blog.csdnimg.cn/20200419222833373.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>通过上述的图解大家就可以看清楚了，多个客户端给服务器发送的请求，Nginx 服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。<span class="bjh-br"></span></span></p><p><span class="bjh-p">此时请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx 扮演的就是一个反向代理角色。<span class="bjh-br"></span></span></p><p><span class="bjh-p">客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。<span class="bjh-br"></span></span></p><p><span class="bjh-p">反向代理，”它代理的是服务端”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息<span class="bjh-br"></span></span></p><p><span class="bjh-p">反向代理的作用：</span></p><p><span class="bjh-p">保证内网的安全，通常将反向代理作为公网访问地址，Web 服务器是内网。负载均衡，通过反向代理服务器来优化网站的负载。</span></p><p><span class="bjh-h3">项目场景</span></p><p><span class="bjh-p">通常情况下，我们在实际项目操作时，正向代理和反向代理很有可能会存在同一个应用场景中，正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向单利服务器，反向代理了多台真实的业务处理服务器。</span></p><p><span class="bjh-p">具体的拓扑图如下：<br><img src="https://img-blog.csdnimg.cn/20200419222855313.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>截了一张图来说明正向代理和反向代理二者之间的区别，如下图：<br><img src="https://img-blog.csdnimg.cn/20200419223318916.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>图解：</span></p><p><span class="bjh-p">在正向代理中，Proxy 和 Client 同属于一个 LAN（图中方框内），隐藏了客户端信息。在反向代理中，Proxy 和 Server 同属于一个 LAN（图中方框内），隐藏了服务端信息。</span></p><p><span class="bjh-p">实际上，Proxy 在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了。</span></p><p><span class="bjh-h3">负载均衡</span></p><p><span class="bjh-p">我们已经明确了所谓代理服务器的概念，那么接下来，Nginx 扮演了反向代理服务器的角色，它是依据什么样的规则进行请求分发的呢？不用的项目应用场景，分发的规则是否可以控制呢？</span></p><p><span class="bjh-p">这里提到的客户端发送的、Nginx 反向代理服务器接收到的请求数量，就是我们说的负载量。请求数量按照一定的规则进行分发，到不同的服务器处理的规则，就是一种均衡规则。</span></p><p><span class="bjh-p">所以将服务器接收到的请求按照规则分发的过程，称为负载均衡。</span></p><p><span class="bjh-p">负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如 F5 负载均衡，相对造价昂贵成本较高。</span></p><p><span class="bjh-p">但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作。</span></p><p><span class="bjh-p">更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制.<br><img src="https://img-blog.csdnimg.cn/20200419223248211.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Nginx 支持的负载均衡调度算法方式如下：</span></p><p><span class="bjh-p">①weight 轮询（默认）：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx 会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。</span></p><p><span class="bjh-p">这种方式下，可以给不同的后端服务器设置一个权重值（weight），用于调整不同的服务器上请求的分配率。</span></p><p><span class="bjh-p">权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</span></p><p><span class="bjh-p">②ip_hash：每个请求按照发起客户端的 ip 的 hash 结果进行匹配，这样的算法下一个固定 ip 地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下 Session 共享的问题。</span></p><p><span class="bjh-p">③fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配。</span></p><p><span class="bjh-p">响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少，它是结合了前两者的优点的一种调度算法。</span></p><p><span class="bjh-p">但是需要注意的是 Nginx 默认不支持 fair 算法，如果要使用这种调度算法，请安装 upstream_fair 模块。</span></p><p><span class="bjh-p">④url_hash：按照访问的 URL 的 hash 结果分配请求，每个请求的 URL 会指向后端固定的某个服务器，可以在 Nginx 作为静态服务器的情况下提高缓存效率。</span></p><p><span class="bjh-p">同样要注意 Nginx 默认不支持这种调度算法，要使用的话需要安装 Nginx 的 hash 软件包。</span></p><p><span class="bjh-p">Web 服务器对比</span></p><p><span class="bjh-p">几种常用 Web 服务器对比如下图：<br><img src="https://img-blog.csdnimg.cn/20200419223117100.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></span></p>
<div>
<h3 style="background: #A8A8A8 !important; color: #ffffff;">&nbsp; 直接部署服务器的风险</h3>



</div>
<p><span style="font-size: 13px;">　　假设，我开发了一个网站，然后买了一台Web服务器和一台数据库服务器，直接部署到公共网络上。如下图，网站用户通过手机、平板、台式机等终端设备，连上网络，输入 118.178.109.187 这个地址，我的系统就读取数据库，然后直接返回一个网页。</span></p>
<p><span style="font-size: 13px;"><img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2018.cnblogs.com/blog/295300/201812/295300-20181226113240184-1092615718.png" alt></span></p>
<p><span style="font-size: 13px;">　　像这种网站部署的方式在今天的网络部署上特别常见。这种部署方式虽然简单、方便，高效，但是也存在着巨大的安全隐患。为什么呢？那是因为我将所有服务器资源都直接暴露在了公共网络上。直接将服务器暴露在网上的风险特别高。据阿里统计，他们每天在全球范围内，会被黑客攻击大概16亿次。是不是很震惊？我的两台服务器在网上裸奔，没有防火墙，没有安全策略，也不知道其他黑客还掌握了哪些漏洞。因此一旦被各种黑客扫描到了，我的服务器就很容易沦为别人的肉鸡，任人宰割。</span></p>
<p><span style="font-size: 13px;">　　所以啊，一旦要直接暴露在网上的服务器都应该是具有强大的安全策略来方式被攻击。比如，防火墙策略要做好，漏洞要修补好，端口不要乱开放等等。而且即便是这样，地球上也没有任何人敢保证他的服务器不被入侵。因此，不被入侵是不可能的了！那么我们应该怎么办呢？我觉得应该增加黑客入侵的门槛，以及减少入侵成功之后的收益。这样费力又不讨好的事情，我相信很多黑客是不愿意做的。</span></p>
<p><span style="font-size: 13px;">　　</span><span style="font-size: 13px;">那说了那么多，怎么操作呢？我觉得要暴露在公网上的服务器，必须都应该是不存储任何数据的服务器，即便是服务器挂了。用户虽然不能访问了，但是至少数据不会丢失。 所以常用的策略就是，重要的东西尽量放内网。</span></p>
<p><span style="font-size: 13px;">　　如下图，手机、平板、台式机等终端设备通过公网访问反向代理服务器。反向代理服务器上有两张网卡，一张网卡是公共网卡，另一张网卡是局域网网卡。反向代理服务器通过将请求反向代理到192.168.1.1这台Web服务器，Web服务器连接局域网的数据库进行SQL查询操作，然后将数据返回给反向代理服务器，反向代理服务器再将数据通过公网传给终端设备。</span></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2018.cnblogs.com/blog/295300/201812/295300-20181226115341930-1676037661.png" alt></p>
<p>&nbsp;</p>
<p><span style="font-size: 13px;">　　这种技术就相对安全一点了，因为只有反向代理服务器直接暴露在公网上了，即便是反向代理服务器被攻击了，只要局域网内的其他服务器不被攻击，也损失不了什么。</span></p>
<div>
<h3 style="background: #A8A8A8 !important; color: #ffffff;">&nbsp; 反向代理</h3>

</div>
<p><span style="font-size: 13px;">　　如何理解反向代理呢？就像刚刚那个图，</span><span style="font-size: 13px;">反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</span></p>
<p><span style="font-size: 13px;">　　我们从客户端的视野来看，实际上客户端并不知道真实的服务提供者是哪台服务器，它只知道它请求了反向代理服务器。因此反向代理这种方式又对外隐藏了真实服务器的地址，从一定程度上降低了安全隐患。</span></p>
<div>

<h4><a id="_windows10Nginx__6"></a><em>windows10系统下安装Nginx</em></h4>
<p><em><strong>打开nginx的官网：<a href="http://nginx.org/" target="_blank" rel="nofollow noopener">http://nginx.org/</a> ，下载最新的稳定版本。</strong></em><br>
<img src="https://img-blog.csdnimg.cn/20190620085649844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190620085706779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><em><strong>按照版本需要点击进行下载即可,这里博主选择nginx-1.12.2下载windows版本</strong></em><br>
<img src="https://img-blog.csdnimg.cn/20190620085747161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><em><strong>或者在首页点击download下载历史稳定版本</strong></em><br>
<img src="https://img-blog.csdnimg.cn/2019062008584711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><em><strong>下载完成后，解压到你想要解压的文件路径中，我解压到了D盘中，并把文件名改为nginx；进入文件内，打开nginx.exe文件，会出现一个一闪而过的页面，然后打开任意一个浏览器，输入 localhost，出现下面的页面，则安装成功。</strong></em></p>
<p><img src="https://img-blog.csdnimg.cn/20190620090248902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190620090336569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><em><strong>如果没有出现，则说明没有安装成功；通过cmd.exe来看nginx是否安装成功和错误所在。打开cmd后，输入D:（你的安装目录在哪输入哪个），再输入cd nginx，继续输入nginx，如果安装不成功就会反馈错误，我出现的错误是：[emery] blind() to 0.0.0.0:80 failed (10013: An attempt was made to access a socket in a way forbidden by its access permissions)</strong></em></p>
<p><em><strong>也就是80端口被其他程序占用。</strong></em></p>
<p><em><strong>解决方法是：以管理员身份运行regedit打开键值:HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\HTTP在右边找到Start这一项,将其改为0重启系统,System进程不会占用80端口。</strong></em></p>
<p><em><strong>重启后打开浏览器输入localhost，出现了下面页面：</strong></em></p>
<p><img src="https://img-blog.csdnimg.cn/20190620090336569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<em><strong>也可以在cmd命令窗口输入命令 

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist /<span class="keyword">fi</span> “imagename eq nginx.exe”</span><br></pre></td></tr></table></figure>

<p>，出现如下结果说明启动成功</p></strong></em></p><p></p>
<p><img src="https://img-blog.csdnimg.cn/20190620090456727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<em><strong>nginx的配置文件是conf目录下的nginx.conf，默认配置的nginx监听的端口为80，如果80端口被占用可以修改为未被占用的端口即可</strong></em></p>
<p><img src="https://img-blog.csdnimg.cn/20190620090537123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/2019062009062588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
<em><strong>检查80端口是否被占用的命令是： netstat -ano | findstr 0.0.0.0:80 或 netstat -ano | findstr "80"</strong></em></p>
<p><em><strong>当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，只需要执行命令 nginx -s reload 即可让改动生效</strong></em></p>
<hr>

<h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>Model</th>
</tr>
</thead>
<tbody>
<tr>
<td>start nginx</td>
<td>启动</td>
</tr>
<tr>
<td>nginx -s stop</td>
<td>迅速退出</td>
</tr>
<tr>
<td>nginx -s quit</td>
<td>优雅的退出</td>
</tr>
<tr>
<td>nginx -s reload</td>
<td>修改配置文件后重载</td>
</tr>
</tbody>
</table>


<h4><a id="_nginx__49"></a><em>关闭nginx</em></h4>
<p><strong>如果使用cmd命令窗口启动nginx，关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx</strong></p>
<p>(1)输入nginx命令  nginx -s stop(快速停止nginx)  或  nginx -s quit(完整有序的停止nginx)</p>
(2)使用taskkill   

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill /f /t /im nginx.exe</span><br></pre></td></tr></table></figure>

<hr>
<h4><a id="_nginx__59"></a><em>使用nginx代理服务器做负载均衡</em></h4>

<p>我们可以修改nginx的配置文件nginx.conf 达到访问nginx代理服务器时跳转到指定服务器的目的，即通过proxy_pass 配置请求转发地址，即当我们依然输入http://localhost:80 时，请求会跳转到我们配置的服务器</p>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">   <span class="selector-tag">upstream</span> <span class="selector-tag">mytomcats</span> &#123;  </span><br><span class="line">      server localhost:8081;  </span><br><span class="line">&#125;  </span><br><span class="line">   <span class="selector-tag">server</span> &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       <span class="selector-tag">server_name</span>  <span class="selector-tag">localhost</span>;</span><br><span class="line">       <span class="selector-id">#charset</span> <span class="selector-tag">koi8-r</span>;</span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line">       # 以下为解决跨域的设置</span><br><span class="line">       <span class="selector-tag">add_header</span> <span class="selector-tag">Access-Control-Allow-Origin</span> *;</span><br><span class="line">	add_header Access-Control-Allow-Methods 'GET,POST';</span><br><span class="line">	add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';</span><br><span class="line">	</span><br><span class="line">       location / &#123;</span><br><span class="line">		proxy_pass http://mytomcats;  </span><br><span class="line">       &#125;</span><br><span class="line">  ......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>同理，我们可以配置多个目标服务器，当一台服务器出现故障时，nginx能将请求自动转向另一台服务器，例如配置如下：</strong></em><br>

</p><p><img src="https://img-blog.csdnimg.cn/20190620091802976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01yc19jaGVucw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p></p>
<p><em><strong>当服务器 localhost:8080 挂掉时，nginxnginx能将请求自动转向服务器 192.168.101.9:8080 。上面还加了一个weight属性，此属性表示各服务器被访问到的权重，weight越高被访问到的几率越高。</strong></em></p>
<hr>
<h4><a id="_Nginx__73"></a><em>Nginx配置静态资源</em></h4>
<p><em><strong>将静态资源（如jpg|png|css|js等）放在如下配置的f:/nginx-1.12.2/static目录下，然后在nginx配置文件中做如下配置(注意：静态资源配置只能放在 location / 中)，浏览器中访问 http://localhost/1.jpg 即可看到图片

<pre><code>location ~ \.(gif|jpg|png|js|css)$ {
    root F:/nginx-1.12.2/static;
    index index.html index.htm;
}</code></pre><hr>


<p>原文参考1：<a href="https://blog.csdn.net/Mrs_chens/article/details/92961608" target="_blank" rel="nofollow noopener">https://blog.csdn.net/Mrs_chens/article/details/92961608</a></p>
<p>原文参考2：<a href="https://baijiahao.baidu.com/s?id=1652608869911988442&wfr=spider&for=pc" target="_blank" rel="nofollow noopener">https://baijiahao.baidu.com/s?id=1652608869911988442&wfr=spider&for=pc</a></p></strong></em></p></div></div></div></div>]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>boot Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot下整合dubbo和zookeeper</title>
    <url>/myblog/spring-boot/spring-boot%E4%B8%8B%E6%95%B4%E5%90%88dubbo%E5%92%8Czookeeper/</url>
    <content><![CDATA[<p>本章主要说下dubbo和zookeeper的概念，以及在基于springboot框架搭建dubbo+zookeeper分布式服务架构。</p>
<a id="more"></a>
<p>什么是dubbo：</p>
<blockquote>
<p>dubbo框架：dubbo是阿里巴巴soa服务化治理方案的核心框架，是一个分布式服务的框架，致力于提高性能和透明化rpc远程服务调用方案，以及soa服务治理方案。</p>
</blockquote>
<p>确实懵，什么是soa呢，什么是rpc呢？？？</p>
<blockquote>
<p>soa：面向服务的架构，将应用程序的不同功能单元（也叫作服务）通过服务之间的定义良好的接口和契约联系起来。</p>
</blockquote>
<blockquote>
<p>rpc：远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</p>
</blockquote>
<p>在dubbo+zookeeper中有三个重要的角色：</p>
<pre><code>1. provider（服务提供者）：在我们项目中可以粗糙地理解成实现类

2. Consumer（服务消费者）：可以理解为调用服务（调用实现类）的类，类似于controller，当然如果集成rabbitmq也有可能是消息队列的类，也有可能是实现类调用实现类，所以实现类可以身兼数职，既可以是服务提供者也可以是服务调用者。

3. registry（zookeeper）：也就是我们的注册中心，zookeeper是Apache下的产品。</code></pre><p>没有用dubbo之前我们一般是controller调用service，service调用mapper（dao），但是现在加上了dubbo以后就是controller（当然不止controller，所有服务消费者都可以）通过向zookeeper订阅服务，service向zookeeper注册服务，通过zookeeper这个中介，把服务提供方的服务注入到服务消费者中。</p>
<h2 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h2><pre><code>1. 服务容器负责启动，加载，运行服务提供者。
2. 服务提供者在启动时，向注册中心注册自己提供的服务。
3. 服务消费者在启动时，向注册中心订阅自己所需的服务。
4. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
5. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
6. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</code></pre><p>理解不理解没关系来张图看下：<br><img src="https://img-blog.csdnimg.cn/20200421214035358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">为什么需要dubbo？</p>
<blockquote>
<p>　单一应用架构</p>
<p>　　　　当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p>
</blockquote>
<p>　　　　
　</p>
<blockquote>
<p>垂直应用架构</p>
<p>　　　　当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p>
</blockquote>
<p>　　　　
　</p>
<blockquote>
<p>分布式服务架构</p>
<p>　　　　当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p>
</blockquote>
<p>　　　　</p>
<blockquote>
<p>   流动计算架构</p>
<p>　　　　当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>
</blockquote>
<p>  上述部分描述了互联网架构的演变，关键要素及dubbo存在的意义，可谓简约而不简单 <a href="http://dubbo.apache.org" target="_blank" rel="noopener">官网地址</a><br>，在这里关于dubbo的介绍我就不再这里阐述了，官网有中文的说明而且很详细</p>
<h2 id="上demo："><a href="#上demo：" class="headerlink" title="上demo："></a>上demo：</h2><blockquote>
<p>运行环境：JDK8，Maven 3.0+<br>技术栈：SpringBoot 2.2.6.RELEASE、Dubbo 1.0.0、ZooKeeper3.5.7、mybatis2.1.2（推荐使用MP）、mysql<br>编辑器：eclipse 4.15.0（已安装好STS）<br>提供者项目</p>
</blockquote>
<p><strong>1、提供者：</strong><br><img src="https://img-blog.csdnimg.cn/20200421225324525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>pom文件需引入的内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">      &lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 整合dubbo --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;io.dubbo.springboot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 注意:dubbo强制内置log4J 如果没有则会报错 --&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>提供者的项目结构如下：<br><img src="https://img-blog.csdnimg.cn/2020042122571262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">配置文件，此处使用的默认的application.properties类型的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring.dubbo.application.name=provider</span><br><span class="line">spring.dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">spring.dubbo.protocol.name=dubbo</span><br><span class="line">spring.dubbo.protocol.port=20880</span><br><span class="line"><span class="comment">#dubbo 资源扫描文件 </span></span><br><span class="line">spring.dubbo.scan=cn.chfsun.server.service</span><br><span class="line"></span><br><span class="line">server.port=8084</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库相关配置</span></span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/orcl?useUnicode=<span class="literal">true</span>&amp;useJDBCCompliantTimezoneShift=<span class="literal">true</span>&amp;useLegacyDatetimeCode=<span class="literal">false</span>&amp;serverTimezone=UTC</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root123</span><br><span class="line">spring.datasource.max-idle=10</span><br><span class="line">spring.datasource.max-wait=10000</span><br><span class="line">spring.datasource.min-idle=5</span><br><span class="line">spring.datasource.initial-size=5</span><br></pre></td></tr></table></figure>
<p>mapper层：<br><img src="https://img-blog.csdnimg.cn/20200421230012176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">业务逻辑实现层：<br><img src="https://img-blog.csdnimg.cn/20200421230132443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">PS：到此提供者已经写好了，然后，然后使用mvn命令打包为jar文件，再启动服务，看着控制台愉快的跑起来……</p>
<blockquote>
<p>等等！是不是报错了（如果没报错更好，但是可能吗，除非…）：打包报错，启动也报错……什么鬼！ 别慌，你的zookeeper服务启动了没？zookeeper是啥？这个还需要服务？</p>
</blockquote>
<h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p>本文刚开始已经提到了：<em>….zookeeper这个中介，把服务提供方的服务注入到服务消费者中。</em></p>
<p>再来点：</p>
<blockquote>
<p>zookeeper是开放源码的分布式应用程序协调服务，可以作为dubbo等服务的注册中心，也可以在分布式系统中实现分布式锁。</p>
<p>ZooKeeper的基本运转流程：</p>
<p>1、选举Leader。（选举leader可以参考<br><a href="https://blog.csdn.net/gaoshan12345678910/article/details/67638657）" target="_blank" rel="noopener">https://blog.csdn.net/gaoshan12345678910/article/details/67638657）</a></p>
<p>2、同步数据。</p>
<p>3、选举Leader过程中算法有很多，但要达到的选举标准是一致的。</p>
<p>4、Leader要具有最高的执行ID，类似root权限。</p>
<p>5、集群中大多数的机器得到响应并接受选出的Leader。</p>
</blockquote>
<p><strong>zookeeper的四种状态：</strong></p>
<p>　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOOKING：寻找Leader状态。当服务器处于该状态时，它会认为当前集群中没有Leader，因此需要进入Leader选举状态。</span><br><span class="line"></span><br><span class="line">　　FOLLOWING：跟随者状态。表明当前服务器角色是Follower。</span><br><span class="line"></span><br><span class="line">　　LEADING：领导者状态。表明当前服务器角色是Leader。</span><br><span class="line"></span><br><span class="line">　　OBSERVING：观察者状态。表明当前服务器角色是Observer。</span><br></pre></td></tr></table></figure>
<p>不是很理解没关系，先让它跑起来再说：</p>
<p>1、下载地址：<br>     <a href="https://archive.apache.org/dist/zookeeper/" target="_blank" rel="noopener">zookeeper</a>：<a href="https://archive.apache.org/dist/zookeeper/" target="_blank" rel="noopener">https://archive.apache.org/dist/zookeeper/</a><br><img src="https://img-blog.csdnimg.cn/202004212321389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">不是版本越高越好，稳定决定一切，我下载的是3.5.7的。点击进去，跳转到如下页面，选择标识的版本——-为啥？有坑啊！稍不注意就会…..</p>
<blockquote>
<p>注意： 从zookeeper-3.5.5开始，在下载zk时候 请下载apache-zookeeper-3.5.5 -bin .tar.gz<br>而不是apache-zookeeper-3.5.5.tar.gz：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200421232415888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">不然启动时候会报</p>
<blockquote>
<p>找不到或无法加载主类 org.apache.zookeeper.server.quorum.QuorumPeerMain</p>
</blockquote>
<p>2、下载好了，解压缩到本地磁盘中，然后进入bin中，找到zkServer.cmd，双击打开就能运行，然后又…..<br><img src="https://img-blog.csdnimg.cn/20200421233104361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">如果不是这个错，那么你很悲催，还得解决其它的错误，最后还是会看到这个错误！！！<br>从错误中我们能大致知道是缺少初始化文件了。<br>解决方式很简单粗暴：</p>
<blockquote>
<p>1.将conf目录下的zoo-sample.cfg复制下，改名为zoo.cfg，或者粗暴的修改conf目录下的zoo-sample.cfg重命名为zoo.cfg；</p>
</blockquote>
<blockquote>
<p>2.修改配置文件，如果不存在路径data和log，请先新建。（最好使用文本编辑器来修改配置）<br><img src="https://img-blog.csdnimg.cn/20200421233652221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<p>启动：<br>打开bin文件夹，cmd进去执行：<br><img src="https://img-blog.csdnimg.cn/20200421234013461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">保持doc窗口不要关闭，更不要鼠标点进去，否则你可以试下，看会怎么样。<br>回到eclipse中，启动提供者项目：<br><img src="https://img-blog.csdnimg.cn/20200421234411638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">能看到红色的部分就说明提供者起作用名副其实了，别急，既然是提供者，是需要给消费者用的，就需要打包成一个starter。停止项目，项目右键先build path更改下<br><img src="https://img-blog.csdnimg.cn/20200422000101341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>保存退出，然后继续项目右键–&gt;Run As—&gt;Maven clean/Maven install  或者使用mvn命令也可。<br><img src="https://img-blog.csdnimg.cn/20200422000241822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">红色部分即为打包后的jar，如果没看到刷新下就可以了。此时已经写入了你的本地maven仓库中。<br>再启动项目，作为服务提供者。</p>
<p>继续再来个消费者：</p>
<p><strong>2消费者项目</strong>：<br>创建方式同提供者项目，名字不一样就行，但是最好还是见名知意，符合规范。结构如下：<br><img src="https://img-blog.csdnimg.cn/20200421235051659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p>前文提起过：调用者可以直接调取提供者提供的服务，自身也可以是一个服务提供者，给其他调用者提供服务，此处只是调用，因此架构上不需要什么复杂的。</p>
</blockquote>
<p>pom文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">     &lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;cn.chfsun&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;dubbo-serverorcl&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 整合dubbo --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;io.dubbo.springboot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!-- 注意:dubbo强制内置log4J 如果没有则会报错 --&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>PS:pom文件中需要引入之前打包好的服务提供者jar<br>如果不清楚怎么引入可查看服务提供者打包后的配置文件：<br><img src="https://img-blog.csdnimg.cn/20200422001453434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#防止服务消费者和提供者端口冲突(一致)</span></span><br><span class="line">server.port=8085</span><br><span class="line"><span class="comment">## Dubbo 消费者  </span></span><br><span class="line">spring.dubbo.application.name=consumer</span><br><span class="line">spring.dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line"></span><br><span class="line">spring.dubbo.scan=cn.chfsun.client.controller</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库相关配置</span></span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/orcl?useUnicode=<span class="literal">true</span>&amp;useJDBCCompliantTimezoneShift=<span class="literal">true</span>&amp;useLegacyDatetimeCode=<span class="literal">false</span>&amp;serverTimezone=UTC</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br></pre></td></tr></table></figure>
<p>控制层代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.chfsun.server.service.DeptServie;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Reference</span>(version = <span class="string">"1.0.0"</span>)</span><br><span class="line">	<span class="keyword">private</span> DeptServie deptServie;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping</span>(value = <span class="string">"/list"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> deptServie.queryList();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS：<em>@Reference(version = “1.0.0”)这个注解用的是dubbo提供的</em></p>
<p>然后启动消费者项目<br><img src="https://img-blog.csdnimg.cn/20200422002057226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">能看到红色部分代表消费者搭建成功。</p>
<p>下面打开浏览器访问：<a href="http://localhost:7001/，在服务监控中切换到提供者标签，即可看到：" target="_blank" rel="noopener">http://localhost:7001/，在服务监控中切换到提供者标签，即可看到：</a><br><img src="https://img-blog.csdnimg.cn/2020042200230726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">切换到消费者标签即可看到：<br><img src="https://img-blog.csdnimg.cn/20200422002704402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">嗯？访问这个url看不到？你问怎么访问这个，搭建个服务监控就行了，走起！</p>
<h2 id="Dubbo环境搭建-ZooKeeper注册中心"><a href="#Dubbo环境搭建-ZooKeeper注册中心" class="headerlink" title="Dubbo环境搭建-ZooKeeper注册中心"></a>Dubbo环境搭建-ZooKeeper注册中心</h2><p>在上面搭建好ZooKeeper注册中心后，搭建管理控制台实现服务监控。<br>进入Dubbo官网，点击GIthub<br><a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a><br><img src="https://img-blog.csdnimg.cn/20200422092112963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>进入到Github页面后，一直往下找到dubbo-admin/dubbo-monitor<br><img src="https://img-blog.csdnimg.cn/20200422092228489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在此页面会看到dubbo-admin-server,但是没有dubbo-admin,这是因为此时的分支是develop,将分支切换为master<br><img src="https://img-blog.csdnimg.cn/20200422092252226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>此时页面地址为：<br><a href="https://github.com/apache/dubbo-admin/tree/master" target="_blank" rel="noopener">https://github.com/apache/dubbo-admin/tree/master</a><br>在此页面可以看见其官方说明<br><img src="https://img-blog.csdnimg.cn/20200422092332764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载后找到dubbo-admin-server/src/main/resources/application.properties<br>将要监控的Zookpeeper注册中心的地址修改，这里是本机。<br><img src="https://img-blog.csdnimg.cn/20200422092404174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后回到dubbo-admin目录下，在此处打开命令行窗口，使用maven进行打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020042209252121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>出现Build Success 则就打包成功</p>
<p>此时在目录下会生成target目录，在target目录下会有一个jar包</p>
<p>在运行jar包程序前将上面所讲的ZooKeeper的服务端与客户端运行<br>然后在target目录下打开命令行运行jar包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>


<p>此时打开浏览器输入：<br><a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a><br>默认是7001端口，会提示输入账户密码，默认都是root</p>
<p>点击登录，不出意外就能看到上面所展示的页面</p>
<h2 id="管理控制台的作用"><a href="#管理控制台的作用" class="headerlink" title="管理控制台的作用"></a>管理控制台的作用</h2><p>禁止提供者<br><img src="https://img-blog.csdnimg.cn/2020042217164162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">发送请求后：<br><img src="https://img-blog.csdnimg.cn/20200422171735261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">后端控制台：<br><img src="https://img-blog.csdnimg.cn/20200422171816786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>禁止消费者<br><img src="https://img-blog.csdnimg.cn/2020042216532885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">执行后再去访问页面返回：<br><img src="https://img-blog.csdnimg.cn/20200422165505431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">eclipse控制台：<br><img src="https://img-blog.csdnimg.cn/20200422165537522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">再允许访问后，即可正常访问。</p>
<h2 id="Dubbo与SpringCloud"><a href="#Dubbo与SpringCloud" class="headerlink" title="Dubbo与SpringCloud"></a>Dubbo与SpringCloud</h2><p>如果非要比较一下两者的孰优孰劣，要根据实际应用场景来阐述。其实，这两者都是当下微服务典型的技术解决方案，可谓一时瑜亮，只不过在国内dubbo比较流行一些，原因其实很简单:</p>
<p>　　1. dubbo官方文档详细且有中文，而且运行原理技术解决方案描述比较透彻</p>
<p>　　2.国内的架构师有许多来自于阿里，对dubbo的推广起到了不可磨灭的作用</p>
<p>　　3.由于dubbo出现的较早，当然也开源。对于当时可谓轰动一时，各大公司争先使用，即使到现在谁也不愿意将原先的项目大刀阔斧的用新技术重构，代价要考虑。</p>
<p>　　相反，在国外的社区，dubbo的使用广度恐怕就远不及SpringCloud了。原因其实也很明了：就公司而言，dubbo出自于阿里，属于商业公司。我觉得阿里的框架肯定优先满足于自己的业务与利益。而springcloud出自于Spring的产品族，而其公司本身就是为了简化企业的开发模式，为各大企业所服务。因此他们的本身出发点就不同，个人觉得这个才是必要因素。</p>
<p>　　但是有几点需要在这里了解一下：</p>
<p>　　1.  就完成的功能而言：dubbo其实是SpringCloud组件中的一部分，也就相当于netflix中的eureka+小半个Hystrix+ribbon+feign。但是SpringCloud集成的诸如：链路跟踪，分布式配置，网关路由等，目前dubbo里还没有找到，也有可能我没有发现。因此在dubbo里需要使用这些功能，我们还要借助于第三方的实现。</p>
<p>　　2.  dubbo是基于rpc实现远程调用，springcloud各个服务之间调用还是经过http，就性能而言是要弱于dubbo的，毕竟dubbo是经过阿里庞大的业务产品族和并发量考验的，不过这并不代表springcloud性能会很差</p>
<p>　　3. 常用的dubbo的技术使用方案还是基于spring，因此，我还是愿意把幕后英雄归功于spring</p>
<p>　　4. spring-cloud就相当于电脑的品牌机，拿来很方便的使用，因此它绝对是中小型公司(没有过多的精力和成本去搞基础研发)福音。而dubbo就好比是组装机，我们通过其已有的实现，完整的文档装配成我们自己想要的一套微服务方案。</p>
<p>总之，Dubbo 出生于阿里系，是阿里巴巴服务化治理的核心框架，并被广泛应用于中国各互联网公司；只需要通过 Spring 配置的方式即可完成服务化，对于应用无入侵，设计的目的还是服务于自身的业务为主。</p>
<p>虽然阿里内部原因 Dubbo 曾经一度暂停维护版本，但是框架本身的成熟度以及文档的完善程度，完全能满足各大互联网公司的业务需求。</p>
<p>如果我们使用配置中心、分布式跟踪这些内容都需要自己去集成，这样无形中增加了使用 Dubbo 的难度。</p>
<p>Spring Cloud 是大名鼎鼎的 Spring 家族的产品， 专注于企业级开源框架的研发。</p>
<p>Spring Cloud 自从发布到现在，仍然在不断的高速发展，几乎考虑了服务治理的方方面面，开发起来非常的便利和简单。</p>
<p>Dubbo 于 2017 年开始又重启维护，发布了更新后的 2.5.7 版本，而 Spring Cloud 更新的非常快，目前已经更新到 Finchley.M2。</p>
<p>因此，企业需要根据自身的研发水平和所处阶段选择合适的架构来解决业务问题，不管是 Dubbo 还是 Spring Cloud 都是实现微服务有效的工具。<br>微服务架构是互联网很热门的话题，是互联网技术发展的必然结果。它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。</p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>boot dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工具——windows下载安装curl工具调用http接口</title>
    <url>/myblog/tool/%E4%BB%B6%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94windows%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85curl%E5%B7%A5%E5%85%B7%E8%B0%83%E7%94%A8http%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具，支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP，功能强大，用于文件下载和上传，项目需要，学习一下。</p>
<a id="more"></a>
<h2 id="二、下载"><a href="#二、下载" class="headerlink" title="二、下载"></a>二、下载</h2><p>地址：<a href="https://curl.haxx.se/windows/" target="_blank" rel="noopener">https://curl.haxx.se/windows/</a></p>
<blockquote>
<p>windows的好处就是双击傻瓜式安装，不需要智商。</p>
</blockquote>
<h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>解压后打开bin目录有curl工具可执行文件，cmd进去直接使用：<br><img src="https://img-blog.csdnimg.cn/20200517234730148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE0Mjk4Mjg=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="四、语法"><a href="#四、语法" class="headerlink" title="四、语法"></a>四、语法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl [option] [url]</span><br></pre></td></tr></table></figure>

<p>帮助：curl –help<br>1.http协议</p>
<p>【Option】可选参数             描述</p>
<p>-X  或者 –request      指定请求方式，如GET 、POST 、PUT 、DELETE 、HEAD 等七种方式<br>-i  或者 –include      显示服务器response 响应头部信息<br>-v  或者 –verbose      显示详细(冗长)信息<br>-H  或者 –header       指定http 请求头 ，如  -H  “Content-Type:application/json”<br>-d  或者 –data         指定请求体body参数 , 如有多个参数可以用&amp;隔开或者使用多个-d 选项。 如  -d “a=abc&amp;b=110&amp;c=true” （指定三个参数）或  -d a=abc -d b=110 -d c=true 亦可。<br>-F  或者 –form         指定multipart Form 请求体，如文件域参数，或者普通表单域参数。<br>-u  或者 –user         指定用户名：密码<br>-C  或者 –continue-at  offset  用于断点续传。<br>-c  或者 -cookie-jar    请求返回,回写cookie到指定文件中<br>-D  或者 –dump-header  请求返回,回写response header信息到指定文件中<br>-b  或者 –cookie       请求时携带上cookie，指定本地cookie所在文件<br>-x  或者 –proxy        指定 http代理服务器ip:port<br>-O                      请求Url并保存到本地<br>-o                      请求Url并保存到指定文件</p>
<pre><code>基本用法，get请求：curl {url}
显示HTTP响应的头部信息：curl -i {url}
查看HTTP请求/响应过程中的所有头部信息：curl -v {url}
无参POST请求：curl -X POST {url}
Form表单(application/x-www-form-urlencoded)POST请求：curl -X POST -d &quot;name=xxx&quot; {url}
JSON形式POST请求：curl -H &quot;Content-Type:application/json&quot; -X POST -d &apos;{&quot;name&quot;: &quot;xxx&quot;}&apos; {url}
文件流（multipart/form-data）POST请求：curl -X POST  -F &quot;Filedata=@{filePath}&quot; (文件参数)  -F &quot;FileName=text.txt&quot; （普通文本参数) {url}
请求cookie回写到本地：curl -c cookie.txt {url}
请求携带cookie：curl -b cookie.txt {url}
下载文件到本地：curl -O {url}
下载文件到本地并指定文件名：curl -o {fileName} {url}</code></pre><p>2.ftp协议</p>
<pre><code>显示FTP文件列表：
curl -u {userName}:{password} ftp://{url} &lt;or&gt;  curl ftp://{userName}:{password}@{url}
不显示进度条
curl -u {userName}:{password} -s ftp://{url}
下载单个文件
curl -u {userName}:{password} ftp://{ip}:{21}/{srcFilepath} -o {destFilepath}
上传单个文件
curl -u {userName}:{password} ftp://{ip}:{21}/{destFilepath} -T {srcFilepath}
删除ftp服务器文件（ftp 删除命令）：
curl -u {userName}:{password} ftp://{ip}:{21} -X &apos;DELE {filePath}&apos;
连续下载多个文件到本地（不支持递归下载，不指定文件名）：
curl -u {userName}:{password} ftp://{ip}:{21}/[1,2,3].txt -O  或者
curl -u {userName}:{password} ftp://{ip}:{21}/[1-3].txt -O</code></pre><p>3.响应时长</p>
<pre><code>curl -o /dev/null -w %{time_namelookup}::%{time_connect}::%{time_starttransfer}::%{time_total}::%{speed_download}&quot;\n&quot;  {url}</code></pre><p>参数说明：</p>
<pre><code>-o：把curl 返回的html、js 写到垃圾回收站[ /dev/null]
-s：去掉所有状态
-w：按照后面的格式写出rt
    time_namelookup：DNS 解析域名[www.taobao.com]的时间 
    time_commect：client和server端建立TCP 连接的时间
    time_starttransfer：从client发出请求；到web的server 响应第一个字节的时间
    time_total：client发出请求；到web的server发送会所有的相应数据的时间
    speed_download：下周速度  单位 byte/s</code></pre>]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>我的外包经验：印度、中国和菲律宾（译文）</title>
    <url>/myblog/talkabout/%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<h1 id="page-title" class="asset-name entry-title">我的外包经验：印度、中国和菲律宾（译文）</h1>
作者： 阮一峰

<p>日期：2020年2月27日</p>
<p>外包在软件业很常见，各种规模的公司都在用，每年要吸纳大量就业。</p><p></p>
<p>但是，外包的曝光量很少，大家似乎都不太关心，很少有人谈论。这导致许多人不了解外包到底是怎么回事。</p>
<a id="more"></a>
<p>本周，我读到 Troy Hunt 在2016年的<a href="https://www.troyhunt.com/offshoring-roulette-lessons-from-outsourcing-to-india-china-and-the-philippines/" target="_blank">一篇旧文</a>，介绍他的外包经验。我觉得，读起来很新鲜，有启发。下面就是节选的译文，插图是我配的。</p><p></p>
<h2>我的外包经验：印度、中国和菲律宾</h2>

<p>作者：Troy Hunt</p>

<p>原文网址：<a href="https://www.troyhunt.com/offshoring-roulette-lessons-from-outsourcing-to-india-china-and-the-philippines/" target="_blank">troyhunt.com</a></p>

<p>1、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022506.jpg" alt title></p>

<p>我有很多与亚洲外包供应商合作的经历。这篇文章我想来谈谈，多年来将软件项目外包到印度，中国和菲律宾的经验。</p>

<p>我以前的工作是辉瑞公司的软件架构师，一共干了14年，曾经负责过亚太地区的软件架构。</p>

<p>2、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022507.jpg" alt title></p>

<p>辉瑞公司的软件开发策略很简单，就是将所有事情外包。</p>

<p>这是行业的标准做法，我因此跟亚太地区数十个软件供应商合作过，参与了各种各样的项目，范围很广，从简单的产品宣传网站到大型临床研究系统，从移动应用 App 到 POS 机的终端程序。</p>

<p>我对印度、中国和菲律宾的软件外包行业，接触得比较多，感触尤其深，我想讨论对它们的观察。</p>

<p>3、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022508.jpg" alt title></p>

<p>辉瑞公司为什么要外包？</p>

<p>原因很简单，因为程序员很贵。你必须花很多钱，雇佣很多人来构建软件产品，无论他们是否在工作，你都需要支付薪水。而且你雇来的程序员不一定懂每个项目所需的特定技能，这意味着你还要雇佣更多的人。</p>

<p>外包就相当于"云程序员"，你可以只在需要的时候去用它，只为所消费的东西付费，因此减轻了自己公司的负担。</p>

<p>4、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022509.jpg" alt title></p>

<p>外包一般都选择亚洲，因为其他地方的工资太高。澳大利亚很贵，美国很贵，英国很贵，上图是世界银行的人均收入数据，这三个地区与印度、中国、菲律宾。</p>

<p>以我的经验，前三个国家的外包公司小时工资，比后三个国家贵4到5倍。</p>

<p>5、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022510.jpg" alt title></p>

<p>先来看印度。这个国家已经成为离岸外包的代名词，在许多 IT 经理的心中，外包就等于印度。原因有很多。</p>

<ul>
<li>印度当过英国的殖民地，印度人的英语水平很好。</li>
<li>印度拥有超过13亿人口，这意味着它有源源不断的工程师。</li>
<li>印度的外包行业很成熟，外包巨头 Tech Mahindra、Infosys、Wipro 有规范的外包流程，在这个领域进行了大量投资。</li>
</ul>

<p>6、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022511.jpg" alt title></p>

<p>印度许多程序员都是通过单项技术的强化培训而大量生产的，往往只懂培训教的非常特定的技术栈。我常常发现，他们只懂软件组件的一个独立部分，而这就是他们要做的全部事情。</p>

<p>这对项目带来的后果就是，最终会导致很多人参与其中。我查看工作量估算，向外包负责人提问："为什么需要这么多人？"。里面会有初级程序员、高级程序员，专门从事 API 开发的人员，负责网站的人员，负责数据库的人员等等。有些项目由于庞大的规模，需要这样做，但即使是很小的项目，也是这个样子。</p>

<p>7、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022515.jpg" alt title></p>

<p>印度的另一个问题是流失率，程序员总是在离开。传统的公司忠诚度在印度并不盛行，大多数人在一家外包公司不会超过一两年。程序员总是去其他地方寻求更好的机会，这无可厚非，但是这种流失率意味着项目会产生更多的摩擦。这些并不会出现在你的外包合同中。</p>

<p>我还发现，印度程序员对需求文档要求很高，他们始终要求真正详细的文档。其他地方的程序员也要求需求文档，但在印度这个要求更强烈，细节对印度人来说很重要。很多时候，我们假设软件应该包括的功能，事后发现这些功能被认为是"超出范围"。这可能在全世界任何地方的任何项目中发生，但在印度极为盛行。</p>

<p>最合适外包到印度的项目，我认为最好是一个独立的工作单元，范围有着明确的界定，文档齐全，并且完全遵循印度公司现有的模式。你要知道，那里的程序员接受的是非常具体的事情的训练，并以工厂流水线的心态在开发，你按照他们的模式，那就会走上"快乐之路"。</p>

<p>8、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022516.jpg" alt title></p>

<p>接着来谈谈中国。</p>

<p>中国正在快速城市化，越来越多的人口接受高等教育。他们是一个非常精通技术的国家，在这方面不断壮大，从新兴的硬件提供商变成现在占主导地位的厂商，比如华为和联想，也有像阿里巴巴这样的非常强的服务类公司。这些公司如今已经进入了世界舞台。如果您热衷于技术而不关心中国的动态，那么可能会错过未来几十年世界上最重要的技术创新和增长来源。</p>

<p>9、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022517.jpg" alt title></p>

<p>对于外国人来说，中国人并不容易合作，主要原因是外语水平。中国的内部市场很大，几乎所有项目都有自己的中文服务，因此中国人接触英语的机会很有限，如果要跟他们清晰的沟通可能是一件很棘手的事情。</p>

<p>这意味着，你几乎总是与实际从事开发的程序员，至少隔了一层。通常会有一个具有一定英语技能的客户经理，你与他联系，他再把你的意思翻译给技术人员。这样的后果就是，当你真正需要进行详细讨论时，没法跟程序员直接沟通。中国程序员会在内部自己商量，你不知道他们在想些什么，并且很多东西在翻译过程中丢失了。</p>

<p>这对代码质量有深刻影响。从功能上讲，代码本身可能还不错，但这是很少或几乎没有英语技能的人编写的代码。高质量软件的要求之一，就是代码本身就是自我记录的文档，这一点很难实现。他们的代码可能无法清晰地描述软件的功能，不仅对作者也对将来维护的人，都很难阅读。</p>

<p>要是你愿意一直跟同一个软件供应商合作，那可能不会成为问题，但如果你收回代码或交给其他人维护，就会遇到严重问题。我的切身体会是，很难评审中国程序员编写的代码。另外，语言障碍对用户界面也有影响，那些编写代码的人由于不太了解英语，编写的​​标签和标题可能会使英语用户不适应，这意味着要进行许多意想不到的（且预算未定）的修订。</p>

<p>10、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022518.jpg" alt title></p>

<p>我有一个习惯，一直要求供应商提供工作分解表。如果我要外包一个具有20个功能的应用程序，那么我想知道每个功能要花多少钱。然后，我可以评估，讨论一下每个功能的重要性，是否要通过放弃价值较低的功能来降低成本。</p>

<p>但是在中国，供应商无法提供这种表格，因为他们不是以这种方式核算成本。他们给我的细分，只是有多少个大三和​​大四的学生、项目经理、测试人员参与，他们每个人的花费是多少。在我看来，这根本没用，但我也没办法。</p>

<p>中国的另一个现象，就是工时非常高，他们会投入大量的时间。我很清楚地记得一个案例，中国供应商的报价与澳大利亚的本地供应商相同，而工时却大了一个数量级。</p>

<p>11、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022606.jpg" alt title></p>

<p>中国现在变得越来越昂贵，根据我得到的消息，北京程序员的薪水是两位数的涨幅，有报告称，他们的年薪约为25,000美元，而孟买的年薪约为7,000美元。这是一个非常重要的差异。</p>

<p>中国的优势之一（尤其跟印度相比）就是对需求文档的要求不高。中国有一种真正的"可以做"的态度，不管你提什么要求，他们都愿意拿起任何东西去尝试。不过，虽然他们对任何事情都会说"是"，但是实际上的意思很可能是"否"或别的，这里会存在风险。但是总的来说，我发现他们的适应性非常强，这是一大优势。</p>

<p>我更倾向于外包给中国，因为那里更加灵活，限制也更少。不过由于语言障碍，与新的供应商合作期间，涉及的摩擦也更大。</p>

<p>12、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022605.jpg" alt title></p>

<p>再来谈谈菲律宾。</p>

<p>我在马尼拉度过了很多时间，可以很自信地说，菲律宾人是你在任何地方所能遇到的最友好的一群人。由于菲律宾当过美国的殖民地，所以当地人的英语水平很出色，英语是菲律宾排名第二的官方语言。你在马尼拉的任何地方，都能毫无问题地被理解，并与当地人进行交流。</p>

<p>近年来，我注意到的一件事是，呼叫中心转移到菲律宾的趋势很明显。以前你打客服电话，是印度人接听，现在每次我打给电信公司，都会与菲律宾人交谈。我认为，这是他们强大的英语能力，友善的性格和新兴的科技行业共同作用的结果。另外，菲律宾的薪水比中国低得多，更接近印度。</p>

<p>13、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022607.jpg" alt title></p>

<p>菲律宾是一个贫困的国家，到处都可以看到这一点，特别是在前往机场的路上穿过摇摇欲坠的房屋时。</p>

<p>这对技术领域也产生了影响，我在外包中看到的最明显的一点，就是菲律宾程序员对 PHP 的强烈亲和力。这样说并不是要贬低 PHP，而是 LAMP 技术栈的低成本造成的。辉瑞公司所使用的 Microsoft 技术栈在菲律宾很难找到市场。你随便去一家供应商，他们的默认态度总是"是的，我们将用 PHP 和 MySQL做到你们的需求。 "尽管我们后来确实找到了可以使用 Microsoft 技术栈的供应商，但我始终觉得它们并不受到重视，这让我对他们的技术能力有些担心。</p>

<p>14、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022608.jpg" alt title></p>

<p>在成本上，菲律宾肯定比中国低，而且经常比印度低。根据现在的趋势，这种情况大概会保持很长一段时间。</p>

<p>在许多方面，菲律宾是世界上最好的。除了成本，他们还有这个价格的国家中最好的英语技能，友善的性格，以及我在中国观察到的相同的"可以做"的态度。</p>

<p>15、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022609.jpg" alt title></p>

<p>最后，谈谈我的外包经验。</p>

<p>首先，外包是一种不稳定的商品，因为程序员是不稳定的，尤其是在印度。我们当时与一家孟买的开发商合作，花了很多时间和金钱培训一个叫做 Avni 的程序员，让她掌握所需的特定技术。这个项目进展顺利，但是有一天，Avni 离开了。我怀疑她要去生孩子了，根据我的经验，这种情况通常会在发生几个月后才通知你。开发商跟我们说不要担心，会给你找另一个 Avni，跟上一个一样！</p>

<p>开发人员不是可以替代的商品。你不能简单地用一个人去替代另一个人，然后期望他们同样地工作。我经常看到外包供应商信誓旦旦地断言，他们能够像更换厨房灯泡那样简单地更换程序员。这是一种危险的不称职的信念，表明对软件开发的实际情况有根本的误解。</p>

<p>16、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022610.jpg" alt title></p>

<p>第二点，外包软件的质量，不一定能够在项目交付时看出来。通常要花上数月甚至数年的时间，才能意识到你所承担的"技术债务"的成本。供应商开发完软件，将其移交给客户之后，如果客户以后要添加功能，发现代码难以辨认，将花多少钱才能解决？在软件产品生命周期中，长期的成本通常被忽略，因为人们争先恐后地希望立即节省短期成本。</p>

<p>我从未见过，外包供应商为项目编写任何单元测试！他们没有自动化测试流程，总是用人工测试确保一切正常。开发人员甚至从未听说过自动化测试这种概念，因为编写额外的代码将花费更多的金钱，一切在他们看来理所当然。所以，外包项目的长期可维护性和成本是可怕的。</p>

<p>17、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022611.jpg" alt title></p>

<p>第三点，如果想让外包成功，最好采用混合模式。不是"将所有事情外包"，而是"让我们的人与他们的人一起工作，各自做自己最擅长的事情"。</p>

<p>我花了大量时间，到世界各地的外包公司，培训他们的开发人员，跟他们的团队待在一起，交谈要开发的项目。我遇到了各种坏的故事，但也有一些非常积极的经历。</p>

<p>避免依赖外包组织中的个人，比如上文的 Avni，外包行业的人员流动性比一般情况大得多。相反地，应将重点放在让更多人一起参与，如果其中一个离开，你就不会损失太多的项目知识。</p>

<p>还可以多应用一些开发工具，比如代码质量检查工具、构建服务、版本管理等等，让工作过程变得更加可预测。</p>

<p>18、</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202002/bg2020022612.jpg" alt title></p>

<p>第四点，也是最重要的一点，不要把小时费率视为外包成功的指标，不要根据报价的高低选择供应商。</p>

<p>外包给哪个供应商，通常是由公司内部对软件开发了解最少的人决定的。低报价吸引了他们，只考虑了短期成本和交付条件，没有将长期成本（诸如可维护性，可用性以及安全性之类的因素）考虑在内。因为公司的预算和业务目标总是聚焦在短期，难怪那些掌握资金却不了解技术的人做出了不明智的外包决策。</p>

<p>廉价的离岸外包是软件行业的麦当劳。因为需求量很大，外包公司就把软件开发做成了批量生产的产品。但如果你一直吃麦当劳，就不是很好。你最好将外包视为均衡饮食的一部分，做出明智的决定，不要因标价低而盲目选择，不考虑要支付的实际成本。</p>

<p>（完）</p>


<h3>文档信息</h3>
<ul>
<li>版权声明：自由转载-非商用-非衍生-保持署名（<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">创意共享3.0许可证</a>）</li>
<li>发表日期： <abbr class="published" title="2020-02-27T09:15:27+08:00">2020年2月27日</abbr></li>

</ul>
                                

                            

  <div style="display: inline-block ! important;width: 100%;">

  </div>

<p>留言（35条）</p>
<p>我现在教三年级的儿子学C语言编程，要求他无论是变量命名，还是写注释，全部使用英语，不会的就谷歌翻译，从小严格要求。</p>
        
<span class="vcard author"><a title="https://mp.weixin.qq.com/s/5c7aaokFZ3umLdnypNzQ9A" href="https://mp.weixin.qq.com/s/5c7aaokFZ3umLdnypNzQ9A" target="_blank" rel="nofollow">布莱恩特</a></span>

<p> 说：<br>                </p>
<p></p>
            
        
        <div class="comment-content" id="comment-quote-416445">
            <p>之前在外包工作过，之前在杭州待过一段时间，在qq群上看到一条招聘信息，说深圳坂田有一个岗位非常匹配，问我要不要试试，确实是·非常匹配·，不知道你们听没听说过xamarin？这玩意根本没人做，并非恶意去黑微软的移动快平台框架，招聘网站确实几乎没有啊。</p>

<p><br>
后来才知道我被‘三包’了，客户公司外包项目给大外包公司，大外包再外包一个人头，我太太太难，结果是非常悲剧的，我tm以为能长期做，至少也能做个一年半载，结果把我的小摩托车从杭州物流到深圳，花了860，后来骑了不到2个月，就被深圳交警没收。毕竟三无车辆，没收也是理所当然。</p>

<p>外包合同签了一年，一般都是一年，便于灵活操作。要人再招人，做完再释放，以此循环，毕竟外包公司是中间商赚差价。</p>

<p>后来，没出任何意外，项目按原计划3个月完成，我也不出意外的·被动离职了。</p>

<p>辞职之后，回到老家湖北，已经失业3个月了。</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
<abbr class="published" title="February 27, 2020 10:08 PM">2020年2月27日 22:08</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416445" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用布莱恩特的这条留言" onclick="return CommentQuote('comment-quote-416445','布莱恩特');">引用</a>
</p>
</div>
</div>
    

weston

<p> 说：<br>                </p>
<p></p>
            
        
        <div class="comment-content" id="comment-quote-416447">
            <p>实际上去东南亚的中国人并不是做外包，大部分是去做菠菜的，工资也比国内高一些，但是风险更是高了好几倍。菠菜现在已经演变成，大陆提供技术人员，香港提供资金，台湾提供运维和客服，面向的却是大陆市场，每年造成大量的金钱外流。</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="February 28, 2020  1:13 AM">2020年2月28日 01:13</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416447" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用weston的这条留言" onclick="return CommentQuote('comment-quote-416447','weston');">引用</a>
</p>
</div>
</div>
    

<div id="comment-416449" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
<span class="byline">

<p><span class="vcard author">ww</span></p>
<p> 说：<br>                </p></span></p>
<p>我现在教三年级的儿子学C语言编程，要求他无论是变量命名，还是写注释，全部使用英语，不会的就谷歌翻译，从小严格要求。</p>



<p>母语不是英语这种操作根本没用，因为一些英语专业词汇不是靠Google翻译就能表达的清的。</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="February 28, 2020  9:00 AM">2020年2月28日 09:00</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416449" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用ww的这条留言" onclick="return CommentQuote('comment-quote-416449','ww');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416455" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author">哼哼哈嘿</span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416455">
            <blockquote>
<pre>引用江云的发言：</pre>

<p>印度人的英语真的好难听懂</p>

</blockquote>

<p>但是英美系国家的人反而可以和印度人几乎无障碍的沟通，且信息传达效率高。而东亚国家的英语口音似乎没那么重，但实际沟通起来却令人费解得多。个人认为，英语在中国的普及可能还需要一两代人才能实现，学习英语的确对理解世界大有裨益。</p>
</div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
<abbr class="published" title="February 28, 2020 11:10 AM">2020年2月28日 11:10</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416455" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用哼哼哈嘿的这条留言" onclick="return CommentQuote('comment-quote-416455','哼哼哈嘿');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416478" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
<span class="byline">
 <span class="vcard author">胡森</span>

<p> 说：<br></p></span></p>
<p></p>
</div>
        </div>
        <div class="comment-content" id="comment-quote-416478">
            <p>涨知识</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="February 28, 2020  3:47 PM">2020年2月28日 15:47</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416478" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用胡森的这条留言" onclick="return CommentQuote('comment-quote-416478','胡森');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416482" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
<span class="byline">
<span class="vcard author">hei</span>

<p> 说：<br></p></span></p>
<p></p>
 </div>
</div>
<div class="comment-content" id="comment-quote-416482">
            <p>涨知识了</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
<abbr class="published" title="February 28, 2020  4:57 PM">2020年2月28日 16:57</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416482" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用hei的这条留言" onclick="return CommentQuote('comment-quote-416482','hei');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416486" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author">无畏</span>

<p> 说：<br></p></span></p>
<p></p>
</div>
        </div>
        <div class="comment-content" id="comment-quote-416486">
            <p>能干成事儿的都是有本事的，绝大部分还是像咱们这种在国内发展平平出去也还是个渣渣</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="February 28, 2020  6:26 PM">2020年2月28日 18:26</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416486" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用无畏的这条留言" onclick="return CommentQuote('comment-quote-416486','无畏');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416495" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
<span class="vcard author"><a title="https://blog.ifuture.pro/" href="https://blog.ifuture.pro/" target="_blank" rel="nofollow">ifuture</a></span>

<p> 说：<br></p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416495">
            <p>其实最应该思考，我们应该怎么改变</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="February 29, 2020 10:55 AM">2020年2月29日 10:55</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416495" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用ifuture的这条留言" onclick="return CommentQuote('comment-quote-416495','ifuture');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416508" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
<span class="vcard author">lliw</span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416508">
            <blockquote>
<pre>引用bluesen的发言：</pre>

<p>我现在教三年级的儿子学C语言编程，要求他无论是变量命名，还是写注释，全部使用英语，不会的就谷歌翻译，从小严格要求。</p>

</blockquote>

<p>你是亲爹吗？</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="February 29, 2020  3:26 PM">2020年2月29日 15:26</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416508" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用lliw的这条留言" onclick="return CommentQuote('comment-quote-416508','lliw');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416513" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
  <span class="vcard author"><a title="http://attilax" href="http://attilax" target="_blank" rel="nofollow">attilax</a></span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416513">
            <blockquote>
<pre>引用lwl的发言：</pre>

<p></p>

<p>那岂不是比国内赚的钱还少？</p>

</blockquote>

<p>你不懂，哈哈，比上海更高赚的。。</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="February 29, 2020  9:01 PM">2020年2月29日 21:01</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416513" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用attilax的这条留言" onclick="return CommentQuote('comment-quote-416513','attilax');">引用</a>
</p>
</div>
</div>
    </div>
</div>
 <div id="comment-416514" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author">两仪院水月</span>

<p> 说：<br> </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416514">
            <p>正在外包 目前已经开始自动化，且自己就是项目组里的开发</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="February 29, 2020  9:08 PM">2020年2月29日 21:08</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416514" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用两仪院水月的这条留言" onclick="return CommentQuote('comment-quote-416514','两仪院水月');">引用</a>
</p>
</div>
</div>
    </div>
</div>
 <div id="comment-416525" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author"><a title="http://www.wekair.com" href="http://www.wekair.com" target="_blank" rel="nofollow">Kevin</a></span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416525">
            <p>深刻地体会到，在不是英语系的国家要把英语学好确实很难。</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March  2, 2020  9:27 AM">2020年3月 2日 09:27</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416525" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用Kevin的这条留言" onclick="return CommentQuote('comment-quote-416525','Kevin');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416526" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author"><a title="http://attilax" href="http://attilax" target="_blank" rel="nofollow">attilax</a></span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416526">
            <blockquote>
<pre>引用哼哼哈嘿的发言：</pre>

<p></p>

<p>但是英美系国家的人反而可以和印度人几乎无障碍的沟通，且信息传达效率高。而东亚国家的英语口音似乎没那么重，但实际沟通起来却令人费解得多。个人认为，英语在中国的普及可能还需要一两代人才能实现，学习英语的确对理解世界大有裨益。</p>

</blockquote>

<p>没办法，谁让印度人和欧美都是一个种族呢。。。东南亚种族不同，做事方法不同差异大，<br>
</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March  2, 2020 11:46 AM">2020年3月 2日 11:46</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416526" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用attilax的这条留言" onclick="return CommentQuote('comment-quote-416526','attilax');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416527" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author"><a title="http://andyron.com" href="http://andyron.com" target="_blank" rel="nofollow">AndyRon</a></span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416527">
            <p>"技术债务"  哇，第一次听说</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March  2, 2020  2:03 PM">2020年3月 2日 14:03</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416527" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用AndyRon的这条留言" onclick="return CommentQuote('comment-quote-416527','AndyRon');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416543" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author"><a title="http://没有" href="http://没有" target="_blank" rel="nofollow">岑小白</a></span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416543">
            <p>“中国的优势之一（尤其跟印度相比）就是对需求文档的要求不高。中国有一种真正的"可以做"的态度，不管你提什么要求，他们都愿意拿起任何东西去尝试。不过，虽然他们对任何事情都会说"是"，但是实际上的意思很可能是"否"或别的，这里会存在风险。但是总的来说，我发现他们的适应性非常强，这是一大优势。”</p>

<p>----</p>

<p>翻译过来就是，操起键盘就能干，能不能成另说。</p>

<p>其实外包在远程工作中特别常见，但是说实话，专干互联网外包项目的公司就悬了，因为互联网项目能做三个月就已经是大项目！</p>

<p>这类项目不仅开发周期短，命也断。无论是短期线上活动还是官网、 APP， 甚至线下物联网项目做个能滚会说的“小机器人”，都是小跑快打，新手一直泡在这样的项目中自然难有技术积累。</p>

<p>再者，因为项目大多是一锤子买卖，少有长期运维或者版本升级迭代一说，所以公司单位时间承接的项目总量起伏特别大，员工会在闲死和忙死中反复切换！人员流动自然大了。</p>

<p>总之，互联网外包项目只适合经验丰富的小团队，不适合新手、菜鸟踩坑，这种项目就是赚快钱。三五个人把技术栈撸齐了，收入还是非常可观的，时间上也相对灵活可控，方便照顾家庭。</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March  3, 2020 12:12 AM">2020年3月 3日 00:12</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416543" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用岑小白的这条留言" onclick="return CommentQuote('comment-quote-416543','岑小白');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416548" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
<span class="vcard author">流浪码农</span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416548">
            <p>这篇老外的文章写得蛮中肯，站在外国人的观点看中国，确实英语这方面要抓紧，我觉得中国是缺少英语环境，不是缺少能力，我跟外国人交流不用注重语法也能沟通</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March  3, 2020 12:47 PM">2020年3月 3日 12:47</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416548" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用流浪码农的这条留言" onclick="return CommentQuote('comment-quote-416548','流浪码农');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416549" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
<span class="vcard author">adc</span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416549">
            <p>云程序员。。</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March  3, 2020  1:48 PM">2020年3月 3日 13:48</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416549" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用adc的这条留言" onclick="return CommentQuote('comment-quote-416549','adc');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416556" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
<span class="vcard author">Thinker</span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416556">
            <blockquote>
<pre>引用daly的发言：</pre>

<p>正在外包工作，表示从未有过单元测试与自动化测试</p>

</blockquote>

<p>确实要做这些要多很多工作量</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
<abbr class="published" title="March  3, 2020  5:18 PM">2020年3月 3日 17:18</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416556" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用Thinker的这条留言" onclick="return CommentQuote('comment-quote-416556','Thinker');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416692" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author"><a title="http://www.91guangju.com" href="http://www.91guangju.com" target="_blank" rel="nofollow">我要吃肉</a></span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416692">
            <p>确实英语环境不一样啊</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March  8, 2020  6:53 PM">2020年3月 8日 18:53</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416692" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用我要吃肉的这条留言" onclick="return CommentQuote('comment-quote-416692','我要吃肉');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416693" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
<span class="vcard author"><a title="http://www.91guangju.com" href="http://www.91guangju.com" target="_blank" rel="nofollow">guangju</a></span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416693">
            <p>看来以后要加强英语水平了，毕竟有的新技术是英文原版，方便学习和交流啊</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March  8, 2020  6:55 PM">2020年3月 8日 18:55</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416693" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用guangju的这条留言" onclick="return CommentQuote('comment-quote-416693','guangju');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416803" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author">Feng</span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416803">
            <blockquote>
<pre>引用bluesen的发言：</pre>

<p>我现在教三年级的儿子学C语言编程，要求他无论是变量命名，还是写注释，全部使用英语，不会的就谷歌翻译，从小严格要求。</p>

</blockquote>

<p>大神，膜拜啊！三年级就被你推坑里去了！！</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March 11, 2020  3:11 PM">2020年3月11日 15:11</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416803" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用Feng的这条留言" onclick="return CommentQuote('comment-quote-416803','Feng');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416860" class="comment">
    <div class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
<span class="vcard author"><a title="http://www.leoseo.cn" href="http://www.leoseo.cn" target="_blank" rel="nofollow">吕民康</a></span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416860">
            <blockquote>
<pre>引用bluesen的发言：</pre>

<p>我现在教三年级的儿子学C语言编程，要求他无论是变量命名，还是写注释，全部使用英语，不会的就谷歌翻译，从小严格要求。</p>

</blockquote>

<p>这个。。。你也要看他是不是适合，是不是喜欢编程这个东西吧。这个世界这么大， 孩子的未来是有无限可能性的，他可以靠其他的技能一样生活得很好。</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March 13, 2020  9:37 PM">2020年3月13日 21:37</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416860" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用吕民康的这条留言" onclick="return CommentQuote('comment-quote-416860','吕民康');">引用</a>
</p>
</div>
</div>
    </div>
</div>
<div id="comment-416905" class="comment">
    <div id="comment-last" class="inner">
        <div class="comment-header">
            <div class="asset-meta">
<p>
                <span class="byline">
 <span class="vcard author">Q</span>

<p> 说：<br>                </p></span></p>
<p></p>
            </div>
        </div>
        <div class="comment-content" id="comment-quote-416905">
            <p>印度约两亿人（约占总人口1/7）说流利英语，这一点比菲律宾好，菲律宾人口才一亿多</p>
        </div>
<div class="comment-footer">
<div class="comment-footer-inner">
<p>
                   <abbr class="published" title="March 18, 2020 12:14 PM">2020年3月18日 12:14</abbr>
 | <a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html#comment-416905" target="_blank" rel="noopener">#</a>
 | <a href="#comment-text" title="引用Q的这条留言" onclick="return CommentQuote('comment-quote-416905','Q');">引用</a>
</p>
</div>
</div>
    </div>
</div>
 </div>

]]></content>
      <categories>
        <category>talkabout</category>
      </categories>
      <tags>
        <tag>talkabout</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.0集成Shiro</title>
    <url>/myblog/spring-boot/SpringBoot2-0%E9%9B%86%E6%88%90Shiro/index/</url>
    <content><![CDATA[<p>Shiro 整合到 SpringBoot<br>中，并且避开一些小坑，由浅入深，从最基本的配置开始，一步一步加入新的功能。这样理解起来也稍微简单点</p><p></p>
<a id="more"></a>
<h1><a name="t0"></a><a name="t0"></a><a id="_2"></a>项目版本：</h1>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">springboot2.x</span><br><span class="line">shiro：<span class="number">1.3</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<h1><a name="t1"></a><a name="t1"></a><a id="Maven_6"></a>
Maven配置：
</h1>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h1><a name="t2"></a><a name="t2"></a><a id="_16"></a>写在前面的话：</h1>

<blockquote>
<p>springboot中集成shiro相对简单，只需要两个类：一个是shiroConfig类，一个是CustonRealm类。</p>
</blockquote>
<h2><a name="t3"></a><a name="t3"></a><a id="ShiroConfig_19"></a>ShiroConfig类：</h2>
<p>顾名思义就是对shiro的一些配置，相对于之前的xml配置。包括：过滤的文件和权限，密码加密的算法，其用注解等相关功能。</p>
<h2><a name="t4"></a><a name="t4"></a><a id="CustomRealm_23"></a>CustomRealm类：</h2>
<p>自定义的CustomRealm继承<code>AuthorizingRealm</code>。并且重写父类中的<code>doGetAuthorizationInfo</code>（权限相关）、<code>doGetAuthenticationInfo</code>（身份认证）这两个方法。</p>
<h1><a name="t5"></a><a name="t5"></a><a id="_26"></a>最基本的配置：</h1>
<h2><a name="t6"></a><a name="t6"></a><a id="shiroConfig_28"></a>shiroConfig配置：</h2>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cj.shirodemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.DependsOn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> caojing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-01-27-13:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/notRole"</span>);</span><br><span class="line">        Map&amp;lt;String, String&amp;gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&amp;lt;&amp;gt;();</span><br><span class="line">        <span class="comment">// &amp;lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&amp;gt;</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/webjars/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/front/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/api/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line"></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/admin/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/user/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="comment">//主要这行代码必须放在所有权限设置的最后，不然会导致所有 url 都被拦截 剩余的都需要认证</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        defaultSecurityManager.setRealm(customRealm());</span><br><span class="line">        <span class="keyword">return</span> defaultSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CustomRealm customRealm = <span class="keyword">new</span> CustomRealm();</span><br><span class="line">        <span class="keyword">return</span> customRealm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<div class="hljs-button {2}" data-title="复制"></div>
<p>shiroConfig 也不复杂，基本就三个方法。再说这三个方法之前，我想给大家说一下shiro的三个核心概念：</p>

<blockquote>
<ol> <li>Subject：
代表当前正在执行操作的用户，但Subject代表的可以是人，也可以是任何第三方系统帐号。当然每个subject实例都会被绑定到SercurityManger上。</li>
<li>SecurityManger:SecurityManager是Shiro核心，主要协调Shiro内部的各种安全组件，这个我们不需要太关注，只需要知道可以设置自定的Realm。</li>
<li>Realm:用户数据和Shiro数据交互的桥梁。比如需要用户身份认证、权限认证。都是需要通过Realm来读取数据。</li>
</ol>
</blockquote>
<p><strong>shiroFilter方法：</strong><br>
这个方法看名字就知道了：

<blockquote>
<p>shiro的过滤器，可以设置登录页面（<code>setLoginUrl</code>）、权限不足跳转页面（<code>setUnauthorizedUrl</code>）、具体某些页面的权限控制或者身份认证。<br><br><strong>注意：这里是需要设置SecurityManager（<code>setSecurityManager</code>）。</strong><br></p>
</blockquote>
</p><p>默认的过滤器还有：</p>
<blockquote>
<p>anno、authc、authcBasic、logout、noSessionCreation、perms、port、rest、roles、ssl、user过滤器。</p>
</blockquote>
<br>
具体的大家可以查看<code>package org.apache.shiro.web.filter.mgt.DefaultFilter</code>。这个类，常用的也就authc、anno。<br>
<strong>securityManager 方法：</strong><br>
查看源码可以知道 securityManager是一个接口类，我们可以看下它的实现类：<br>
<img src="https://img-blog.csdnimg.cn/20190128141511109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpY2hlbmc0NzY5,size_16,color_FFFFFF,t_70" alt="实现类"><br>
具体怎么实现的，感兴趣的同学可以看下。由于项目是一个web项目，所以我们使用的是<code>DefaultWebSecurityManager</code> ，然后设置自己的Realm。<br>
<strong>CustomRealm 方法：</strong><br>
将 customRealm的实例化交给spring去管理，当然这里也可以利用注解的方式去注入。<p></p>
<h2><a name="t7"></a><a name="t7"></a><a id="customRealm_112"></a>customRealm配置：</h2>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cj.shirodemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> caojing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-01-27-13:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        String username = (String) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        Set&amp;lt;String&amp;gt; stringSet = <span class="keyword">new</span> HashSet&amp;lt;&amp;gt;();</span><br><span class="line">        stringSet.add(<span class="string">"user:show"</span>);</span><br><span class="line">        stringSet.add(<span class="string">"user:admin"</span>);</span><br><span class="line">        info.setStringPermissions(stringSet);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里可以注入userService,为了方便演示，我就写死了帐号了密码</span></span><br><span class="line"><span class="comment">     * private UserService userService;</span></span><br><span class="line"><span class="comment">     * &amp;lt;p&amp;gt;</span></span><br><span class="line"><span class="comment">     * 获取即将需要认证的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-------身份认证方法--------"</span>);</span><br><span class="line">        String userName = (String) authenticationToken.getPrincipal();</span><br><span class="line">        String userPwd = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) authenticationToken.getCredentials());</span><br><span class="line">        <span class="comment">//根据用户名从数据库获取密码</span></span><br><span class="line">        String password = <span class="string">"123"</span>;</span><br><span class="line">        <span class="keyword">if</span> (userName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccountException(<span class="string">"用户名不正确"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!userPwd.equals(password )) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccountException(<span class="string">"密码不正确"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(userName, password,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>说明：</strong><br>
自定义的Realm类继承AuthorizingRealm类，并且重载<code>doGetAuthorizationInfo</code>和<code>doGetAuthenticationInfo</code>两个方法。<br>
<code>doGetAuthorizationInfo</code>： 权限认证，即登录过后，每个身份不一定，对应的所能看的页面也不一样。<br>
<code>doGetAuthenticationInfo</code>：身份认证。即登录通过账号和密码验证登陆人的身份信息。</p>
<h2><a name="t8"></a><a name="t8"></a><a id="controller_177"></a>controller类：</h2>
<p>新建一个HomeIndexController类，加入如下代码：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">defaultLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"首页"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line">        <span class="comment">// 从SecurityUtils里边创建一个 subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 在认证提交前准备 token（令牌）</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">        <span class="comment">// 执行认证登陆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"未知账户"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"密码不正确"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"账户已锁定"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExcessiveAttemptsException eae) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"用户名或密码错误次数过多"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"用户名或密码不正确！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"登录成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            token.clear();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"登录失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2><a name="t9"></a><a name="t9"></a><a id="_218"></a>测试：</h2>
<p>我们可以使用postman进行测试：<br>
<img src="https://img-blog.csdnimg.cn/20190128143509871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpY2hlbmc0NzY5,size_16,color_FFFFFF,t_70" alt="登录成功"><br>
ok 身份认证是没问题了，我们再来考虑如何加入权限。</p>
<h1><a name="t10"></a><a name="t10"></a><a id="_223"></a>利用注解配置权限：</h1>
<p>其实，我们完全可以不用注解的形式去配置权限，因为在之前已经加过了：DefaultFilter类中有<code>perms</code>（类似于perms[user:add]）这种形式的。但是试想一下，这种控制的粒度可能会很细，具体到某一个类中的方法，那么如果是配置文件配，是不是每个方法都要加一个perms？但是注解就不一样了，直接写在方法上面，简单快捷。<br>
很简单，主需要在config类中加入如下代码，就能开启注解：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * *</span></span><br><span class="line"><span class="comment">     * 开启Shiro的注解(如<span class="doctag">@RequiresRoles</span>,<span class="doctag">@RequiresPermissions</span>),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证</span></span><br><span class="line"><span class="comment">     * *</span></span><br><span class="line"><span class="comment">     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能</span></span><br><span class="line"><span class="comment">     * * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@DependsOn</span>(&#123;<span class="string">"lifecycleBeanPostProcessor"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">advisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        advisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> advisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>新建一个UserController类。如下：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"user:list"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/show"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是学生信息"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重复刚才的登录步骤，登录成功后，postman 输入localhost:8080/user/show<br>
<img src="https://img-blog.csdnimg.cn/20190128144923792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpY2hlbmc0NzY5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
确实是没有权限。方法上是   <code>@RequiresPermissions("user:list")</code>，而customRealm中是 <code>user:show</code>、<code>user:admin</code>。我们可以调整下方法上的权限改为<code>user:show</code>。调试一下，发现成功了。<br>
这里有一个问题：当没有权限时，系统会报错，而没有跳转到对应的没有权限的页面，也就是<code>setUnauthorizedUrl</code>这个方法没起作用，这个问题，下一篇会给出解决方案-。-</p>
<h1><a name="t11"></a><a name="t11"></a><a id="_274"></a>密码采用加密方式进行验证：</h1>
<p>其实上面的功能已经基本满足我们的需求了，但是唯一一点美中不足的是，密码都是采用的明文方式进行比对的。那么shiro是否提供给我们一种密码加密的方式呢？答案是肯定。<br>
shiroConfig中加入加密配置：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"credentialsMatcher"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">      <span class="comment">// 散列算法:这里使用MD5算法;</span></span><br><span class="line">      hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line">      <span class="comment">// 散列的次数，比如散列两次，相当于 md5(md5(""));</span></span><br><span class="line">      hashedCredentialsMatcher.setHashIterations(<span class="number">2</span>);</span><br><span class="line">      <span class="comment">// storedCredentialsHexEncoded默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码</span></span><br><span class="line">      hashedCredentialsMatcher.setStoredCredentialsHexEncoded(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>customRealm初始化的时候耶需要做一些改变：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CustomRealm customRealm = <span class="keyword">new</span> CustomRealm();</span><br><span class="line">        <span class="comment">// 告诉realm,使用credentialsMatcher加密算法类来验证密文</span></span><br><span class="line">        customRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span><br><span class="line">        customRealm.setCachingEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> customRealm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>流程是这样的，用户注册的时候，程序将明文通过加密方式加密，存到数据库的是密文，登录时将密文取出来，再通过shiro将用户输入的密码进行加密对比，一样则成功，不一样则失败。<br>
我们可以看到这里的加密采用的是<code>MD5</code>，而且是加密两次（<code>MD5(MD5)</code>）。<br>
shiro提供了SimpleHash类帮助我们快速加密：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">MD5Pwd</span><span class="params">(String username, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加密算法MD5</span></span><br><span class="line">        <span class="comment">// salt盐 username + salt</span></span><br><span class="line">        <span class="comment">// 迭代次数</span></span><br><span class="line">        String md5Pwd = <span class="keyword">new</span> SimpleHash(<span class="string">"MD5"</span>, pwd,</span><br><span class="line">                ByteSource.Util.bytes(username + <span class="string">"salt"</span>), <span class="number">2</span>).toHex();</span><br><span class="line">        <span class="keyword">return</span> md5Pwd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>也就是说注册的时候调用一下上面的方法得到密文之后，再存入数据库。<br>
在CustomRealm进行身份认证的时候我们也需要作出改变：</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"-------身份认证方法--------"</span>);</span><br><span class="line">String userName = (String) authenticationToken.getPrincipal();</span><br><span class="line">String userPwd = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) authenticationToken.getCredentials());</span><br><span class="line"><span class="comment">//根据用户名从数据库获取密码</span></span><br><span class="line">String password = <span class="string">"2415b95d3203ac901e287b76fcef640b"</span>;</span><br><span class="line"><span class="keyword">if</span> (userName == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AccountException(<span class="string">"用户名不正确"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!userPwd.equals(userPwd)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AccountException(<span class="string">"密码不正确"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交给AuthenticatingRealm使用CredentialsMatcher进行密码匹配</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(userName, password,</span><br><span class="line">        ByteSource.Util.bytes(userName + <span class="string">"salt"</span>), getName());</span><br></pre></td></tr></table></figure>

<h2 id="这里唯一需要注意的是："><a href="#这里唯一需要注意的是：" class="headerlink" title="这里唯一需要注意的是："></a><strong><p>这里唯一需要注意的是：</p></strong></h2><blockquote>
<p>你注册的加密方式和设置的加密方式还有Realm中身份认证的方式都是要一模一样的。<br> 本文中的加密<br>：MD5两次、salt=username+salt加密。</p><p></p>
</blockquote>
<h1><a name="t12"></a><a name="t12"></a><a id="_337"></a>总结：</h1>

<p>spirngboot整合shiro其实不难，重点是对shiro的核心概念需要有点了解，不然只知道怎么配，而不知道为什么这么配，就很尴尬了。<br>
> **</p>




]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>boot Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目整合ELK、kafka</title>
    <url>/myblog/spring-boot/SpringBoot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88ELK%E3%80%81kafka/</url>
    <content><![CDATA[<div class="htmledit_views" id="content_views">
                                            <p>本篇文章主要介绍使用Spring Boot整合log4j，配合ELK（Elasticsearch , Logstash, Kibana）整合Kafka完成日志收集，应用场景比较多的是分布式项目，这样可以直接收集各个节点的日志到一起，便于错误日志查看和分析业务。</p>
<a id="more"></a>
<p><span style="color:#f33b45;">整个流程如下：</span></p>

<p><span style="color:#f33b45;">使用log4j的appender发送数据到kafka到topic，topic再发送到logstash，然后经过elasticsearch分析处理后到kibana页面做查询展示。</span></p>

<p><span style="color:#f33b45;">环境准备：</span></p>

<p>1、安装ELK</p>

<p>2、安装kafka</p>

<p>3、Spring Boot项目demo</p>

<h2><a name="t0"></a><a name="t0"></a>简要步骤：</h2>

<p>①、修改logj配置文件</p>

<p>②、加入日志打印代码</p>

<p>③、启动项目访问页面</p>

<p>④、使用kafka查看消费者打印</p>

<p>⑤、使用kibana建立日志索引</p>

<p>⑥、使用kibana查询日志、es语法查询</p>

<p>&nbsp;</p>

<h2><a name="t1"></a><a name="t1"></a>详细步骤：</h2>

<h3><a name="t2"></a><a name="t2"></a><a name="t2"></a>一、修改logj配置文件</h3>

<p><span style="color:#f33b45;">注：本项目demo是基于之前到Spring Boot入门教程的一个整合JPA 和 Thymeleaf示例。</span></p>

<p>Spring Boot2.0系列教程之 JPA 和 Thymeleaf 实践（五）：<a href="https://blog.csdn.net/zjh_746140129/article/details/81254965" target="_blank" rel="noopener">Spring Boot2.0系列教程之 JPA 和 Thymeleaf 实践（五）</a></p>

<p><span style="color:#f33b45;">配置文件logback-spring.xml</span></p>

<p><span style="color:#f33b45;"><img alt class="has" src="https://img-blog.csdnimg.cn/20190302173422381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></span></p>

<pre class="has" name="code"><code class="hljs xml"><ol class="hljs-ln hundred" style="width:1046px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">"false"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"context"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"LOG_HOME"</span> <span class="hljs-attr">source</span>=<span class="hljs-string">"logback.file.path"</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">"E:\a_hadoop\All_logs"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"context"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"LOG_LEVEL"</span> <span class="hljs-attr">source</span>=<span class="hljs-string">"logback.level"</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">"info"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"context"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"SERVER_NAME"</span> <span class="hljs-attr">source</span>=<span class="hljs-string">"spring.application.name"</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">"boot_demo"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!--&lt;property name="LOG_HOME" value="D:/application/logs/enett" /&gt;--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!--&lt;property name="LOG_HOME" value="/Users/ailk/test/ysl" /&gt;--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"SEF_Level"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"INFO"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!--文件输出的格式设置 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"FILE"</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">           <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-comment">&lt;!-- 文件输出的日志 的格式 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            ${SERVER_NAME} ${NODE_FLAG} %level %date{yyyy-MM-dd HH:mm:ss.SSS} %logger[%line] %msg%n</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-comment">&lt;!-- 配置日志所生成的目录以及生成文件名的规则 在logs/mylog-2016-10-31.0.log --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>${LOG_HOME}/${SERVER_NAME}/info/info-%d{yyyy-MM-dd}.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">               <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!-- 最大64MB 超过最大值，会重新建一个文件--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10 MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!--控制台输出的格式设置 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"STDOUT"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-comment">&lt;!-- 控制台输出的日志 的格式 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            ${SERVER_NAME} ${NODE_FLAG} %level %date{yyyy-MM-dd HH:mm:ss.SSS} %logger[%line] %msg%n</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-comment">&lt;!-- 只是DEBUG级别以上的日志才显示 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>DEBUG<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    操作日志</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"DruidLog"</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">           <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-comment">&lt;!-- 文件输出的日志 的格式 --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            ${SERVER_NAME} ${NODE_FLAG} %level %date{yyyy-MM-dd HH:mm:ss.SSS} %logger[%line] %msg%n</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-comment">&lt;!-- 配置日志所生成的目录以及生成文件名的规则 在logs/mylog-2016-10-31.0.log --&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>${LOG_HOME}/${SERVER_NAME}/Druid/DruidLog-%d{yyyy-MM-dd}.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">               <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">&lt;!-- 最大64MB 超过最大值，会重新建一个文件--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="78"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10 MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="80"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"kafkaAppender"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.github.danielwegener.logback.kafka.KafkaAppender"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>${SERVER_NAME} ${NODE_FLAG} %level %date{yyyy-MM-dd HH:mm:ss.SSS} %logger[%line] %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="92"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">topic</span>&gt;</span>boot_demo<span class="hljs-tag">&lt;/<span class="hljs-name">topic</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">keyingStrategy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">deliveryStrategy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      　　　　 <span class="hljs-comment">&lt;!--注意此处应该是spring boot中的kafka配置属性--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">producerConfig</span>&gt;</span>bootstrap.servers=192.168.234.156:9092<span class="hljs-tag">&lt;/<span class="hljs-name">producerConfig</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="98"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      　　　　 <span class="hljs-tag">&lt;<span class="hljs-name">producerConfig</span>&gt;</span>retries=1<span class="hljs-tag">&lt;/<span class="hljs-name">producerConfig</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      　　　　<span class="hljs-tag">&lt;<span class="hljs-name">producerConfig</span>&gt;</span>batch-size=16384<span class="hljs-tag">&lt;/<span class="hljs-name">producerConfig</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      　　　　<span class="hljs-tag">&lt;<span class="hljs-name">producerConfig</span>&gt;</span>buffer-memory=33554432<span class="hljs-tag">&lt;/<span class="hljs-name">producerConfig</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      　　　　<span class="hljs-tag">&lt;<span class="hljs-name">producerConfig</span>&gt;</span>properties.max.request.size==2097152<span class="hljs-tag">&lt;/<span class="hljs-name">producerConfig</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="103"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="104"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="105"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="107"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="108"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="109"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">&lt;!--   &lt;logger name="com.alibaba.druid" additivity="false"  level="INFO"&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">      &lt;appender-ref ref="DruidLog" /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="112"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">   &lt;/logger&gt;--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="113"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="115"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.springframework"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="118"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.baomidou"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.apache"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.mybatis"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.hibernate"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="122"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"io.netty"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="123"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ch.qos"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="124"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.eclipse"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.thymeleaf"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"io.lettuce"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.xxl"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.ctrip"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="129"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.ulisesbocchio"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="130"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.netflix"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="131"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="132"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment">&lt;!--myibatis log configure--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="133"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.apache.ibatis"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="134"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"java.sql.Connection"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="135"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"java.sql.Statement"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="136"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"java.sql.PreparedStatement"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span>/&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="137"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tk.mybatis.mapper"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="138"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.github.pagehelperr"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="139"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.apache.kafka"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="140"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"c.u.jasyptspringboot"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="141"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.ulisesbocchio.jasyptspringboot"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="142"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.springframework.context.annotation"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="143"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.springframework.beans.factory.annotation"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="144"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"org.springframework.context.support"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="145"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver"</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${SEF_Level}"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="146"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="147"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="148"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="149"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   <span class="hljs-comment"><span class="hljs-comment">&lt;!--   &lt;root level="${LOG_LEVEL}"&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="150"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">         &lt;appender-ref ref="STDOUT" /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="151"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">      &lt;/root&gt;--&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="152"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="153"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"${LOG_LEVEL}"</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="154"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"FILE"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="155"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"STDOUT"</span> /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="156"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">         <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"kafkaAppender"</span>  /&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="157"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="158"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="159"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>

<p></p>

<p>&nbsp;</p>

<h3><a name="t3"></a><a name="t3"></a>二、加入日志打印代码</h3>

<p><span style="color:#f33b45;">1、日志格式化类、json工具类</span></p>

<p><span style="color:#f33b45;"><img alt class="has" src="https://img-blog.csdnimg.cn/20190302173532509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></span></p>

<p><span style="color:#f33b45;">2、日志打印方法调整</span><span style="color:#f33b45;">，这里后续可以在kibana中看到日志</span></p>

<p><span style="color:#f33b45;"><img alt class="has" src="https://img-blog.csdnimg.cn/2019030217360223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></span></p>

<p><span style="color:#f33b45;">3、json工具类代码</span></p>

<pre class="has" name="code"><code class="hljs java"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.boot.config;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.google.gson.Gson;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.lang.reflect.Type;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.List;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.Map;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * JSON工具类</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhoujh</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JSONUtil</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Gson gson = <span class="hljs-keyword">null</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">static</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        gson = <span class="hljs-keyword">new</span> Gson();<span class="hljs-comment">// yyyy-MM-dd HH:mm:ss</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Gson <span class="hljs-title">newInstance</span><span class="hljs-params">()</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (gson == <span class="hljs-keyword">null</span>) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            gson = <span class="hljs-keyword">new</span> Gson();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> gson;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * 从对象生成JSON字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj 任意对象</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toJson</span><span class="hljs-params">( Object obj )</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> gson.toJson(obj);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">toJsonByFastJson</span><span class="hljs-params">( Object obj )</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span>  JSON.toJSONString(obj);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * JSON字符串转为JavaBean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json JSON字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">jsonToBean</span><span class="hljs-params">( String json, Class&lt;T&gt; cls )</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> gson.fromJson(json, cls);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">jsonToBeanByFastJson</span><span class="hljs-params">( String json, Class&lt;T&gt; cls )</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> JSON.parseObject(json, cls);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * JSON字符串转为JavaBean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json JSON字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">jsonToList</span><span class="hljs-params">( String json, Type type )</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> gson.fromJson(json, type);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">jsonToListByFastJson</span><span class="hljs-params">( String json, Class&lt;T&gt; cls)</span></span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">       <span class="hljs-keyword">return</span> JSON.parseArray(json,cls);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * JSON字符串转为JavaBean</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json JSON字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">Map&lt;String, T&gt; <span class="hljs-title">jsonToMap</span><span class="hljs-params">( String json, Type type )</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> gson.fromJson(json, type);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>

<p><span style="color:#f33b45;">4、日志工具类代码</span></p>

<pre class="has" name="code"><code class="hljs java"><ol class="hljs-ln hundred" style="width:1119px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">package</span> com.boot.config;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> com.google.gson.Gson;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.apache.commons.logging.Log;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> org.apache.commons.logging.LogFactory;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> java.util.HashMap;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * 基础日志类</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhoujh</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 20180709</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"> */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogUtil</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Log log = LogFactory.getLog(LogUtil.class);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String thisClassName = LogUtil.class.getName();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">//信息分隔符</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String msgSplit = <span class="hljs-string">":"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">//是否要定位服务</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> showLocSrc = <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">//是否显示日志</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> enabled = <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">//显示等级</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> level = <span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> debug = <span class="hljs-number">1</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> info = <span class="hljs-number">2</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> warn = <span class="hljs-number">3</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> error = <span class="hljs-number">4</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">     <span class="hljs-comment"><span class="hljs-comment">/*</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">        日志记录具体使用规则如下：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">        Error：所有异常捕获的Catch节点中异常内容用此级别进行记录（如：Exception对象的e.ToString()）</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">        Warn：所有验证未通过时用此级别进行记录（暂时只用来记录接口请求或通知等验证未通过需要警告进行跟进的操作）（如：签名解析失败记录）</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">        Info：功能日常交互信息类用此级别进行记录（如：请求接口参数、接口响应参数等）</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">        Debug：业务代码交互或调试使用此级别进行记录，但只存在于开发及测试环境，生产环境将会禁用不会记录（如：xx对象信息或xx对象json等）</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">        日志记录格式如下：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">        【传入参数（如：操作ID、订单ID、票号、金额等）】【具体内容】 /n Exception堆栈信息（Exception记录必须使用e.ToString()记录堆栈信息）</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">    */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">/* 日志格式化文本 */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LOGFORMAT = <span class="hljs-string">"【%s】【%s】"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getLogContent</span><span class="hljs-params">(String pContent, Object... pParameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String fParameters = <span class="hljs-string">""</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != pParameters &amp;&amp; <span class="hljs-number">0</span> &lt; pParameters.length) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            Gson gson = <span class="hljs-keyword">new</span> Gson();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            fParameters = String.format(<span class="hljs-string">"参数：%s"</span>, gson.toJson(pParameters));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> String.format(LOGFORMAT, pContent, fParameters);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * 记录Debug级日志[业务代码交互或调试使用此级别进行记录，但只存在于开发及测试环境，生产环境将会禁用不会记录（如：xx对象信息或xx对象json等）]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 信息综述</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  parameters 详述</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">(String content)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        debug(content,<span class="hljs-string">""</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">(String content, Object parameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        debug(content, JSONUtil.toJson(parameters));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">(String content, String parameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">       String message=String.format(LOGFORMAT, content, parameters);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (!enabled || debug &lt; level)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="78"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">return</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (showLocSrc) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="80"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(debug, message, Thread.currentThread().getStackTrace(),<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        } <span class="hljs-keyword">else</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(debug, message, <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="92"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * 记录Info级日志[功能日常交互信息类用此级别进行记录（如：请求接口参数、接口响应参数等）]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 信息综述</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  parameters 详述</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">(String content)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="98"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        info(content,<span class="hljs-string">""</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">(String content, Object parameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        info(content, JSONUtil.toJson(parameters));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="103"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="104"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="105"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">(String content, String parameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String message=String.format(LOGFORMAT, content, parameters);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="107"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (!enabled || info &lt; level)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="108"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">return</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="109"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (showLocSrc) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(info, message, Thread.currentThread().getStackTrace(),<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        } <span class="hljs-keyword">else</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="112"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(info, message, <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="113"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="115"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="118"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * 记录Warn级日志[所有验证未通过时用此级别进行记录（暂时只用来记录接口请求或通知等验证未通过需要警告进行跟进的操作）（如：签名解析失败记录）]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="122"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 信息综述</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="123"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  parameters 详述</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="124"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">warn</span><span class="hljs-params">(String content)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        warn(content,<span class="hljs-string">""</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="129"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">warn</span><span class="hljs-params">(String content, Object parameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="130"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        warn(content, JSONUtil.toJson(parameters));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="131"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="132"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="133"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">warn</span><span class="hljs-params">(String content, String parameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="134"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String message=String.format(LOGFORMAT, content, parameters);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="135"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (!enabled || warn &lt; level)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="136"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">return</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="137"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (showLocSrc) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="138"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(warn, message, Thread.currentThread().getStackTrace(),<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="139"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        } <span class="hljs-keyword">else</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="140"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(warn, message, <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="141"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="142"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="143"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="144"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="145"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="146"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="147"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="148"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment"><span class="hljs-comment">/**</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="149"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * Error：所有异常捕获的Catch节点中异常内容用此级别进行记录（如：Exception对象的e.ToString()）</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="150"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     *</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="151"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="152"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 信息综述</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="153"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  parameters 详述</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="154"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e          异常信息</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="155"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">     */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="156"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(String content)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="157"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(content,<span class="hljs-string">""</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="158"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="159"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="160"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(String content, Object parameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="161"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(content, JSONUtil.toJson(parameters));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="162"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="163"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="164"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(String content, String parameters)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="165"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String message=String.format(LOGFORMAT, content, parameters);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="166"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (!enabled || error &lt; level)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="167"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">return</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="168"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (showLocSrc) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="169"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(error, message, Thread.currentThread().getStackTrace(),<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="170"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        } <span class="hljs-keyword">else</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="171"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(error, message, <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="172"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="173"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="174"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="175"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(String content,Exception e)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="176"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(content,<span class="hljs-string">""</span>,e);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="177"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="178"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="179"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(String content, Object parameters,Exception e)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="180"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(content, JSONUtil.toJson(parameters),e);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="181"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="182"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="183"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(String content, String parameters,Exception e)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="184"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String message=String.format(LOGFORMAT, content, parameters);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="185"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (!enabled || error &lt; level)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="186"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">return</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="187"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (showLocSrc) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="188"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(error, message, Thread.currentThread().getStackTrace(),e);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="189"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        } <span class="hljs-keyword">else</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="190"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            log(error, message, <span class="hljs-keyword">null</span>,e);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="191"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="192"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="193"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="194"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="195"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getStackMsg</span><span class="hljs-params">(StackTraceElement[] ste)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="196"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (ste == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="197"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="198"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">boolean</span> srcFlag = <span class="hljs-keyword">false</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="199"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ste.length; i++) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="200"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            StackTraceElement s = ste[i];</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="201"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="202"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span>(s==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">continue</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="203"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="204"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">// 如果上一行堆栈代码是本类的堆栈，则该行代码则为源代码的最原始堆栈。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="205"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> (srcFlag) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="206"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">if</span>(!thisClassName.equals(s.getClassName()))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="207"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">return</span> s.toString();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="208"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="209"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="210"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">// 定位本类的堆栈</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="211"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> (thisClassName.equals(s.getClassName())) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="212"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                srcFlag = <span class="hljs-keyword">true</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="213"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="214"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="215"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="216"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="217"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="218"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="219"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(<span class="hljs-keyword">int</span> level, Object message, StackTraceElement[] ste, Exception e)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="220"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (ste != <span class="hljs-keyword">null</span>) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="221"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            message = getStackMsg(ste) + msgSplit + message;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="222"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="223"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="224"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">switch</span> (level) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="225"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">case</span> info:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="226"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                log.info(message);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="227"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="228"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">case</span> debug:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="229"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                log.debug(message);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="230"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="231"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">case</span> warn:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="232"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                log.warn(message);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="233"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="234"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">case</span> error:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="235"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                log.error(message,e);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="236"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="237"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">default</span>:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="238"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                log.debug(message);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="239"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="240"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="241"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="242"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="243"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        debug(<span class="hljs-string">"ss"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="244"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        debug(<span class="hljs-string">"sdf"</span>,<span class="hljs-string">"sdf"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="245"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        debug(<span class="hljs-string">"sdf"</span>,<span class="hljs-keyword">new</span> HashMap());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="246"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="247"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        info(<span class="hljs-string">"ss"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="248"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        info(<span class="hljs-string">"sdf"</span>,<span class="hljs-string">"sdf"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="249"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        info(<span class="hljs-string">"sdf"</span>,<span class="hljs-keyword">new</span> HashMap());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="250"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="251"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        warn(<span class="hljs-string">"ss"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="252"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        warn(<span class="hljs-string">"sdf"</span>,<span class="hljs-string">"sdf"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="253"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        warn(<span class="hljs-string">"sdf"</span>,<span class="hljs-keyword">new</span> HashMap());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="254"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="255"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="256"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(<span class="hljs-string">"ss"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="257"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(<span class="hljs-string">"sdf"</span>,<span class="hljs-string">"sdf"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="258"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(<span class="hljs-string">"sdf"</span>,<span class="hljs-keyword">new</span> HashMap());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="259"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="260"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(<span class="hljs-string">"ss"</span>,<span class="hljs-keyword">new</span> Exception());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="261"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(<span class="hljs-string">"sdf"</span>,<span class="hljs-string">"sdf"</span>,<span class="hljs-keyword">new</span> Exception());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="262"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        error(<span class="hljs-string">"sdf"</span>,<span class="hljs-keyword">new</span> HashMap(),<span class="hljs-keyword">new</span> Exception());</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="263"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="264"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>

<p>&nbsp;</p>

<h3><a name="t4"></a><a name="t4"></a>三、启动项目访问页面</h3>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224144302560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>&nbsp;</p>

<h3><a name="t5"></a><a name="t5"></a>四、使用kafka查看消费者打印</h3>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224144344540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>&nbsp;</p>

<h3><a name="t6"></a><a name="t6"></a>五、使用kibana建立日志索引</h3>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224144401610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>已经看到日志&nbsp;</p>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224144643972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>点击创建需要等待</p>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224144718433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>成功后可以看到创建的索引</p>

<p>&nbsp;</p>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224144808539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>&nbsp;</p>

<h3><a name="t7"></a><a name="t7"></a>六、使用kibana查询日志、es语法查询</h3>

<p>1、这里选择查询时间段</p>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224144911333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>&nbsp;</p>

<p>可以查看到日志</p>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224144947581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224145000217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>2、&nbsp;用es语法查询</p>

<p><img alt class="has" src="https://img-blog.csdnimg.cn/20190224145035268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqaF83NDYxNDAxMjk=,size_16,color_FFFFFF,t_70"></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><span style="color:#f33b45;">推荐笔者elk、kafka、Springboot相关博客：</span></p>

<p>ELK架构体系、ELK运行原理、ELK应用场景、ELK简单介绍（一）：<a href="https://blog.csdn.net/zjh_746140129/article/details/86483318" target="_blank" rel="noopener">https://blog.csdn.net/zjh_746140129/article/details/86483318</a></p>

<p>Linux安装ELK、elasticsearch部署安装（二）：<a href="https://blog.csdn.net/zjh_746140129/article/details/86483661" target="_blank" rel="noopener">https://blog.csdn.net/zjh_746140129/article/details/86483661</a></p>

<p>Linux安装ELK、logstash部署安装（三）：<a href="https://blog.csdn.net/zjh_746140129/article/details/86484586" target="_blank" rel="noopener">https://blog.csdn.net/zjh_746140129/article/details/86484586</a></p>

<p>Linux安装ELK、kibana部署安装（四）：<a href="https://blog.csdn.net/zjh_746140129/article/details/86484862" target="_blank" rel="noopener">https://blog.csdn.net/zjh_746140129/article/details/86484862</a></p>

<p>ELK启动报错：OpenJDK 64-Bit Server VM warning：<a href="https://blog.csdn.net/zjh_746140129/article/details/86601574" target="_blank" rel="noopener">https://blog.csdn.net/zjh_746140129/article/details/86601574</a></p>

<p>ELK常见错误问题、ELK的一些坑、Unable to connect to Elasticsearch at http://localhost:9200：<a href="https://blog.csdn.net/zjh_746140129/article/details/86601791" target="_blank" rel="noopener">https://blog.csdn.net/zjh_746140129/article/details/86601791</a></p>

<p>Centons7下安装配置Kafka、Linux下安装配置Kafka：<a href="https://blog.csdn.net/zjh_746140129/article/details/84191058" target="_blank" rel="noopener">Centons7下安装配置Kafka、Linux下安装配置Kafka</a></p>

<p>Spring Boot2.0系列教程之 JPA 和 Thymeleaf 实践（五）：<a href="https://blog.csdn.net/zjh_746140129/article/details/81254965" target="_blank" rel="noopener">Spring Boot2.0系列教程之 JPA 和 Thymeleaf 实践（五）</a></p>

<p>&nbsp;</p>

<p>&nbsp;</p>
                                    </div>]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>boot</tag>
      </tags>
  </entry>
</search>
